<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<doc>
    <assembly>
        <name>Atalasoft.dotImage</name>
    </assembly>
    <members>
        <member name="N:Atalasoft.Imaging">
            <summary><![CDATA[The Atalasoft.Imaging namespace contains general classes, exceptions, and enumerations that deal with image data and workspaces and is the root namespace for all dotImage classes.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.FlipDirection">
            <summary>Specifies the flip direction.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Vertical">
            <summary>Flip Vertically.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Horizontal">
            <summary>Flip Horizontally.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PaletteType">
            <summary>Contains the standard palette types that a palette can be set to.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Grayscale">
            <summary>The standard grayscale palette with gray colors. Entry 0 corresponds to Black and entry 255 corresponds with white, with gray shades between.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Web">
            <summary>A palette where each primitive is a multiple of 51. (0, 51, 102, 153, 204, 255).             With six possible values per primitive and 3 primitives (red, green and blue) the             maximum colors are 216. (6^3=216)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.SixteenColor">
            <summary>Standard windows 16 color palette.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.BlackAndWhite">
            <summary>Two color black and white palette</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormat">
            <summary>Specifies the format of the color data for each pixel in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel1bppIndexed">
            <summary><![CDATA[One bit per pixel.  A two color palette defines the colors associated with bit values of 0 and 1. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel4bppIndexed">
            <summary>Four bits per pixel.  A 16 color palette defines the colors associated with each pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppIndexed">
            <summary>Eight bits per pixel. A palette of up to 256 colors may be used.  Can contain alpha palette values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel24bppBgr">
            <summary><![CDATA[Twenty-four bits per pixel with pixel channels containing Blue, Green, and Red values in that order.  This is also called an RGB image despite the order of the channels. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgra">
            <summary><![CDATA[Thirty-two bits per pixel with pixel channels containing Blue, Green, Red, and Alpha values in that order.  This is also called an RGBA image despite the order of the channels.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgr">
            <summary><![CDATA[Thirty-two bits per pixel with pixel channels containing Blue, Green, and Red values in that order.  This is also called an RGB image despite the order of the channels.  The last channel is unused.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppGrayscale">
            <summary>Eight bits per pixel. Each pixel is a shade of gray, from 0 (black) to 255 (white).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscaleAlpha">
            <summary>Sixteen bits per pixel. A standard grayscale palette is used where pal(0)=RGB(0,0,0) up to pal(255)=RGB(255,255,255). The second channel contains an alpha (transparency) value for each pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppCmyk">
            <summary><![CDATA[Thirty-Two bits per pixel with pixels containing the colors Cyan, Magenta, Yellow, and Black.  This is a subtractive colorspace with 0, 0, 0, 0 corresponding to pure white and 255, 255, 255, 255 corresponding to pure black. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ResolutionUnit">
            <summary>Defines the units associated with Resolution, or Dpi.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.Undefined">
            <summary>Units are not defined.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerInch">
            <summary>Units are expressed in inches.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerCentimeters">
            <summary>Units are expressed in centimeters.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Dpi">
            <summary>Holds the Resolution information.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ResolutionUnit)">
            <summary>Create a new Dpi structure at a specified resolution.</summary>
            <param name="x">Horizontal Resolution.</param>
            <param name="y">Vertical Resolution.</param>
            <param name="units">Resolution Units.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Units()">
            <summary>Gets or sets the resolution Units. </summary>
            <returns>The resolution Units. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaFileStream">
            <summary><![CDATA[A custom Stream object that is used to read and write images to a file.  This is the default stream object used when specifying filenames for images.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream._ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary><![CDATA[Initializes a new instance of AtalaFileStream. ]]></summary>
            <param name="fileName">The file name that this stream will write to or read from.</param>
            <param name="fileMode">Specifies how the operating system should open the file to read or write.</param>
            <param name="fileAccess">Specified if the file is read, write, or read/write.</param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Handle()">
            <summary>Gets or sets the unmanaged handle to the file stream.</summary>
            <returns>The unmanaged handle to the file stream.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaImage">
            <summary><![CDATA[The AtalaImage object holds the raw image data, a Palette, and methods used to access this data. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor">
            <summary><![CDATA[Initializes a new instance of the AtalaImage class.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor()">
            <summary><![CDATA[Initializes a new instance of the AtalaImage class.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of the AtalaImage class specifying the Width, Height, and PixelFormat. </summary>
            <param name="width">Width of the image.</param>
            <param name="height"><![CDATA[Height of the image.]]></param>
            <param name="pixelFormat">PixelFormat of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Byte)">
            <summary><![CDATA[Initialize a new instance of the AtalaImage class specifying the Width, Height, PixelFormat, and palette index to initialize the image background to. ]]></summary>
            <param name="width">Width of the image.</param>
            <param name="height"><![CDATA[Height of the image. ]]></param>
            <param name="pixelFormat">PixelFormat of the image. </param>
            <param name="fillPaletteIndex">The palette index to fill the image with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Drawing.Color)">
            <summary>Initialize a new instance of the AtalaImage class specifying the Width, Height, PixelFormat, and Color to initialize the image background to. </summary>
            <param name="width">Width of the image.</param>
            <param name="height"><![CDATA[Height of the image. ]]></param>
            <param name="pixelFormat">PixelFormat of the image. </param>
            <param name="fillColor"><![CDATA[The color to fill the image with. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IntPtr,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of the AtalaImage class specifying the image pointer, Width, Height, and PixelFormat. </summary>
            <param name="imageData">The memory pointer of the image bits of an unpacked DIB (Device Independent Bitmap). </param>
            <param name="width">Width of the image.</param>
            <param name="height"><![CDATA[Height of the image. ]]></param>
            <param name="pixelFormat">PixelFormat of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream)">
            <summary><![CDATA[Initialize a new instance of a AtalaImage class specifying a Stream. ]]></summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.Codec.ImageDecoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Initialize a new instance of an AtalaImage class specifying a Stream, ImageDecoder to use for decoding the image, and a progress delegate. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load.</param>
            <param name="decoder"><![CDATA[The ImageDecoder to use for loading the specified encoded image.]]></param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Initialize a new instance of an AtalaImage class specifying a Stream and an ImageDecoder to use for decoding the image. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of a AtalaImage class specifying a Stream and a progress delegate. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.String)">
            <summary>Initialize a new instance of a AtalaImage class specifying the file of the image to open. </summary>
            <param name="filename">The path of the file to open.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage._ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of a AtalaImage class specifying the file of the image to open and a progress delegate.</summary>
            <param name="filename">The path of the file to open.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Clone">
            <summary>Returns a copy of this AtalaImage.</summary>
            <returns>A deep copy of this AtalaImage.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CombineChannels(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.AtalaImage[])">
            <summary>Returns an AtalaImage by combining multiple 8-bit grayscale images into one image. </summary>
            <returns><![CDATA[An AtalaImage consisting of the combined channels.]]></returns>
            <param name="desiredPixelFormat">The PixelFormat of the output image.</param>
            <param name="channels">A parameter array of each channel to be combined.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CopyToClipboard(System.IntPtr)">
            <summary><![CDATA[Copies the image data onto the clipboard.]]></summary>
            <param name="ownerHandle"><![CDATA[Handle to a window which will act as the clipboard parent.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CountColors">
            <summary>Count the number of unique colors in this AtalaImage. </summary>
            <returns>The number of unique colors in this AtalaImage. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Dispose">
            <summary>Call this method to destroy this AtalaImage data and free memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw">
            <summary><![CDATA[Draws the specified portion of this AtalaImage onto a specified System.Drawing.Graphics object at the specified location and with the specified size. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary><![CDATA[Draws this AtalaImage onto a specified System.Drawing.Graphics object at the specified location and with the specified size. ]]></summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary><![CDATA[Draws the specified portion of this AtalaImage onto a specified System.Drawing.Graphics object at the specified location and with the specified size. ]]></summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw on.</param>
            <param name="srcRect">The rectangular area of the source image to draw.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle">
            <summary>Fills a specified rectangle in this image with a specified solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>Fills a specified rectangle in this image with a specified solid color. </summary>
            <param name="rect">The rectangular area to fill.</param>
            <param name="fillColor">The color of the fill area.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary>Fills a specified rectangle in this image with a specified index. </summary>
            <param name="rect">The rectangular area to fill.</param>
            <param name="fillIndex">The palette index or grayscale value to fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Finalize">
            <summary>The Destructor that will automatically be called by the garbage collector</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Flip(Atalasoft.Imaging.FlipDirection)">
            <summary>Flips the image vertically or horizontally.</summary>
            <param name="direction">The direction of the flip.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap)">
            <summary><![CDATA[Returns a copy of a GDI+ System.Drawing.Bitmap object in the form of an AtalaImage object. ]]></summary>
            <returns><![CDATA[A copy of a GDI+ System.Drawing.Bitmap object in the form of an AtalaImage object. ]]></returns>
            <param name="bitmap">The bitmap to create a copy from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmapData(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.ColorPalette)">
            <summary><![CDATA[Returns an AtalaImage that contains the same image pointer that's in the specified BitmapData object.  ]]></summary>
            <returns><![CDATA[An AtalaImage that contains the same image pointer that's in the specified BitmapData object.  ]]></returns>
            <param name="bd">The BitmapData created from a Bitmap by locking the bits.</param>
            <param name="palette"><![CDATA[The palette of the Bitmap.  Set to null (Nothing in Visual Basic) if the Bitmap doesn't contain a palette.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray">
            <summary><![CDATA[Creates a new <SPAN class=dxMisspelled id=dxMisspelled word="AtalaImage">AtalaImage</SPAN> from a byte array containing an encoded image. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[])">
            <summary><![CDATA[Creates a new <SPAN class=dxMisspelled id=dxMisspelled word="AtalaImage">AtalaImage</SPAN> from a byte array containing an encoded image. ]]></summary>
            <param name="buffer">A byte array containing the encoded image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[],Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Creates a new <SPAN class=dxMisspelled id=dxMisspelled word="AtalaImage">AtalaImage</SPAN> from a byte array containing an encoded image. ]]></summary>
            <param name="buffer">A byte array containing the encoded image.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromDib(System.IntPtr,System.Boolean)">
            <summary><![CDATA[Returns an <SPAN class=dxMisspelled id=dxMisspelled word="AtalaImage">AtalaImage</SPAN> from a DIB (Device Independent Bitmap) pointer.]]></summary>
            <returns><![CDATA[An <SPAN class=dxMisspelled id=dxMisspelled word="AtalaImage">AtalaImage</SPAN> from a DIB (Device Independent Bitmap) pointer.]]></returns>
            <param name="dibPointer">The DIB (device independent bitmap) pointer.</param>
            <param name="copy"><![CDATA[Indicates if the DIB data is copied into the <SPAN class=dxMisspelled id=dxMisspelled word="AtalaImage">AtalaImage</SPAN>. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromHBitmap(System.IntPtr)">
            <summary><![CDATA[Returns an AtalaImage from an hBitmap handle. ]]></summary>
            <returns><![CDATA[An AtalaImage from an hBitmap handle. ]]></returns>
            <param name="hBitmap">The hBitmap handle</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetAllocatedCopy">
            <summary>Returns an copy of the image except the image data is allocated, not copied</summary>
            <returns/>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetAllocatedCopy(System.Drawing.Size)">
            <summary>Returns an copy of the image except the image data is allocated, not copied</summary>
            <returns/>
            <param name="size">Size of the new image to allocate</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetBitmap">
            <summary><![CDATA[Returns a System.Drawing.Bitmap object copied from this AtalaImage.  ]]></summary>
            <returns><![CDATA[A System.Drawing.Bitmap object copied from this AtalaImage.  ]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat">
            <summary><![CDATA[Returns a new AtalaImage object with a different PixelFormat from this AtalaImage. ]]></summary>
            <returns><![CDATA[A new AtalaImage object with a different PixelFormat from this AtalaImage.]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)">
            <summary><![CDATA[Returns a new AtalaImage object with a different PixelFormat from this AtalaImage. ]]></summary>
            <returns><![CDATA[An AtalaImage object from a Bitmap object.]]></returns>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary><![CDATA[Returns a new AtalaImage object with a different PixelFormat from this AtalaImage specifying an Atalasoft.Imaging.ColorManagement.ColorProfile. ]]></summary>
            <returns><![CDATA[An AtalaImage object with a different PixelFormat from this AtalaImage.]]></returns>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain. </param>
            <param name="destProfile">The color profile to use when converting to and from the CMYK colorspace.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile,System.Boolean)">
            <summary><![CDATA[Returns a new AtalaImage object with a different PixelFormat from this AtalaImage specifying an Atalasoft.Imaging.ColorManagement.ColorProfile and if the ChangedPixelFormat event should fire.]]></summary>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain. </param>
            <param name="destProfile">The color profile to use when converting to and from the CMYK colorspace. </param>
            <param name="fireChangedPixelFormatEvent">Speicifies if the ChangedPixelFormat should fire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetGraphics">
            <summary><![CDATA[Returns a System.Drawing.Graphics object allowing GDI+ operations to draw onto this AtalaImage. ]]></summary>
            <returns><![CDATA[A System.Drawing.Graphics object allowing GDI+ operations to draw onto this AtalaImage. ]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used to serialize this AtalaImage.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPackedBuffer(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns an AtalaImage without rowstride and with pixels in RGB order.</summary>
            <returns>A new AtalaImage containing the image buffer.</returns>
            <param name="image">The source image to create the image buffer from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelColor(System.Int32,System.Int32)">
            <summary><![CDATA[Returns the System.Drawing.Color of the specified pixel in this AtalaImage. ]]></summary>
            <returns><![CDATA[The System.Drawing.Color of the specified pixel.]]></returns>
            <param name="x"><![CDATA[x coordinate in the image.]]></param>
            <param name="y"><![CDATA[y coordinate in the image.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelFormatDepth(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns the color depth in bits per pixels associated with a specified PixelFormat. </summary>
            <returns>The color depth in bits per pixels associated with a specified PixelFormat. </returns>
            <param name="pixelFormat">The PixelFormat to retrieve the color depth from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelIndex(System.Int32,System.Int32)">
            <summary><![CDATA[Gets the palette index of the specified pixel in this AtalaImage. ]]></summary>
            <returns>The palette index of the specified pixel.</returns>
            <param name="x"><![CDATA[x coordinate in the image.]]></param>
            <param name="y"><![CDATA[y coordinate in the image.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ImageFromClipboard(System.IntPtr)">
            <summary><![CDATA[Creates a new AtalaImage from data on the clipboard.]]></summary>
            <returns><![CDATA[An AtalaImage object or null on failure.]]></returns>
            <param name="ownerHandle"><![CDATA[Handle to a window which will act as the clipboard parent.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.KillPointer">
            <summary>Sets the imagePointer pointer to 0 and reinitializes the properties.  This is used if the image data is being handled somewhere else (a bitmap for instance)</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatHasAlpha(Atalasoft.Imaging.PixelFormat)">
            <summary><![CDATA[Returns true if the specified PixelFormat contains an alpha channel. ]]></summary>
            <returns><![CDATA[True if this AtalaImage contains an alpha channel. ]]></returns>
            <param name="pixelFormat">The PixelFormat to use when determining if there is an alpha channel. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsColormapped(Atalasoft.Imaging.PixelFormat)">
            <summary><![CDATA[Returns true if the specified PixelFormat contains a palette. ]]></summary>
            <returns><![CDATA[True if this AtalaImage contains a palette, false if it does not. ]]></returns>
            <param name="pixelFormat">The PixelFormat to use when determining if there is an palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsContinuous(Atalasoft.Imaging.PixelFormat)">
            <summary><![CDATA[Returns true if the PixelFormat passed in is a continuous-tone format. ]]></summary>
            <returns><![CDATA[true if continuous, false if not.]]></returns>
            <param name="pixelFormat">The PixelFormat to test for continuous-tone.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save">
            <summary>Saves this AtalaImage to a file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a Stream specifying an ImageEncoder and progress callback. </summary>
            <returns>The number of bytes saved to the file.</returns>
            <param name="stream">A stream containing the file which the image will be encoded to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Saves this AtalaImage to a  file specifying an ImageEncoder and progress callback. ]]></summary>
            <param name="fileName">The filename to save this AtalaImage to. </param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a Stream specifying an ImageType and progress callback.</summary>
            <returns>The number of bytes saved to the file.</returns>
            <param name="fileName">The filename to save this AtalaImage to. </param>
            <param name="type">The image type to save this image as.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>Set the color of a particular pixel.</summary>
            <param name="x"><![CDATA[x coordinate in the image. ]]></param>
            <param name="y"><![CDATA[y coordinate in the image. ]]></param>
            <param name="newColor">The new color to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelIndex(System.Int32,System.Int32,System.Byte)">
            <summary>Set the palette index of a particular pixel.</summary>
            <param name="x"><![CDATA[x coordinate in the image. ]]></param>
            <param name="y"><![CDATA[y coordinate in the image. ]]></param>
            <param name="value">The new palette index to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
            <summary>Returns an array of grayscale AtalaImage objects composing of individual channels of the source image.</summary>
            <returns>An array of grayscale AtalaImage objects composing of individual channels of the source image. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels()">
            <summary><![CDATA[Returns an array of grayscale AtalaImage objects representing each 8-bit channel in the source image. ]]></summary>
            <returns><![CDATA[An array of grayscale AtalaImage objects representing each 8-bit channel in the source image. ]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary><![CDATA[Returns an array of grayscale AtalaImage objects representing specified 8-bit channels in the source image. ]]></summary>
            <returns><![CDATA[An array of grayscale AtalaImage objects representing specified 8-bit channels in the source image. ]]></returns>
            <param name="channels"><![CDATA[The channels mask to apply.  The returned array will contain a null AtalaImage if that particular channel's bit flag is not set.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray">
            <summary>Returns a byte array containing an encoded image.</summary>
            <returns><![CDATA[A byte array containing an encoded image.]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Returns a byte array containing an encoded image. </summary>
            <returns><![CDATA[A byte array containing an encoded image.]]></returns>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns a byte array containing an encoded image. </summary>
            <returns><![CDATA[A byte array containing an encoded image.]]></returns>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib">
            <summary>Returns a DIB (device independent bitmap) pointer.</summary>
            <returns><![CDATA[A DIB (device independent bitmap) pointer.]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToString">
            <summary><![CDATA[Returns a textual description of this AtalaImage object.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.BitmapMirror()">
            <summary>Returns the Bitmap mirror of this AtalaImage.</summary>
            <returns><![CDATA[A System.Drawing.Bitmap object mirroring this AtalaImage. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorDepth()">
            <summary>Returns the number of bits per pixel of this AtalaImage. </summary>
            <returns>The number of bits per pixel of this AtalaImage. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorProfile()">
            <summary>Gets or sets the Atalasoft.Imaging.ColorManagement.ColorProfile associated with this AtalaImage.</summary>
            <returns>The Atalasoft.Imaging.ColorManagement.ColorProfile associated with this AtalaImage. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.EmbeddedComponentAssembly()">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.EmbeddedComponentLicenseKey()">
            <summary>Gets or sets the a value used to unlock an embedded component license.</summary>
            <returns><![CDATA[A value used to unlock an embedded component license.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Height()">
            <summary><![CDATA[Returns the height of this AtalaImage in pixels. ]]></summary>
            <returns>The height of this AtalaImage in pixels. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ImageData()">
            <summary>Returns the memory address of this AtalaImage. </summary>
            <returns>the memory address of this AtalaImage. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Palette()">
            <summary>Returns the palette of this AtalaImage.</summary>
            <returns>The palette of this AtalaImage. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormat()">
            <summary><![CDATA[Returns the PixelFormat of this AtalaImage.]]></summary>
            <returns>The PixelFormat of this AtalaImage. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Resolution()">
            <summary>Get or set the Resolution of this AtalaImage object </summary>
            <returns>The resolution, usually in Dots Per Inch of this AtalaImage object. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.RowStride()">
            <summary>Get the number of bytes in each row of this AtalaImage. </summary>
            <returns>The number of bytes in each row of this AtalaImage. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Size()">
            <summary><![CDATA[Returns the size of this AtalaImage in pixels.]]></summary>
            <returns><![CDATA[The size of this AtalaImage in pixels.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Width()">
            <summary>Returns the width of this AtalaImage in pixels. </summary>
            <returns>The width of this AtalaImage in pixels. </returns>
        </member>
        <member name="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat">
            <summary>Occurs when the image data changes PixelFormats.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ExceptionEventArgs">
            <summary>Provides data for the Workspace.ProcessError event. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ExceptionEventArgs.Exception()">
        </member>
        <member name="T:Atalasoft.Imaging.FileMapIOException">
            <summary>This exception is thrown when an error occurs when allocating an image with file memory mapping.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FormDataCollection">
            <summary><![CDATA[The FormDataCollection is used with the HttpPost class to send form information to a web server.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection._ctor">
            <summary>Creates a new instance of FormDataCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add">
            <summary>Adds data to the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.String)">
            <summary>Adds form data to the collection.</summary>
            <param name="fieldName">The field name of the form object. </param>
            <param name="fieldValue">The value of the field object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.AddFromBrowser(System.String,System.Object,System.String)">
            <summary><![CDATA[Adds an image or form field to the collection.You must use this method when posting from a web browser.]]></summary>
            <param name="fieldName">The field name of the form object. </param>
            <param name="image">The image you want to upload. </param>
            <param name="fieldValue">The value of the field object or the filename of the image. </param>
        </member>
        <member name="T:Atalasoft.Imaging.GdiException">
            <summary>This exception is thrown when a GDI function fails.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.HttpPost">
            <summary><![CDATA[This class allows you to post data to a server without user interaction.The data is posted as if it were being sent from an HTML Form, allowing any form handling component to be used on the server.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost._ctor">
            <summary>Creates a new instance of HttpPost.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost._ctor()">
            <summary>Creates a new instance of HttpPost.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.GetData(System.String)">
            <summary>This method can be used to retrieve information from a server.</summary>
            <returns>A string containing the data returned by the server. </returns>
            <param name="url">A web address to request data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.PostData(System.String)">
            <summary><![CDATA[This method will send the internal FormDataCollection entries to a server for processing. ]]></summary>
            <returns>A string containing returned data from the server. </returns>
            <param name="url">The web address to send the data to.</param>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.FormData()">
            <summary><![CDATA[Gets the FormDataCollection object that will be posted to the server. ]]></summary>
            <returns><![CDATA[The FormDataCollection object that will be posted to the server.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCancelEventArgs">
            <summary>Provides data for the event which allow an operation using an image to be cancelled. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCancelEventArgs.Cancel()">
            <summary><![CDATA[Gets or sets a value that when true will cancel the current operation.]]></summary>
            <returns><![CDATA[A value that when true will cancel the current operation.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollection">
            <summary><![CDATA[This collection holds multiple AtalaImage objects useful for various features like working with multi-paged images, animations, and layering.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor">
            <summary>Initializes a new instance of the ImageCollection object</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor()">
            <summary>Initializes a new instance of the ImageCollection object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary>Initializes a new instance of the ImageCollection object specifying one or multiple AtalaImage objects to add to the collection.</summary>
            <param name="images">A parameter array of one or many AtalaImage objects.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the ImageCollection object specifying a Stream containing image data to load.</summary>
            <param name="stream">A Stream of image data.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection._ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Initializes a new instance of the ImageCollection object specifying a filename containing image data to load. ]]></summary>
            <param name="fileName">The filename of the image (or images) to load into the ImageCollection.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Add(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Adds an AtalaImage to the collection. ]]></summary>
            <param name="image">The image to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Clear">
            <summary>Remove all images from the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Contains(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns a value Indicating if a specified image exists within this collection.</summary>
            <returns><![CDATA[A value Indicating if a specified image exists within this collection.]]></returns>
            <param name="image">The AtalaImage to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)">
            <summary>Copy this ImageCollection into an existing AtalaImage array.</summary>
            <param name="images">The existing AtalaImage array.</param>
            <param name="index">The index in the array begin copying.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Dispose">
            <summary>Remove unmanaged resources in each AtalaImage in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.IndexOf(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns the index of a specified image in the collection. </summary>
            <returns>The index of a specified image in the collection. </returns>
            <param name="image">The AtalaImage to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>Insert an AtalaImage at the specified index. </summary>
            <param name="index">The index to insert the image after.</param>
            <param name="image">The AtalaImage to insert into the collection. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MoveNext">
            <summary>Set the Current image to the next image in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MovePrevious">
            <summary>Set the Current image to the previous image in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ReadImages(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Read all images from a multipage image file into this image collection.</summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Remove(Atalasoft.Imaging.AtalaImage)">
            <summary>Removes a specified AtalaImage from this ImageCollection.</summary>
            <param name="image">The image in the collection to remove.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)">
            <summary>Replace a specified index with an image.</summary>
            <param name="image"><![CDATA[The new image.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save">
            <summary><![CDATA[Save the images in this ImageCollection to a file. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save the images in this ImageCollection to a stream specifying the ImageEncoder to use for encoding the image data. </summary>
            <param name="stream">A stream containing the file which the image will be encoded to. </param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each ImageCollection in a multipaged or multiframed format. </summary>
            <returns/>
            <param name="filename">The name of the file to save.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each ImageCollection in a multipaged or multiframed format. </summary>
            <returns>Filesize of saved image.</returns>
            <param name="fileName">The name of the file to save.</param>
            <param name="imageType">The image format to save.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in VB). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Current()">
            <summary>Sets or retrieves the current image.</summary>
            <returns>This is the image that is processed by any commands and displayed in the WorkspaceViewer.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Item(System.Int32)">
            <summary>Allows the image collection to be accessed through an indexer and enumerated with foreach.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollectionEventArgs">
            <summary>Provides data for the Workspace.NewImage and Workspace.ChangedImage events. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollectionEventArgs.Images()">
            <summary>Gets or sets the ImageCollection. </summary>
            <returns>The ImageCollection. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageEventArgs">
            <summary>Provides data for the Workspace.NewImage and Workspace.ChangedImage events.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageEventArgs.Image()">
            <summary>Gets or sets the AtalaImage. </summary>
            <returns>The AtalaImage.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageMemory">
            <summary><![CDATA[This class handles memory associated with an image.  It controls how the memory is allocated and freed.  Use this class to enable memory file mapping.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor">
            <summary><![CDATA[Initializes a new instance of ImageMemory. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor()">
            <summary><![CDATA[Initializes a new instance of ImageMemory. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.Int32)">
            <summary><![CDATA[Initializes a new instance of <SPAN class=dxMisspelled id=dxMisspelled word="ImageMemory">ImageMemory</SPAN> indicating the number of bytes to allocate. ]]></summary>
            <param name="bytes">number of bytes to allocate</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.Int32,System.Boolean)">
            <summary><![CDATA[Initializes a new instance of ImageMemory indicating the number of bytes to allocate and if this object should handle the freeing of that memory. ]]></summary>
            <param name="bytes">number of bytes to allocate</param>
            <param name="zeroMemory"><![CDATA[indicates if the memory should be freed when disposing]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.IntPtr)">
            <summary><![CDATA[Initializes a new instance of ImageMemory setting the pre allocated memory pointer. ]]></summary>
            <param name="imagePointer">The memory pointer</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory._ctor(System.IntPtr,System.Boolean)">
            <param name="imagePointer">The memory pointer</param>
            <param name="preventDispose"><![CDATA[indicates if the memory should be freed when disposing]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.Dispose">
            <summary>Free the memory associated with this object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.EnableMemoryFileMapping()">
            <summary><![CDATA[Gets or sets a value indicating if memory should be mapped to a file if the MemoryMapThreshold is exceeded for a block of data.]]></summary>
            <returns><![CDATA[A value indicating if memory should be mapped to a file if the MemoryMapThreshold is exceeded for a block of data.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.FileMapped()">
            <summary>Gets or sets a value indicating if the memory is mapped to a file.</summary>
            <returns><![CDATA[A value indicating if the memory is mapped to a file. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.Handle()">
            <summary>Gets the pointer to the memory handled by this object.</summary>
            <returns>The pointer to the memory handled by this object. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapTempPath()">
            <summary><![CDATA[Gets or sets the path where file mapped memory is temporarily stored.  Defaults to the user's temporary file.]]></summary>
            <returns>The path where file mapped memory is temporarily stored.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapThreshold()">
            <summary><![CDATA[Gets or sets the threshold in KB where files greater than this value will be memory mapped when EnableMemoryFileMapping is true.]]></summary>
            <returns><![CDATA[Gets or sets the threshold in KB where files greater than this value will be memory mapped when EnableMemoryFileMapping is true.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.PreventDispose()">
            <summary>Gets or sets a value indicating if the memory should be freed when disposing.</summary>
            <returns><![CDATA[A value indicating if the memory should be freed when disposing. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessException">
            <summary>This exception is thrown when an error occurs during processing of an image</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessException.Image()">
            <summary>Gets or sets the AtalaImage object which is causing the error. </summary>
            <returns>The AtalaImage object which is causing the error. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageStreamEventArgs">
            <summary>Provides data for the ImageStreamCompleted event. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Bytes()">
            <summary>Gets the number of bytes written to or read from the image stream. </summary>
            <returns>The number of bytes written to or read from the image stream. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Stream()">
            <summary><![CDATA[Gets the Steam object of interest.]]></summary>
            <returns>The Steam object of interest.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
            <summary>This exception is thrown when the image to be processed does not contain a PixelFormat compatible with the function of interest. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.InternetConnectException">
            <summary>This exception is thrown when there is an error opening an internet connection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.InternetInvalidPasswordException">
            <summary>This exception is thrown when an invalid password was detected while attempting to connect to an HTTP or FTP site to download an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefCollectionBase">
            <summary><![CDATA[A base abstract (MustInherit in Visual Basic) collection class intended for strongly typed collections containing unmanaged data.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase">
            <summary><![CDATA[A base abstract (MustInherit in Visual Basic) collection class intended for strongly typed collections containing unmanaged data.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.Count()">
            <summary>The number of items in the collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Palette">
            <summary><![CDATA[The palette contains color information that is applied to colormapped images.  Use this object to modify and read the palette colors. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor">
            <summary>Initializes a new instance of the Palette class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor()">
            <summary>Initializes a new instance of the Palette class with a default of 256 colors.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor(System.Int32)">
            <summary>Initialize a new instance of a Palette specifying the number of colors to start with. </summary>
            <param name="colors">The number of colors in the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette._ctor(Atalasoft.Imaging.PaletteType)">
            <summary>Initialize a new instance of a Palette class specifying the PaletteType. </summary>
            <param name="palType">The type of palette to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Clone">
            <summary>Returns a deep copy of this Palette. </summary>
            <returns>A deep copy of this Palette. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.CopyFromPalette(Atalasoft.Imaging.Palette)">
            <summary>Copies the palette data from an existing palette to the current palette</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Dispose">
            <summary><![CDATA[Cleans up unmanaged resources.  Call Dispose when completed using the Palette object.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex">
            <summary>Returns the palette index that best matches a specified color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color)">
            <summary>Returns the palette index that best matches a specified color. </summary>
            <param name="color">The color to look up in the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color,System.Boolean)">
            <summary>Returns the palette index that best matches a specified color, returning a value if there was an exact match.</summary>
            <param name="color">The color to look up in the palette. </param>
            <param name="exact"><![CDATA[This value is set to true if there is an exact match, otherwise false. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)">
            <summary>Returns the color of a particular index entry in the palette. </summary>
            <returns>The color of the palette entry.</returns>
            <param name="index"><![CDATA[The palette index <i>(0 - 255)</i>.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
            <summary>Returns the system palette of an 8-bit device.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette()">
            <summary><![CDATA[Returns the system palette of the current display if it's an 8-bit device, null (Nothing in Visual Basic) if the device is greater then 8 bits.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette(System.IntPtr)">
            <summary><![CDATA[Returns the system palette of the specified device if it's 8-bit, null (Nothing in Visual Basic) if the device is greater then 8 bits.]]></summary>
            <param name="device">A handle to the device context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.HasAlpha">
            <summary>Returns a value indicating if the palette contains alpha information.</summary>
            <returns><![CDATA[A value indicating if the palette contains alpha information.]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)">
            <summary>Sets the color of a particular index entry in the palette. </summary>
            <param name="index"><![CDATA[The palette index <i>(0 - 255)</i>.]]></param>
            <param name="newColor">The color to set the Palette index to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetPalette(Atalasoft.Imaging.PaletteType)">
            <summary>Change the palette entries to a standard PaletteType.</summary>
            <param name="palType"><![CDATA[The specified PaletteType.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Palette.Colors()">
            <summary>Returns the number of colors in the palette.</summary>
            <returns>The number of colors in the palette.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChangeEventArgs">
            <summary>Provides data for the PixelFormatChange event. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs._ctor">
            <summary><![CDATA[Initializes a new instance of the PixelFormatChangeEventArgs class.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs._ctor()">
            <summary><![CDATA[Initializes a new instance of the PixelFormatChangeEventArgs class.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs._ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat)">
            <summary><![CDATA[Initializes a new instance of the PixelFormatChangeEventArgs class specifying the current and new PixelFormat.]]></summary>
            <param name="currentPixelFormat"><![CDATA[The current PixelFormat.]]></param>
            <param name="newPixelFormat"><![CDATA[The new PixelFormat.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.Cancel()">
            <summary><![CDATA[When setting this property to true, the current operation will be cancelled.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.CurrentPixelFormat()">
            <summary>The PixelFormat of the current image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.NewPixelFormat()">
            <summary>The PixelFormat to change the image to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueue">
            <summary>Holds a collection of ProcessQueuedItems that are awaiting asynchronous processing.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue._ctor">
            <summary><![CDATA[Create a instance of the ProcessQueue.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue">
            <summary>Add a new item into the process queue. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue(Atalasoft.Imaging.ProcessQueuedItem)">
            <summary>Add a new item into the process queue.</summary>
            <param name="item"><![CDATA[The ProcessQueuedItem containing the thread information to process.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueue.CurrentItem()">
            <summary><![CDATA[Gets or sets the ProcessQueuedItem that is currently being processed.  ]]></summary>
            <returns><![CDATA[The ProcessQueuedItem that is currently being processed.  ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueuedItem">
            <summary><![CDATA[This class contains information regarding the image processing function that is to be run when the ProcessQueue is ready.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessingClass()">
            <summary>The instance of a class that will be processed in a new thread.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessUndo()">
            <summary>Indicates if an undo should be created before the thread begins.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.Thread()">
            <summary>Gets or sets the thread that the process is running in.</summary>
            <returns>The thread that the process is running in.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessUndo">
            <summary>Contains information about an undo level that will be used in the ProcessQueue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo._ctor">
            <summary>Initialize a new instance of ProcessUndo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo._ctor()">
            <summary>Initialize a new instance of ProcessUndo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo._ctor(System.String,System.Boolean)">
            <summary>Initialize a new instance of ProcessUndo specifying the Undo Description and if the image should be copied.</summary>
            <param name="undoDescription">The undo description.</param>
            <param name="copyCurrent">Specifies if the image should be copied before undoing.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.CopyCurrent()">
            <summary><![CDATA[If true, the image will be copied before placing into the undo.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.UndoDescription()">
            <summary>The description of the undo level.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressEventArgs">
            <summary>Provides data for the Progress event. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Cancel()">
            <summary><![CDATA[When set to true, allows the current image processing function to be cancelled.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Current()">
            <summary>Gets the current value of the progress operation.</summary>
            <returns>The current value of the progress operation. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.MethodName()">
            <summary>The name of the method calling the progress event.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Total()">
            <summary>Gets the total number of units for this operation.</summary>
            <returns>The total number of units for this operation. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.UndoCollection">
            <summary>This collection object contains undo levels and methods to add new undos and specify the maximum number of undos.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Add(System.String,System.Boolean)">
            <summary>Add a new undo level to the undo collection specifying the description and if the Image is copied. </summary>
            <param name="undoDescription">The textual description of this undo level.</param>
            <param name="copyCurrent"><![CDATA[If true, the image will be copied into the undo collection.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo">
            <summary><![CDATA[Copies the UndoLevels into an array.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo(Atalasoft.Imaging.UndoLevel[],System.Int32)">
            <summary><![CDATA[Copies the UndoLevels into an array.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Dispose">
            <summary>Clean up unmanaged resources by disposing each AtalaImage in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Redo">
            <summary>Redo the latest change by setting the next image in the Undo collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Undo">
            <summary>Undo the latest change by setting the last image in the Undo collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Item(System.Int32)">
            <summary>Gets the undo item.</summary>
            <param name="index">Zero based iIndex of the undo item.</param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Levels()">
            <summary>Gets or set the number of Undo levels in this collection. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumRedos()">
            <summary>Gets the number of redos.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumUndos()">
            <summary>Gets the number of undos.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.GetCurrentImageCollection">
            <summary>This event is fired to retrieve the current image collection.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.NewImageCollection">
            <summary>This event is fired to  set the current image collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.UndoLevel">
            <summary><![CDATA[Contains an undo level item which is created when the UndoLevels is greater than 0. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel._ctor">
            <summary><![CDATA[Creates a new instance of UndoLevel.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel._ctor()">
            <summary><![CDATA[Creates a new instance of UndoLevel.  Creates a new instance of UndoItem. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel._ctor(Atalasoft.Imaging.ImageCollection,System.String)">
            <summary><![CDATA[Creates a new instance of UndoLevel specifying the ImageCollection and undo description.]]></summary>
            <param name="images">The image collection that this undo level will contain.</param>
            <param name="description">The description of this undo level.</param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Description()">
            <summary>Gets or sets the undo description associated with this undo level. </summary>
            <returns>The undo description associated with this undo level. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Images()">
            <summary><![CDATA[Gets the undo image collection associated with this undo level. ]]></summary>
            <returns>The undo image collection associated with this undo level. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Workspace">
            <summary><![CDATA[The workspace object is the container that is used to manage changes to images and provide an interface to open, save, and manipulate images either synchronously or asynchronously.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace._ctor">
            <summary><![CDATA[Initializes a new instance of WorkspaceViewer.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand">
            <summary>Applies an ImageCommand to the current image in order to process it.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary>Applies an ImageCommand to the current image in order to process it. </summary>
            <param name="command"><![CDATA[The Command to apply.  Any object that inherits ImageCommand can be passed into this method. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.String)">
            <summary>Creates an undo level, then applies an ImageCommand to the current image in order to process it.</summary>
            <param name="command"><![CDATA[The Command to apply.  Any object that inherits ImageCommand can be passed into this method. ]]></param>
            <param name="undoDescription">A description of the undo level that will be added before processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Dispose">
            <summary>Cleans up all resources held by this Workspace including all images in the ImageCollection and undos in the UndoCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open">
            <summary><![CDATA[Decodes an image from a file or stream and sets it to the current image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream)">
            <summary><![CDATA[Decodes an image from a stream and sets it to the current image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32)">
            <summary><![CDATA[Decodes an image from a stream specifying the frame index of a multipaged file, and sets it to the current image. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary><![CDATA[Decodes an image from a stream specifying the frame index of a multipaged file, and sets it to the current image while returning any metadata the image might contain.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load. </param>
            <param name="metadata"><![CDATA[Returns the image metadata stored in the image that is read based in the flag that is set in this object.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary><![CDATA[Decodes an image from a stream and sets it to the current image while returning any metadata the image might contain.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="metadata"><![CDATA[Returns the image metadata stored in the image that is read based in the flag that is set in this object.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String)">
            <summary><![CDATA[Decodes an image from a file and sets it to the current image. ]]></summary>
            <param name="fileName">The path of the file to open. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32)">
            <summary><![CDATA[Decodes an image from a file specifying the frame index of a multipaged file, and sets it to the current image.]]></summary>
            <param name="fileName">The path of the file to open. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary><![CDATA[Decodes an image from a file specifying the frame index of a multipaged file, and sets it to the current image while returning any metadata the image might contain.]]></summary>
            <param name="fileName">The path of the file to open. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load. </param>
            <param name="metadata"><![CDATA[Returns the image metadata stored in the image that is read based in the flag that is set in this object.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary><![CDATA[Decodes an image from a file and sets it to the current image while returning any metadata the image might contain.]]></summary>
            <param name="fileName">The path of the file to open. </param>
            <param name="metadata"><![CDATA[Returns the image metadata stored in the image that is read based in the flag that is set in this object.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save">
            <summary>Writes the current AtalaImage or ImageCollection to a file or stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Writes the current AtalaImage or ImageCollection to a stream specifying the ImageEncoder to use to encode the image.</summary>
            <param name="stream"><![CDATA[A stream containing the file which the current image will be encoded to. ]]></param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary>Writes the current AtalaImage or ImageCollection to a stream specifying the ImageEncoder to use to encode the image and the image index in the collection to save. </summary>
            <param name="stream"><![CDATA[A stream containing the file which the current image will be encoded to. ]]></param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="frameIndex"><![CDATA[The index in the ImageCollection to save.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Writes the current AtalaImage or ImageCollection to a file specifying the ImageEncoder to use to encode the image. </summary>
            <param name="fileName">The filename to save the current image to. </param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary>Writes the current AtalaImage or ImageCollection to a file specifying the ImageEncoder to use to encode the image and the image index in the collection to save. </summary>
            <param name="fileName">The filename to save the current image to. </param>
            <param name="encoder">The ImageEncoder which will be used to encode the image. </param>
            <param name="frameIndex"><![CDATA[The index in the ImageCollection to save.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageType)">
            <summary>Writes the current AtalaImage or ImageCollection to a file specifying the ImageType to use to encode the image. </summary>
            <param name="fileName">The filename to save the current image to. </param>
            <param name="imageType">The image type to save this image as. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Asynchronous()">
            <summary><![CDATA[Gets or sets a value indicating if method calls through this Workspace object are processed asynchronously in a background thread.]]></summary>
            <returns><![CDATA[A value indicating if method calls through this Workspace object are processed asynchronously in a background thread. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.AutoDispose()">
            <summary>Gets or sets a value indicating if the Workspace should dispose all images it contains when finalized.</summary>
            <returns><![CDATA[A value indicating if the Workspace should dispose all images it contains when finalized.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Image()">
            <summary>Gets the current AtalaImage in the ImageCollection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Images()">
            <summary><![CDATA[Gets the ImageCollection of this Workspace object.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Queue()">
            <summary><![CDATA[Gets the ProcessQueue containing queued items that this Workspace object is currently processing.]]></summary>
            <returns><![CDATA[The ProcessQueue containing queued items that this Workspace object is currently processing.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Undos()">
            <summary><![CDATA[Gets the UndoCollection object containing the undo history of this Workspace.]]></summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ChangedImage">
            <summary>Fires when pixel data in the current image changes without setting a new image. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.DisposeImage">
            <summary>Fired when an image in the ImageCollection or UndoCollection is disposed.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted">
            <summary>Fires after an image has been read or saved signifying that the System.IO.Stream which was passed in can be closed. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.NewImage">
            <summary><![CDATA[Fires when this Workspace is set to a new current image. ]]></summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessCompleted">
            <summary>Fires when an asynchronous process is completed.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessError">
            <summary>Fires when an error occurs in a separate thread when being processed asynchronously.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.Progress">
            <summary>Fires while an image is being processed.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.Codec">
            <summary>Contains classes that deal with decoding and encoding images of various formats.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IAppendable">
            <summary><![CDATA[An interface that an ImageEncoder can implement when it supports appending an image to the end of an existing file.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.IAppendable.Append()">
            <summary>Gets or sets a value indicating if the image will be appended to the end of a file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpCompression">
            <summary>Contains the various compression types available for Bmp images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.None">
            <summary>No compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.Rle">
            <summary>Run Length Compression, only valid for 8-bit image saves.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameDisposal">
            <summary>The frame disposal method to use for animated GIF images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.None">
            <summary>No action is taken.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.LeaveImage">
            <summary>Leaves the image in place when the next frame is drawn.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestorePrevious">
            <summary>Restores the previous frame.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestoreBackgroundColor">
            <summary>Restores the area occupied by the image with the animation background color.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageType">
            <summary>The supported image file formats that dotImage can either read or write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Unknown">
            <summary>Image file format is undefined</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Jpeg">
            <summary>Joint Photographic Experts Group.  Uses lossy compression commonly used for Photographic type images.  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Png">
            <summary>Portable Network Graphic supporting lossless compression.  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tiff">
            <summary>Tagged Image File.  This is a universal and well known format for many uses inluding FAX and multipaged images.  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcx">
            <summary>ZSoft PaintBrush.  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tga">
            <summary>Truevision Targa.  May include an alpha channel.  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Bmp">
            <summary>Windows Bitmap.  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Wmf">
            <summary>Windows Meta File.  Read and Write (raster only).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Emf">
            <summary>Enhanced Windows Meta File.  Read and Write (raster only).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Psd">
            <summary>Adobe (tm) Photoshop format.  Read and Write (flattened image only).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Wbmp">
            <summary>Wireless Bitmap.  Black and White format used with portable devices.  Read and Write</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Gif">
            <summary>Graphics Interchange Format (LZW license required).  Read and Write.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tla">
            <summary>A lossless compressed image format similar to PNG with optional encryption.             It can store 32, 24, 16, or 8-bit data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcd">
            <summary>Kodak (tm) PhotoCD.  Read only.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.J2k">
            <summary>Jpeg2000.  Separate Plug-In requred to read and write.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegScaleFactor">
            <summary>The scaling factor to use when reading a Jpeg image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Full">
            <summary>The full encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Half">
            <summary>1/2 the encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Quarter">
            <summary>1/4 the encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Eighth">
            <summary><![CDATA[1/8 the encoded size.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdResolution">
            <summary>PhotoCD Resolution (image size) to load.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseQuarter">
            <summary><![CDATA[1/4 the size and 1/16 the memory of the base image. <i>192 x 128 pixels</i>]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseHalf">
            <summary><![CDATA[1/2 the size and 1/4 the memory of the base image. <i>384 x 256 pixels</i>]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.Base">
            <summary><![CDATA[The base size of the PCD image.  <i>768 x 512 pixels</i>]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX2">
            <summary><![CDATA[Double the size and 4 times the memory of the base image. <i>1536 x 1024 pixels</i>]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX4">
            <summary><![CDATA[4 times the size and 16 times the memory of the base image. <i>3072 x 2048 pixels</i>]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX8">
            <summary><![CDATA[8 times the size and 64 times the memory of the base image. <i>6144 x 4096 pixels</i>]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PdfCompressionType">
            <summary>Specifies the type of compression to use on the image data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfCompressionType.None">
            <summary>No compression is used.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfCompressionType.CcittGroup4">
            <summary><![CDATA[Uses CCITT Group4 Fax compression on the image data.  This can only be used on 1-bit images.  If you attempt to use this compression on an image of another type, it will default to Auto compression mode.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfCompressionType.Jpeg">
            <summary><![CDATA[The image is saved as a JPEG.  You may also want to set the JpegQuality of the PdfEncoder. This can only be used for 8-bit grayscale, 24-bit and CMYK images.  If you attempt to use this compression with any other image format, it will use Auto instead.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfCompressionType.Deflate">
            <summary>Uses Deflate compression on the image data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfCompressionType.Auto">
            <summary>This will tell the PdfEncoder to automatically determine which compression to use.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PdfPageSizeMode">
            <summary><![CDATA[Used to set the page SizeMode of a PDF document created with PdfEncoder. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfPageSizeMode.FitToImage">
            <summary><![CDATA[This will cause each page to be resized to the size of the image, plus any PageBorder.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PdfPageSizeMode.FitToPage">
            <summary><![CDATA[This will make each page in the PDF the same PageSize.  If an image is too large to fit in the page, it will be rendered smaller in order to fit.  If the image is smaller than the page, it will be centered.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffCompression">
            <summary>Contains the various compression types available for TIFF images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.NoCompression">
            <summary>Specify no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group3FaxEncoding">
            <summary>CCITT Group 3 fax encoding. Used on 1-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group4FaxEncoding">
            <summary>CCITT Group 4 fax encoding. Used on 1-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.JpegCompression">
            <summary>Lossy JPEG compression. Used on 24-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.MacintoshPackbits">
            <summary>Used on 8, 24, or 32 Bit images only.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Deflate">
            <summary>Used on 8, 24, or 32 Bit images only.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Lzw">
            <summary>LZW compression (LZW license required)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.ModifiedHuffman">
            <summary>CCITT modified Huffman RLE. Used on 1-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpDecoder">
            <summary><![CDATA[An ImageDecoder used to read Windows Bitmap (BMP) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder._ctor">
            <summary>Initializes a new instance of a BmpDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.GetImageInfo">
            <summary><![CDATA[Retreive information from a Bmp image stored in a Stream without decoding the image data. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary><![CDATA[Retreive information from a Bmp image stored in a Stream without decoding the image data. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains a Bmp image. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Bmp encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Bmp encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpDecoder.SupportedImageType()">
            <summary>Returns a Bmp ImageType enumeration value.</summary>
            <returns><![CDATA[A Bmp ImageType enumeration value.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpEncoder">
            <summary><![CDATA[An ImageEncoder that will write Windows Bitmap (BMP) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder._ctor">
            <summary>Initializes a new instance of a BmpEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder._ctor()">
            <summary>Initializes a new instance of BmpEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder._ctor(Atalasoft.Imaging.Codec.BmpCompression)">
            <summary>Initializes a new instance of BmpEncoder specifying the compression to use.</summary>
            <param name="compression">The compression to use when writing Bmp images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Bmp image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Bmp image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.Compression()">
            <summary>The compression to use when writing Bmp images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderCollection">
            <summary><![CDATA[A collection of ImageDecoders.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderDictionary">
            <summary>A dictionary of ImageDecoders.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Add(Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Add a decoder to the project.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderDictionary.Item(Atalasoft.Imaging.Codec.ImageType)">
            <summary><![CDATA[Allows the decoders to be enumerated. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfDecoder">
            <summary><![CDATA[An ImageDecoder used to read Enhanced Metafiles (EMF) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder._ctor">
            <summary>Initializes a new instance of a EmfDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from an Emf image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Emf image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing an Emf encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EmfDecoder.SupportedImageType()">
            <summary>Returns an Emf ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfEncoder">
            <summary><![CDATA[An ImageEncoder that will write Enhanced Metafiles (EMF) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder._ctor">
            <summary>Initializes a new instance of a EmfEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Emf image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as an Emf image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifDecoder">
            <summary><![CDATA[An ImageDecoder used to read Compuserve Graphics Interchange (GIF) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder._ctor">
            <summary>Initializes a new instance of a GifDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetFrameCount(System.IO.Stream)">
            <summary><![CDATA[Gets the number of frames in a GIF.]]></summary>
            <returns>The number of frames in a GIF.</returns>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo">
            <summary>Retreive information from a Gif image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Gif image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a specified frame in a Gif image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">The zero based frame index to load from an animated GIF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains a Gif image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Gif encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns a specified frame to an AtalaImage from a Stream containing an animated Gif encoded image. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">The zero based frame index to load from an animated GIF. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Gif encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.SupportedImageType()">
            <summary>Returns a Gif ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifEncoder">
            <summary><![CDATA[An ImageEncoder that will write Compuserve Graphics Interchange (GIF) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor">
            <summary>Initializes a new instance of a GifEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor()">
            <summary>Initializes a new instance of a GifEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder._ctor(System.Boolean)">
            <summary>Initializes a new instance of a BmpEncoder specifying the interlace setting.</summary>
            <param name="interlace"><![CDATA[A value indicating if the image is saved with a pixel row interlacing pattern. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Gif image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Gif image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.Interlace()">
            <summary><![CDATA[Gets or sets a value indicating if the image is saved with a pixel row interlacing pattern.  Default false ]]></summary>
            <returns><![CDATA[A value indicating if the image is saved with a pixel row interlacing pattern.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.OptimizeColorDepth()">
            <summary><![CDATA[Gets or sets a value indicating if the bitdepth is optimized based on the number of colors in the palette.  Default true.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifImageInfo">
            <summary>Summary description for PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo._ctor">
            <summary>Initializes a new instance of GifImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo._ctor()">
            <summary>Initializes a new instance of GifImageInfo. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary><![CDATA[Initialize a new instance of GifImageInfo specifying it's properties. ]]></summary>
            <param name="size">The width and height of the image. </param>
            <param name="colorDepth">The bits per pixel of the image. </param>
            <param name="imageType">The image type. </param>
            <param name="resolution">The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"><![CDATA[The PixelFormat which will be returned when the image is read. ]]></param>
            <param name="transIndex">The transparent pixel index.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.DelayTime()">
            <summary>Gets or sets the amount of time to display this frame in milliseconds. </summary>
            <returns>The amount of time to display this frame in milliseconds. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.FrameDisposal()">
            <summary>Gets or sets the frame disposal method to use for this frame. </summary>
            <returns>The frame disposal method to use for this frame. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.LeftOffset()">
            <summary>Gets or sets the pixel offset from the left side of the animated screen area. </summary>
            <returns>The pixel offset from the left side of the animated screen area. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TopOffset()">
            <summary>Gets or sets the pixel offset from the top of the animated screen area. </summary>
            <returns>The pixel offset from the top of the animated screen area. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TransparentIndex()">
            <summary>Gets the transparent index of the Gif.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageDecoder">
            <summary><![CDATA[An abstract (MustInherit in Visual Basic) base class that defines a file format decoder to read an image from a Stream.  All image decoders used in dotImage must inherit this class. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from an image stored in a file without decoding the image data.</summary>
            <returns>An ImageInfo object containing information about the image such as size and bitdepth.</returns>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.IsValidFormat(System.IO.Stream)">
            <summary>Checks the stream to determine if the image can be read by the implementing decoder.</summary>
            <returns><![CDATA[True if the encoded image can be read by this decoder, otherwise false.]]></returns>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Read an encoded image using this decoder.]]></summary>
            <returns>An AtalaImage containing the decoded image.</returns>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageDecoder.SupportedImageType()">
            <summary>Returns the ImageType that the implemented decoder class supports.</summary>
            <returns>The ImageType that the implemented decoder class supports. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageEncoder">
            <summary><![CDATA[An abstract (MustInherit in Visual Basic) base class that defines a file format encoder to save an image to a file.  All image encoders used in dotImage must inherit this class. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save an image using this encoder. </summary>
            <returns>The number of bytes written to the file.</returns>
            <param name="stream">A stream containing the file which the image will be encoded to. </param>
            <param name="image">The image to save.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageInfo">
            <summary>Contains information from an encoded image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo._ctor">
            <summary>Initialize a new instance of ImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat)">
            <summary><![CDATA[Initialize a new instance of ImageInfo specifying it's properties.]]></summary>
            <param name="size">The width and height of the image. </param>
            <param name="colorDepth">The bits per pixel of the image. </param>
            <param name="imageType">The image type. </param>
            <param name="resolution">The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"><![CDATA[The PixelFormat which will be returned when the image is read. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ColorDepth()">
            <summary>Gets the bits per pixel of the image.</summary>
            <returns>The bits per pixel of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ImageType()">
            <summary>Gets the image type.</summary>
            <returns>The image type. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.PixelFormat()">
            <summary><![CDATA[Gets the PixelFormat which will be returned when the image is read.]]></summary>
            <returns><![CDATA[The PixelFormat which will be returned when the image is read. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Resolution()">
            <summary>Gets the image resolution, usually expressed in dots per inch.</summary>
            <returns>The image resolution, usually expressed in dots per inch. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Size()">
            <summary>Gets the width and height of the image. </summary>
            <returns>The width and height of the image. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageReadException">
            <summary>This exception is thrown when there is a problem reading an image</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageWriteException">
            <summary>This exception is thrown when there is a problem writing an image</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegDecoder">
            <summary><![CDATA[An ImageDecoder used to read JPEG images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder._ctor">
            <summary>Initializes a new instance of a JpegDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder._ctor()">
            <summary>Initializes a new instance of a JpegDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder._ctor(Atalasoft.Imaging.Codec.JpegScaleFactor)">
            <summary>Initializes a new instance of a JpegDecoder specifying the Jpeg scaling factor.</summary>
            <param name="scaleFactor">The Jpeg scaling factor to use when reading the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetImageInfo">
            <summary>Retreive information from a Jpeg image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Jpeg image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains a Jpeg image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Jpeg encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Jpeg encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.ScaleFactor()">
            <summary><![CDATA[Gets or sets a value indicating the scale factor to use when reading Jpeg's.]]></summary>
            <returns><![CDATA[The scale factor to use when reading Jpeg's.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.SupportedImageType()">
            <summary>Returns a Jpeg ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegEncoder">
            <summary><![CDATA[An ImageEncoder that will write JPEG images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor">
            <summary>Initializes a new instance of a JpegEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor()">
            <summary>Initializes a new instance of a JpegEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality. </summary>
            <param name="quality">The quality level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality and smoothing. </summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality, smoothing, and progressive value.</summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
            <param name="progressive"><![CDATA[A value indicating if the image is saved progressively. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder._ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.Metadata.MetadataContainer)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality, smoothing, progressive value, and metadata. </summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
            <param name="progressive"><![CDATA[A value indicating if the image is saved progressively. ]]></param>
            <param name="metadata">The metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Jpeg image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Jpeg image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.WriteJPG(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.Dpi,System.Int32)">
            <summary>Write a 8, 24, or 32 bit CMYK JPG to a file with Dpi            uFlags bit 0: If set write progressive            uFlags bit 1: If set writes 32-bit as YCCK, else CMYK</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ImageType()">
            <summary><![CDATA[Get the ImageType associated with this Encoder Setting.]]></summary>
            <returns><![CDATA[The ImageType associated with this Encoder Setting.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Metadata()">
            <summary><![CDATA[Gets or sets the metadata that will be saved with the image. ]]></summary>
            <returns><![CDATA[The metadata that will be saved with the image. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Progressive()">
            <summary>Gets or sets a value indicating if the image is saved progressively.</summary>
            <returns><![CDATA[A value indicating if the image is saved progressively. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Quality()">
            <summary><![CDATA[Gets or sets the quality level of the Jpeg as it's encoded to a file.  Valid values are 1 - 100 with a default of 75.]]></summary>
            <returns><![CDATA[The quality level of the Jpeg as it's encoded to a file.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Smoothing()">
            <summary>Gets or sets the smoothing level when saving a Jpeg image.</summary>
            <returns>The smoothing level when saving a Jpeg image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegImageInfo">
            <summary>Summary description for JpegImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo._ctor">
            <summary>Initialize a new instance of a JpegImageInfo. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo._ctor()">
            <summary>Initialize a new instance of a JpegImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean,System.Boolean)">
            <summary><![CDATA[Initialize a new instance of a JpegImageInfo specifying it's properties.]]></summary>
            <param name="size">The width and height of the image. </param>
            <param name="colorDepth">The bits per pixel of the image. </param>
            <param name="imageType">The image type. </param>
            <param name="resolution">The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"><![CDATA[The PixelFormat which will be returned when the image is read. ]]></param>
            <param name="progressive"><![CDATA[A value indicating if the Jpeg is encoded progressively. ]]></param>
            <param name="arithmetic"><![CDATA[A value indicating if the Jpeg is encoded with arithmetic compression. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Arithmetic()">
            <summary><![CDATA[Gets a value indicating if the Jpeg is encoded with arithmetic compression. ]]></summary>
            <returns><![CDATA[A value indicating if the Jpeg is encoded with arithmetic compression. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Progressive()">
            <summary><![CDATA[Gets a value indicating if the Jpeg is encoded progressively. ]]></summary>
            <returns><![CDATA[A value indicating if the Jpeg is encoded progressively. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.LzwNotLicensedException">
            <summary>This exception is fired when LZW is not licensed yet an attempt is made to use LZW functionality.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageDecoder">
            <summary><![CDATA[A decoder for multiframed images such as multiple page TIFF's and animiated GIF's.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetFrameCount(System.IO.Stream)">
            <summary>Returns the number of frames in the image </summary>
            <returns>The number of frames in the image </returns>
            <param name="stream">The input Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a specific frame in an image stored in a file without decoding the image data.</summary>
            <param name="stream">The input Stream. </param>
            <param name="frameIndex">The zero based frame index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read">
            <summary><![CDATA[Read a specific frame in an encoded image using this decoder. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Read a specific frame in an encoded image using this decoder. ]]></summary>
            <param name="stream">The input Stream. </param>
            <param name="frameIndex">The zero based frame index. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder">
            <summary><![CDATA[An abstract (MustInherit in Visual Basic) base class that defines a file format encoder to save an image to a file.  All image encoders used in dotImage must inherit this class. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdDecoder">
            <summary><![CDATA[An ImageDecoder used to read Kodak Photo CD (PCD) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder._ctor">
            <summary>Initializes a new instance of a PcdDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder._ctor()">
            <summary>Initializes a new instance of a PcdDecoder with a default resolution of 768 x 512 pixels. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder._ctor(Atalasoft.Imaging.Codec.PcdResolution)">
            <summary>Initializes a new instance of a PcdDecoder specifying a resolution.</summary>
            <param name="resolution"><![CDATA[Sets the resolution to read in a PhotoCD image.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a PhotoCD image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains a PhotoCD image.]]></summary>
            <param name="stream">The input Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a PhotoCD encoded image. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a PhotoCD encoded image. ]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.Resolution()">
            <summary><![CDATA[Gets or sets the resolution to read in a PhotoCD image.]]></summary>
            <returns><![CDATA[The resolution to read in a PhotoCD image.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.SupportedImageType()">
            <summary>Returns a PhotoCD ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxDecoder">
            <summary><![CDATA[An ImageDecoder used to read Zsoft Paintbrush (PCX) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder._ctor">
            <summary>Initializes a new instance of a PcxDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.GetImageInfo">
            <summary>Retreive information from a Pcx image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Pcx image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains a Pcx image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Pcx encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Pcx encoded image.]]></summary>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcxDecoder.SupportedImageType()">
            <summary>Returns a Pcx ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxEncoder">
            <summary><![CDATA[An ImageEncoder that will write ZSoft Paintbrush (PCX) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder._ctor">
            <summary>Initializes a new instance of a PcxEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Pcx image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Pcx image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PdfEncoder">
            <summary>An ImageEncoder that will write one or more images to a PDF file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder._ctor">
            <summary>Creates an instance of PdfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder._ctor()">
            <summary>Creates an instance of PdfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder._ctor(System.Int32,Atalasoft.Imaging.Codec.PdfPageSizeMode,System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.PdfMetadata)">
            <summary><![CDATA[Creates an instance of PdfEncoder specifying jpegQuality, sizeMode, pageSize, pageBorder and metadata.]]></summary>
            <param name="jpegQuality">The Jpeg quality used when the image compression is set to Jpeg.</param>
            <param name="sizeMode">The size method used when creating the page.</param>
            <param name="pageSize">The page size in pixels.</param>
            <param name="pageBorder">The page border used for this image.</param>
            <param name="metadata">The metadata for this PDF file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder._ctor(Atalasoft.Imaging.Codec.PdfMetadata)">
            <summary>Creates a new instance of PdfEncoder specifying metadata.</summary>
            <param name="metadata">The metadata for this PDF file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder._ctor(Atalasoft.Imaging.Codec.PdfPageSizeMode,System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.PdfMetadata)">
            <summary>Creates a new instance of PdfEncoder specifying sizeMode, pageSize, pageBorder and metadata.</summary>
            <param name="sizeMode">The size method used when creating the page. </param>
            <param name="pageSize">The page size in pixels. </param>
            <param name="pageBorder">The page border used for this image. </param>
            <param name="metadata">The metadata for this PDF file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder.Save">
            <summary>Creates the PDF file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Creates a single page PDF file.</summary>
            <returns>The number of bytes written.</returns>
            <param name="stream"><![CDATA[The stream to write the PDF file into.  This stream must be seekable.]]></param>
            <param name="image">The AtalaImage to encode. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Creates a PDF file containing all of the images in the ImageCollection.</summary>
            <returns>The number of bytes written.</returns>
            <param name="stream"><![CDATA[The stream to write the PDF file into.  This stream must be seekable.]]></param>
            <param name="images">The ImageCollection containing images to save.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.Codec.PdfImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Creates a PDF file containing all of the images in the PdfImageCollection.]]></summary>
            <returns>The number of bytes written.</returns>
            <param name="stream"><![CDATA[The stream to write the PDF file into.  This stream must be seekable.]]></param>
            <param name="images"><![CDATA[The PdfImageCollection containing images to save.]]></param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfEncoder.JpegQuality()">
            <summary>Gets or sets the Jpeg quality used when the image compression is set to Jpeg. </summary>
            <returns>The Jpeg quality used when the image compression is set to Jpeg. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfEncoder.Metadata()">
            <summary>Gets or sets the metadata information used for this PDF.</summary>
            <returns>The metadata information used for this PDF.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfEncoder.PageBorder()">
            <summary>Gets or sets the amount of border space around the image in pixels.</summary>
            <returns>The amount of border space around the image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfEncoder.PageSize()">
            <summary><![CDATA[Gets or sets the size of the PDF pages in pixels. PDF uses an internal resolution of 72dpi, so an 8.5 x 11 inch page would be 612 x 792 pixels.]]></summary>
            <returns>The size of the PDF pages in pixels. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfEncoder.SizeMode()">
            <summary>Gets or sets the page size mode for this PDF.</summary>
            <returns>The page size mode for this PDF.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PdfImage">
            <summary>Contains information about a single image or file to be added to the PDF.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfImage._ctor">
            <summary>Creates an instance of PdfImage.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfImage._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.PdfCompressionType)">
            <summary>Creates an instance of PdfImage specifying image and compression.</summary>
            <param name="image">The AtalaImage to save.</param>
            <param name="compression">The type of compression to use on the image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfImage._ctor(System.String,System.Int32,Atalasoft.Imaging.Codec.PdfCompressionType)">
            <summary><![CDATA[Creates an instance of PdfImage specifying fileName, frameIndex and compression.]]></summary>
            <param name="fileName">The filename of the image you want added to the PDF.</param>
            <param name="frameIndex"><![CDATA[The frame index to use for multipage TIFF images.  Setting this to -1 will save every page to the PDF.]]></param>
            <param name="compression">The type of compression to use on the image data. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfImage.Compression()">
            <summary>Gets the compression used on the image data.</summary>
            <returns>The compression used on the image data.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfImage.FileName()">
            <summary>Gets the filename of an image to be saved to PDF.</summary>
            <returns>The filename of an image to be saved to PDF.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfImage.Image()">
            <summary>Gets the AtalaImage that will be saved to the PDF.</summary>
            <returns>The AtalaImage that will be saved to the PDF.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PdfImageCollection">
            <summary>Contains a collection of PdfImage objects to be saved to PDF.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfImageCollection._ctor">
            <summary>Creates an instance of PdfImageCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfImageCollection.Add(Atalasoft.Imaging.Codec.PdfImage)">
            <summary><![CDATA[Adds a PdfImage to the collection. ]]></summary>
            <param name="image"><![CDATA[The PdfImage to add.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfImageCollection.Item(System.Int32)">
            <summary><![CDATA[Returns a PdfImage from the collection.]]></summary>
            <param name="index">The index of the image in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PdfMetadata">
            <summary>Contains general information about the PDF file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfMetadata._ctor">
            <summary>Creates a new instance of PdfMetadata.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfMetadata._ctor()">
            <summary>Creates a new instance of PdfMetadata.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PdfMetadata._ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>Creates a new instance of PdfMetadata specifying title, author, subject, keywords, creator, producer, creationDate and modifiedDate.</summary>
            <param name="title"><![CDATA[The document's title.]]></param>
            <param name="author">The author of this PDF.</param>
            <param name="subject">The subject of the document.</param>
            <param name="keywords">Keywords associated with the document.</param>
            <param name="creator">The application that created the original document if the document was converted to PDF from another format.</param>
            <param name="producer">The name of the application that produced this document if the document was converted to PDF from another format.</param>
            <param name="creationDate">The creation date of this PDF.</param>
            <param name="modifiedDate">The date and time the document was most recently modified.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.Author()">
            <summary>Gets or sets the author of this PDF.</summary>
            <returns>The author of this PDF.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.CreationDate()">
            <summary>Gets or sets the creation date of this PDF.</summary>
            <returns>The creation date of this PDF.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.Creator()">
            <summary>Gets or sets the application that created the original document if the document was converted to PDF from another format.</summary>
            <returns>The application that created the original document if the document was converted to PDF from another format.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.Keywords()">
            <summary>Gets or sets keywords associated with the document.</summary>
            <returns>Keywords associated with the document.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.ModifiedDate()">
            <summary>Gets or sets the date and time the document was most recently modified.</summary>
            <returns>The date and time the document was most recently modified.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.Producer()">
            <summary>Gets or sets the name of the application that produced this document if the document was converted to PDF from another format.</summary>
            <returns>The name of the application that produced this document if the document was converted to PDF from another format.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.Subject()">
            <summary>Gets or sets the subject of the document.</summary>
            <returns>The subject of the document.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PdfMetadata.Title()">
            <summary><![CDATA[Gets or sets the document's title.]]></summary>
            <returns><![CDATA[The document's title.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngDecoder">
            <summary><![CDATA[An ImageDecoder used to read Portable Network Graphics (PNG) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder._ctor">
            <summary>Initializes a new instance of a PngDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder._ctor()">
            <summary>Initializes a new instance of a PngDecoder using the default screen gamma.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder._ctor(System.Double)">
            <summary>Initializes a new instance of a PcdDecoder with a specified screen gamma.</summary>
            <param name="screenGamma">The screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains gamma.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.GetImageInfo">
            <summary>Retreive information from a Png image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Png image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Png image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Png encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Png encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.ScreenGamma()">
            <summary>Gets or sets the screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains gamma.</summary>
            <returns>The screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains gamma.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SupportedImageType()">
            <summary>Returns a Png ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngEncoder">
            <summary><![CDATA[An ImageEncoder that will write Portable Network Graphics (PNG) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor">
            <summary>Initializes a new instance of a PngEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor()">
            <summary>Initializes a new instance of a PngEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor(System.Drawing.Color,System.Double,System.Boolean,Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>Initializes a new instance of a PngEncoder specifying the background color, gamma, interlace, and COM Text value to save.</summary>
            <param name="backgroundColor">The color to use as the default background color for Png images with alpha. </param>
            <param name="gamma">The gamma value to write to a PNG image. </param>
            <param name="interlaced">The Png Interlace setting. </param>
            <param name="comText">The COM text metadata to save with the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder._ctor(Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>Initializes a new instance of a PngEncoder specifying the COM Text metadata to save.</summary>
            <param name="comText">The COM text metadata to save with the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Png image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Png image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to. </param>
            <param name="image">The AtalaImage to encode. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundColor()">
            <summary><![CDATA[Gets or sets the color to use as the default background color for Png images with alpha. ]]></summary>
            <returns>The color to use as the default background color for Png images with alpha.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundIndex()">
            <summary><![CDATA[Gets or sets the palette index or grayscale value to use as the default background color for colormapped Png images with alpha. ]]></summary>
            <returns>The palette index or grayscale value to use as the default background color for colormapped Png images with alpha.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.ComText()">
            <summary>Gets or sets the COM text metadata to save with the image. </summary>
            <returns>The COM text metadata to save with the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Gamma()">
            <summary><![CDATA[Gets or sets the gamma value to write to a PNG image. 0 will not write any value, 2.2 is a typical value for PC's. Default 0. ]]></summary>
            <returns>The gamma value to write to a PNG image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Interlace()">
            <summary><![CDATA[Gets or sets whether Png files are saved with a pixel row interlacing pattern. <I>Defaults False</I>. ]]></summary>
            <returns>The Png Interlace setting.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngImageInfo">
            <summary>Summary description for PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo._ctor">
            <summary>Initialize a new instance of a PngImageInfo. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo._ctor()">
            <summary>Initialize a new instance of a PngImageInfo. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo._ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean)">
            <summary><![CDATA[Initialize a new instance of a PngImageInfo specifying it's properties.]]></summary>
            <param name="size">The width and height of the image. </param>
            <param name="colorDepth">The bits per pixel of the image. </param>
            <param name="imageType">The image type. </param>
            <param name="resolution">The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"><![CDATA[The PixelFormat which will be returned when the image is read. ]]></param>
            <param name="pngInterlaced"><![CDATA[A value indicating if the PNG is interlaced. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.PngInterlaced()">
            <summary><![CDATA[Gets a value indicating if the PNG is interlaced. ]]></summary>
            <returns><![CDATA[A value indicating if the PNG is interlaced. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdDecoder">
            <summary><![CDATA[An ImageDecoder used to read Adobe Photoshop (PSD) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder._ctor">
            <summary>Initializes a new instance of a PsdDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetImageInfo">
            <summary>Retreive information from a Psd image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Psd image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetPSDDims(System.IntPtr,System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.Dpi)">
            <summary>pMode            Bitmap = 0            Grayscale = 1            Indexed = 2            RGB = 3            CMYK = 4            * MultiChannel = 7            DuoTone = 8            * Lab = 9</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Psd image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Psd encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Psd encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdDecoder.SupportedImageType()">
            <summary><![CDATA[Gets a Psd ImageType enumeration value. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdEncoder">
            <summary><![CDATA[An ImageEncoder that will write Adobe Photoshop (PSD) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder._ctor">
            <summary>Initializes a new instance of a PsdEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Psd image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Psd image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.RegisteredDecoders">
            <summary>This class includes static members containing information on image decoders to use in the project when reading images as well as methods to obtain a an appropriate decoder based on an image stream or filename. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoder(System.IO.Stream)">
            <summary>Returns an ImageDecoder that can be used to decode the given stream.</summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo">
            <summary>Returns information about an encoded image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream)">
            <summary>Returns information about an encoded image file specifying a stream.</summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Returns information about an encoded image file specifying a stream and frame index.</summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to retreive information from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String)">
            <summary>Returns information about an encoded image file specifying a filename. </summary>
            <returns><![CDATA[The ImageInfo from an existing file.]]></returns>
            <param name="filename">A file name containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String,System.Int32)">
            <summary>Returns information about an encoded image file specifying a filename and frame index.</summary>
            <returns><![CDATA[The ImageInfo from an existing file.]]></returns>
            <param name="filename">A file name containing the encoded image data. </param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to retreive information from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.KnownTypeDecoders()">
            <summary>Returns a reference to the decoders that are registered in dotImage to load the known dotImage ImageTypes.</summary>
            <returns><![CDATA[A reference to the decoders that are registered in dotImage to load the known dotImage ImageTypes. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.UnknownTypeDecoders()">
            <summary><![CDATA[Returns a reference to the decoders that are used for reading images that dotImage doesn't recognize as a standard ImageType. ]]></summary>
            <returns><![CDATA[A reference to the decoders that are used for reading images that dotImage doesn't recognize as a standard ImageType. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaDecoder">
            <summary><![CDATA[An ImageDecoder used to read Truevision Targa (TGA) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder._ctor">
            <summary>Initializes a new instance of a TgaDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.GetImageInfo">
            <summary>Retreive information from a Targa image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Targa image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Targa image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.Read">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Targa encoded image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Returns an AtalaImage from a Stream containing a Targa encoded image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TgaDecoder.SupportedImageType()">
            <summary>Returns a Tga ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaEncoder">
            <summary><![CDATA[An ImageEncoder that will write Truevision Targa (TGA) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder._ctor">
            <summary>Initializes a new instance of a TgaEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Tga image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Tga image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to. </param>
            <param name="image">The AtalaImage to encode. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffDecoder">
            <summary><![CDATA[An ImageDecoder used to read Tagged Image File Format (TIFF) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder._ctor">
            <summary>Initializes a new instance of a TiffDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetFrameCount">
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetFrameCount(System.IO.Stream)">
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo">
            <summary>Retreive information from a Tiff image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Tiff image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a particularr page in a Tiff image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">The zero based frame index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Tiff image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read">
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff file. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="stream">A stream containing the encoded image data. </param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.SupportedImageType()">
            <summary>Returns a Tiff ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffEncoder">
            <summary><![CDATA[An ImageEncoder that will write Tagged Image File Format (TIFF) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor">
            <summary>Initializes a new instance of a TiffEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor()">
            <summary>Initializes a new instance of a TiffEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor(Atalasoft.Imaging.Codec.TiffCompression)">
            <summary>Initializes a new instance of a TiffEncoder specifying the compression.</summary>
            <param name="compression"><![CDATA[A value indicating the compression algorithm used when encoding to a file. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder._ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Boolean)">
            <summary>Initializes a new instance of a TiffEncoder specifying the compression and if the image should be appended to the end of an existing file.</summary>
            <param name="compression"><![CDATA[A value indicating the compression algorithm used when encoding to a file. ]]></param>
            <param name="append"><![CDATA[A value indicating if the image should be appended to the end of an existing file. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Tiff image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Tiff image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Append()">
            <summary><![CDATA[Get or sets a value indicating if the image should be appended to the end of an existing file.]]></summary>
            <returns><![CDATA[A value indicating if the image should be appended to the end of an existing file.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Compression()">
            <summary>Gets or sets a value indicating the compression algorithm used when encoding to a file.</summary>
            <returns><![CDATA[A value indicating the compression algorithm used when encoding to a file.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Metadata()">
            <summary>Gets or sets the Metadata Container which will be used to save Metadata with the image.</summary>
            <returns>The Metadata Container which will be used to save Metadata with the image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaDecoder">
            <summary><![CDATA[An ImageDecoder used to read Tagged Image File Format (TIFF) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder._ctor">
            <summary>Initializes a new instance of a TlaDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder._ctor()">
            <summary>Initializes a new instance of a TlaDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder._ctor(System.String)">
            <summary>Initializes a new instance of a TlaDecoder specifying the password.</summary>
            <param name="password">The password to use for reading encrypted Tla images. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.GetImageInfo">
            <summary>Retreive information from a Tla image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Tla image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Tla image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.Read">
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.Password()">
            <summary>Gets or sets the password to use for reading encrypted Tla images.</summary>
            <returns>The password to use for reading encrypted Tla images.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.SupportedImageType()">
            <summary>Returns a Tla ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaEncoder">
            <summary><![CDATA[An ImageEncoder that will write TLA images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder._ctor">
            <summary>Initializes a new instance of a TiffEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder._ctor()">
            <summary>Initializes a new instance of a TiffEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder._ctor(System.String)">
            <summary>Initializes a new instance of a TiffEncoder specifying the password to encrypt with. </summary>
            <param name="password">The password to use for reading, writing, or obtaining information on encrypted TLA images. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Tla image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Tla image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.Password()">
            <summary><![CDATA[Gets or sets the password to use for reading, writing, or obtaining information on encrypted TLA images. ]]></summary>
            <returns>The password to use for reading, writing, or obtaining information on encrypted TLA images. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpDecoder">
            <summary><![CDATA[An ImageDecoder used to read Wireless Bitmap (Wbmp) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder._ctor">
            <summary>Initializes a new instance of a WbmpDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.GetImageInfo">
            <summary>Retreive information from a Wbmp image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Wbmp image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Wbmp image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.Read">
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WbmpDecoder.SupportedImageType()">
            <summary>Returns a Wbmp ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpEncoder">
            <summary><![CDATA[An ImageEncoder that will write Wireless Bitmap (WBMP) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder._ctor">
            <summary>Initializes a new instance of a WbmpEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Wbmp image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Wbmp image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to. </param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfDecoder">
            <summary><![CDATA[An ImageDecoder used to read Windows Metafile (WMF) images from a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder._ctor">
            <summary>Initializes a new instance of a WmfDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder._ctor()">
            <summary>Initializes a new instance of a WmfDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of a WmfDecoder specifying the size of the image.</summary>
            <param name="defaultSize">The default System.Drawing.Size when reading a windows metafile. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Wmf image stored in a Stream without decoding the image data. </summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary><![CDATA[Returns true if the specified Stream contains an Wmf image.]]></summary>
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="stream">A stream containing the encoded image data. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.DefaultSize()">
            <summary>Gets or sets the default System.Drawing.Size when reading a windows metafile. </summary>
            <returns><![CDATA[The default System.Drawing.Size when reading a windows metafile.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.SupportedImageType()">
            <summary>Returns a Wmf ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfEncoder">
            <summary><![CDATA[An ImageEncoder that will write Windows Metafile (WMF) images to a System.IO.Stream.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder._ctor">
            <summary>Initializes a new instance of a WmfEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder._ctor()">
            <summary>Initializes a new instance of a WmfEncoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder._ctor(System.Boolean)">
            <summary>Initializes a new instance of a WmfEncoder specifying the placeable value.</summary>
            <param name="placeable"><![CDATA[A value indicating if an Aldus placeable metafile will be written. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.Save">
            <summary><![CDATA[Encode an AtalaImage as a Wmf image to a stream. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary><![CDATA[Encode an AtalaImage as a Wmf image to a stream. ]]></summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress"><![CDATA[The progress delegate.  Can be set to null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.ImageType()">
            <summary><![CDATA[Returns the ImageType associated with thie Encoder Setting.]]></summary>
            <returns><![CDATA[The ImageType associated with thie Encoder Setting.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.Placeable()">
            <summary><![CDATA[Gets or sets a value indicating if an Aldus placeable metafile will be written. ]]></summary>
            <returns><![CDATA[A value indicating if an Aldus placeable metafile will be written. ]]></returns>
        </member>
        <member name="N:Atalasoft.Imaging.ColorManagement">
            <summary>Contains classes that are used for converting colorspaces and color matching images to a device.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorSpace">
            <summary>A value that indicates the color space in which profile data is defined.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.Platform">
            <summary>Indicates the platform that the profile is intended for.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileClass">
            <summary>Indicates the profile class.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Monitor">
            <summary>Display Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Printer">
            <summary>Output Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Scanner">
            <summary>Input Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Link">
            <summary>Device Link Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Abstract">
            <summary>Abstract Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.ColorSpace">
            <summary>Color Space Conversion Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Named">
            <summary>Named Color Profile</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileFlags">
            <summary>Bit flags containing hints that the CMM uses to interpret the profile data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.EmbeddedProfile">
            <summary>The profile is embedded in a bitmap file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.DependentOnData">
            <summary><![CDATA[The profile can't be used independently of the embedded color data. Used for profiles that are embedded in bitmap files]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.RenderingIntent">
            <summary><![CDATA[Indicates different methods to create a color rendering as defined by the International Color Consortium (ICC).]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Pictures">
            <summary><![CDATA[Known as perceptual intent in the ICC specification, causes the full gamut to be compressed or expanded to full the gamut of the destination device.  Most suitable for photographic images and is usually the default intent.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Proof">
            <summary><![CDATA[Known as the colorimetric intent in the ICC specification, causes colors that fall outside the range of the output device to be set to the nearest color while leaving the other colors unchanged.  Does not preserve the white point and is commonly used for proofing printed material.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Graphics">
            <summary><![CDATA[Known as the Saturation intent in the ICC specification, it preserves the saturation of colors as the expense of hue and lightness.  Commonly used for business graphics.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Match">
            <summary><![CDATA[Known as the absolute colorimetric intent in the ICC specification, causes colors that fall outside the range of the output device to be set to the nearest color while leaving the other colors unchanged.  Preserves the white point.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorProfile">
            <summary><![CDATA[A color profile that is used for translating colors.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor">
            <summary><![CDATA[Initializes a new instance of ColorProfile.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.Byte[])">
            <summary><![CDATA[Initializes a new instance of ColorProfile specifying a byte array containing the profile memory.]]></summary>
            <param name="data">The bytes that contain the color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.IntPtr,System.Int32)">
            <summary><![CDATA[Initializes a new instance of ColorProfile specifying a pointer to the profile memory and the size of this memory.]]></summary>
            <param name="mempointer">A pointer to the memory containing a color profile.</param>
            <param name="size">The size of the memory pointer in bytes.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.IO.Stream)">
            <summary><![CDATA[Initializes a new instance of ColorProfile specifying a stream containing the profile memory.]]></summary>
            <param name="stream">A stream containing a color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile._ctor(System.String)">
            <summary><![CDATA[Initializes a new instance of ColorProfile specifying the filename containing a color profile.]]></summary>
            <param name="filename">The file name of the color profile (usually with the ICM or ICC extension).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose">
            <summary>Free unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded">
            <summary><![CDATA[Returns a ColorProfile embedded within an image. ]]></summary>
            <returns><![CDATA[A ColorProfile embedded within an image. ]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.IO.Stream)">
            <summary><![CDATA[Returns a ColorProfile embedded within an image given the image stream. ]]></summary>
            <returns><![CDATA[A ColorProfile embedded within an image. ]]></returns>
            <param name="imageStream">The encoded image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.String)">
            <summary><![CDATA[Returns a ColorProfile embedded within an image given the image file name. ]]></summary>
            <returns><![CDATA[A ColorProfile embedded within an image. ]]></returns>
            <param name="fileName">The filename of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromSrgb">
            <summary>Returns the standard sRGB Color Profile.</summary>
            <returns>The standard sRGB Color Profile.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileBytes">
            <summary>Returns the number of bytes that this ColorProfile occupies.</summary>
            <returns>The number of bytes that this ColorProfile occupies.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileDirectory">
            <summary>Returns the path of the color profile directory.</summary>
            <returns>The path of the color profile directory.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromGraphics(System.Drawing.Graphics)">
            <summary>Returns the color profile assigned to a specified Graphics object.</summary>
            <returns>The color profile assigned to a specified Graphics object. </returns>
            <param name="graphics">A graphics object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromScreen">
            <summary>Returns the default color profile assigned to the screen.</summary>
            <returns>The default color profile assigned to the screen.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetScreenProfileName">
            <summary>Returns the name of the color profile associated with the current display.</summary>
            <returns>The name of the color profile associated with the current display.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Save(System.String)">
            <summary><![CDATA[Save this ColorProfile to a file.]]></summary>
            <param name="filename"><![CDATA[The filename of the colorprofile to save.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Class()">
            <summary>Gets the profile class.</summary>
            <returns>The profile class.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.CmmType()">
            <summary>Gets the identification number of the CMM that is used in the profile. Identification numbers are registered with the ICC.</summary>
            <returns>The identification number of the CMM that is used in the profile.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ColorSpace()">
            <summary>Gets a value that indicates the color space in which the profile data is defined.</summary>
            <returns><![CDATA[A value that indicates the color space in which the profile data is defined.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ConnectionColorSpace()">
            <summary>Gets a value that indicates the color space in which the profile connection space (PCS) is defined. </summary>
            <returns>The color space in which the profile connection space (PCS) is defined.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Creator()">
            <summary><![CDATA[Gets a signature of the software that created the profile.  Signatures are registered with the ICC. ]]></summary>
            <returns><![CDATA[A signature of the software that created the profile.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Flags()">
            <summary>Gets bit flags containing hints that the CMM uses to interpret the profile data.</summary>
            <returns>Bit flags containing hints that the CMM uses to interpret the profile data.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Manufacturer()">
            <summary><![CDATA[Gets the identification number of the device profile manufacturer.  All manufacturer identification numbers are registered with the ICC. ]]></summary>
            <returns>The identification number of the device profile manufacturer.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Model()">
            <summary><![CDATA[Gets the device manufacturer's device model number.  All model identification numbers are registered with the ICC. ]]></summary>
            <returns><![CDATA[The device manufacturer's device model number. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Platform()">
            <summary>Gets the primary platform for which the profile was created.</summary>
            <returns>The primary platform for which the profile was created.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.RenderingIntent()">
            <summary>Gets the profile rendering intent.</summary>
            <returns>The profile rendering intent.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Version()">
            <summary>Gets the version number of this color profile.</summary>
            <returns>The version number of this color profile. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorTransform">
            <summary><![CDATA[Contains a color transform object and methods to convert from one colorspace to another using a ColorProfile.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor">
            <summary>Initializes a new instance of ColorTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Initializes a new instance of ColorTransform specifying a source and destination ColorProfile.</summary>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary><![CDATA[Initializes a new instance of ColorTransform specifying a source,. destination, and target ColorProfile and the rendering intents of the translation. ]]></summary>
            <param name="source">The source color profile. </param>
            <param name="dest">The destination color profile. </param>
            <param name="target">The target output device color profile.</param>
            <param name="displayIntent">The rendering intent to use for the display.</param>
            <param name="proofIntent">The rendering intent to use for the target device.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform._ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary>Initializes a new instance of ColorTransform specifying a source and destination ColorProfile and the rendering intent of the translation.</summary>
            <param name="source">The source color profile. </param>
            <param name="dest">The destination color profile. </param>
            <param name="renderingIntent">The rendering intent of the translation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColors(Atalasoft.Imaging.ColorManagement.ColorType,Atalasoft.Imaging.ColorManagement.ColorType,System.Drawing.Color[])">
            <summary><![CDATA[This method converts an array of colors using this <SPAN class=dxMisspelled id=dxMisspelled word="ColorTransform">ColorTransform</SPAN>. ]]></summary>
            <returns>An array of Colors.</returns>
            <param name="inputColorType"><![CDATA[The ColorType of the input colors.]]></param>
            <param name="outputColorType"><![CDATA[The ColorType of the output colors.]]></param>
            <param name="inputColors"><![CDATA[A parameterr array of color values.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColorSpace(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary>Returns a new image with a translated colorspace.</summary>
            <returns><![CDATA[A new image with a translated colorspace.]]></returns>
            <param name="image">The image to translate.</param>
            <param name="destPixelFormat">The desired PixelFormat of the returned image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.Dispose">
            <summary>Clean up unmanaged resources.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException">
            <summary>This exception fires when the ColorProfiles used for a ColorTransform are invalid.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.Drawing">
            <summary>Contains classes that will draw primitives such as lines, circles, and text onto an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Alignment">
            <summary>Specifies the line position.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Center">
            <summary>Center the line on the region.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Inset">
            <summary>Draw the line inside the region.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Outset">
            <summary>Draw the line outside the region.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.CornerJoin">
            <summary>Corner style used where lines join.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Miter">
            <summary>Joins are mitred.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Bevel">
            <summary>Joins are beveled.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Round">
            <summary>Joins are round.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.EndCap">
            <summary>Drawing style for the end of lines.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Flat">
            <summary>End caps are flat.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Round">
            <summary>End caps are round.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Square">
            <summary>End caps are square.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Hatch">
            <summary>The style of Hatch to use with a HatchedFill. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Cross">
            <summary>Horizontal and vertical cross-hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalCross">
            <summary>45-degree crosshatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalDown">
            <summary>A 45-degree downward, left-to-right hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalUp">
            <summary>A 45-degree upward, left-to-right hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Horizontal">
            <summary>Horizontal hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Vertical">
            <summary>Vertical hatch</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.LineStyle">
            <summary>The type of line to draw.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Solid">
            <summary>The pen is solid.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dash">
            <summary>The pen is dashed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dot">
            <summary>The pen is dotted. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDot">
            <summary>The pen has alternating dashes and dots. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDotDot">
            <summary>The pen has alternating dashes and double dots. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextAlignment">
            <summary>The horizontal alignment of the text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Left">
            <summary>Left aligned text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Center">
            <summary>Centered text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Right">
            <summary>Right aligned text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Justify">
            <summary>Justified text.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.AtalaPen">
            <summary><![CDATA[The AtalaPen is used to define a line or border used when drawing primitives onto a Canvas.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor()">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class that holds a single pixel width black solid pen.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified color.]]></summary>
            <param name="color">The color of the pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified color and width.]]></summary>
            <param name="color">The color of the fill. </param>
            <param name="width">The width of the pen in pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified color, width, and line style.]]></summary>
            <param name="color">The color of the fill. </param>
            <param name="width">The width of the pen in pixels. </param>
            <param name="lineStyle">The style of the line.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified color, width, line style, end cap, and corner join.]]></summary>
            <param name="color">The color of the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified Fill.]]></summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified Fill and width.]]></summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
            <param name="width">The width of the pen in pixels. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified Fill, width, and line style.]]></summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen. </param>
            <param name="width">The width of the pen in pixels. </param>
            <param name="lineStyle">The style of the line.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen._ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary><![CDATA[Initializes a new instance of the AtalaPen class with a specified Fill, width, line style, end cap, and corner join.]]></summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
            <param name="width">The width of the pen in pixels. </param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing. </param>
            <param name="cornerJoin">The style of corners used for this pen. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.Clone">
            <summary>Create a copy of this AtalaPen. </summary>
            <returns>Pen object</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment()">
            <summary>Gets or sets a value indicating the line positioning relative to the coordinates.</summary>
            <returns>A value indicating the line positioning relative to the coordinates</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Color()">
            <summary>Gets or sets the color of the pen.</summary>
            <returns>The color of the pen.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin()">
            <summary>Gets or sets the style of corners used for this pen.</summary>
            <returns>The style of corners used for this pen.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CustomDashPattern()">
            <summary><![CDATA[Gets or sets an array of int's indicating the dash pattern when the LineStyle is set to Custom.]]></summary>
            <returns><![CDATA[An array of int's indicating the dash pattern when the LineStyle is set to Custom.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap()">
            <summary>Gets or sets the pen EndCap used when drawing.</summary>
            <returns>The pen EndCap used when drawing.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill()">
            <summary>Gets or sets the Fill used when drawing with this pen. </summary>
            <returns>The Brush object used when drawing with this pen.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle()">
            <summary>Gets or sets the type of line drawn with this pen.</summary>
            <returns>The type of line drawn with this pen.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.penStyle()">
            <summary>Returns the PenStyle value used in ExtCreatePen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Width()">
            <summary>Gets or sets the width of the pen in pixels.</summary>
            <returns>The width of the pen in pixels.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Canvas">
            <summary>This class is used to draw primitives and text onto an AtalaImage, Bitmap, or Graphics object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas._ctor">
            <summary>Initializes a new instance of a Canvas object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of a Canvas object specifying an Atalasoft.Imaging.AtalaImage to draw on.</summary>
            <param name="image">The image to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas._ctor(System.Drawing.Graphics)">
            <summary>Initializes a new instance of a Canvas object specifying a System.Drawing.Graphics to draw on.</summary>
            <param name="graphics">The device to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize">
            <summary>Calculates the size of the text without actually drawing it. </summary>
            <returns>Returns the size of the text without actually drawing it.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <returns>Returns the size of single line text without actually drawing it. </returns>
            <param name="text">The text string to evaluate.</param>
            <param name="font">The text font. </param>
            <param name="format">The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Size,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Calculates the size of bound text without actually drawing it. </summary>
            <returns>Returns the size of bound text without actually drawing it.</returns>
            <param name="text">The text string to evaluate.</param>
            <param name="boundSize">The size of the bound</param>
            <param name="font">The text font. </param>
            <param name="format">The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse">
            <summary>Draws an ellipse onto this canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws an ellipse onto this canvas specifying the border pen. </summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws an ellipse onto this canvas specifying the border pen and Fill.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
            <param name="fill">The Fill specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws an ellipse onto this canvas specifying the Fill.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="fill">The Fill specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLine(System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draw a line onto this canvas.</summary>
            <param name="startPoint">The start point of the line in image pixel coordinates. </param>
            <param name="endPoint">The end point of the line in image pixel coordinates.</param>
            <param name="pen">The AtalaPen controling the line characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLines(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws multiple connected lines onto this canvas. </summary>
            <param name="points">An array of points that straight lines are drawn through.</param>
            <param name="pen">The AtalaPen controlling the line characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon">
            <summary><![CDATA[Draw a series of connected lines that form a closed polygon.  ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draw a series of connected lines that form a closed polygon specifying the border pen. </summary>
            <param name="points">An array of points forming a polygon that straight lines are drawn through. </param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a series of connected lines that form a closed polygon specifying the border pen and inside fill.</summary>
            <param name="points">An array of points forming a polygon that straight lines are drawn through. </param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a series of connected lines that form a closed polygon specifying the inside fill.</summary>
            <param name="points">An array of points forming a polygon that straight lines are drawn through. </param>
            <param name="fill">The Fill specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle">
            <summary>Draws a rectangle onto this canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws a rectangle onto this canvas specifying the border pen.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a rectangle onto this canvas specifying the border pen and fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the border pen and fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the border pen.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics. </param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a rectangle onto this canvas specifying the fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRegion(System.Drawing.Region,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a filled region.</summary>
            <param name="region">The region to fill.</param>
            <param name="fill">The Fill specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText">
            <summary><![CDATA[Draw a single line or multi-line text string onto this canvas. ]]></summary>
            <returns>The actual size of the text drawn.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary><![CDATA[Draw a single line text string onto this canvas specifying the upper left corner position. ]]></summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="position"><![CDATA[The position of the upper left corner of the text rectangle to draw.]]></param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill)">
            <summary><![CDATA[Draw a single line text string onto this canvas specifying the upper left corner position and a solid background color.]]></summary>
            <param name="text">The text string to draw.</param>
            <param name="position"><![CDATA[The position of the upper left corner of the text rectangle to draw. ]]></param>
            <param name="font">The text font. </param>
            <param name="foreColor">The text fill. </param>
            <param name="backColor">The background color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary><![CDATA[Draw a single line text string onto this canvas specifying the upper left corner position and a solid background color.]]></summary>
            <param name="text">The text string to draw.</param>
            <param name="position"><![CDATA[The position of the upper left corner of the text rectangle to draw. ]]></param>
            <param name="font">The text font. </param>
            <param name="foreColor">The text fill. </param>
            <param name="backColor">The background color.</param>
            <param name="format">The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary><![CDATA[Draw a single line text string onto this canvas specifying the upper left corner position and text formatting. ]]></summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="position"><![CDATA[The position of the upper left corner of the text rectangle to draw.]]></param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary><![CDATA[Draw multiline text onto this canvas specifying the rectangular bound area of the string. ]]></summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle"><![CDATA[The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the text.]]></param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary><![CDATA[Draw a single line text string onto this canvas specifying the upper left corner position and a solid background color.]]></summary>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle"><![CDATA[The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the text. ]]></param>
            <param name="font">The text font. </param>
            <param name="foreColor">The text fill. </param>
            <param name="backColor">The background color.</param>
            <param name="format">The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary><![CDATA[Draw multiline text onto this canvas specifying the rectangular bound area of the string and text formatting.]]></summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle"><![CDATA[The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the text]]></param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.InvertedOnGraphics()">
            <summary>Gets or sets a value indicating if entities being drawn on a graphics object will be inverted.</summary>
            <returns><![CDATA[A value indicating if entities being drawn on a graphics object will be inverted.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.SmoothingLevel()">
            <summary>Gets or sets the amount of antialiasing applied to the entity being drawn onto this canvas.</summary>
            <returns>The amount of antialiasing applied to the entity being drawn onto this canvas.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Fill">
            <summary><![CDATA[The base class which all Fill objects inherit.  A Fill contains the color, texture or gradient of the entity being drawn.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.Clone">
            <summary>Returns a copy of this Fill.</summary>
            <returns>A copy of this Fill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.GetBrushHandle">
            <summary>Returns a GDI handle to the brush (for internal use only).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.Color()">
            <summary>Gets or sets the color of the fill. </summary>
            <returns><![CDATA[The color of the fill. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.PaletteIndex()">
            <summary>Gets or sets the palette index used for the color.</summary>
            <returns>The palette index used for the color.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.HatchedFill">
            <summary><![CDATA[A Fill containing hatched lines.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill._ctor">
            <summary>Initializes a new instance of HatchedFill.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill._ctor(Atalasoft.Imaging.Drawing.Hatch)">
            <summary>Initializes a new instance of HatchedFill with a black hatch and specified hatch style.</summary>
            <param name="style">The type of hatch.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill._ctor(Atalasoft.Imaging.Drawing.Hatch,System.Drawing.Color)">
            <summary>Initializes a new instance of HatchedFill with a specified hatch style and color. </summary>
            <param name="style">The type of hatch. </param>
            <param name="color">The hatch color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.Clone">
            <summary>Returns a copy of this HatchedFill.</summary>
            <returns><![CDATA[A copy of this HatchedFill.]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.GetBrushHandle">
            <summary>Returns a GDI brush handle.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.HatchedFill.HatchStyle()">
            <returns><![CDATA[The hatch style that will be drawn.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.SolidFill">
            <summary>A Fill containing a solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill._ctor">
            <summary>Initializes a new instance of SolidFill. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill._ctor()">
            <summary>Initializes a new instance of SolidFill with the color black.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill._ctor(System.Drawing.Color)">
            <summary>Initializes a new instance of SolidFill with a specified color.</summary>
            <param name="color">The Fill color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.Clone">
            <summary>Returns a copy of this SolidFill.</summary>
            <returns>A copy of this SoldFill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.GetBrushHandle">
            <summary>Returns a GDI brush handle. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextFormat">
            <summary><![CDATA[Contains extended properties for use with drawing text onto a Canvas.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor">
            <summary>Initializes a new instance of TextFormat.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor()">
            <summary>Initializes a new instance of TextFormat with default settings.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor(Atalasoft.Imaging.Drawing.TextAlignment)">
            <summary>Initializes a new instance of TextFormat specifying the horizontal alignment.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double)">
            <summary>Initializes a new instance of TextFormat specifying the horizontal alignment and angle.</summary>
            <param name="alignment">The horizontal alignment of the drawn text. </param>
            <param name="angle">The angle in degrees of the drawn text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat._ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32)">
            <summary>Initializes a new instance of TextFormat specifying the horizontal alignment, angle, and inter-character spacing.</summary>
            <param name="alignment">The horizontal alignment of the drawn text. </param>
            <param name="angle">The angle in degrees of the drawn text.</param>
            <param name="interCharacterSpace">Number of additional pixels to add between characters.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Alignment()">
            <summary>Gets or sets the horizontal alignment of the text to draw. </summary>
            <returns>The horizontal alignment of the text to draw. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Angle()">
            <summary>Gets or sets the angle in degrees of the text to draw. </summary>
            <returns>The angle in degrees of the text to draw. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.InterCharacterSpace()">
            <summary><![CDATA[Gets or sets the number of additional pixels to add between characters.  ]]></summary>
            <returns><![CDATA[The number of additional pixels to add between characters.  ]]></returns>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing">
            <summary>Contains classes and namespaces that manipulate the image pixels via filters, transforms, and other effects. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AlphaMergeType">
            <summary>When images are combined, the alpha channels may be merged in one of many ways as listed in this enumeration.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Replace">
            <summary>Replace the bottom alpha value with the top.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostOpaque">
            <summary>Use the higher of the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostTransparent">
            <summary>Use the lower of the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Add">
            <summary>Add the bottom and top values.  The maximum value is 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Subtract">
            <summary>Subtract the top value from the bottom.  The minimum value is 0.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalAnd">
            <summary>Perform a bitwise logical AND on the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalOR">
            <summary>Perform a bitwise logical OR on the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalXOR">
            <summary>Perform a bitwise logical XOR on the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseOriginal">
            <summary>Ignore the top value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags">
            <summary>Bit flags used by some methods to specify which channels to work with.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel1">
            <summary><![CDATA[The first channel in the image.  For a RGB or RGBA image this is the Blue color channel.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel2">
            <summary><![CDATA[The second channel in the image.  For a RGB or RGBA image this is the Green color channel.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel3">
            <summary><![CDATA[The third channel in the image.  For a RGB or RGBA image this is the Red color channel. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel4">
            <summary><![CDATA[The fourth channel in the image.  For a RGBA image this is the Alpha channel. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.AllChannels">
            <summary>Specifies all channels in the image (Channel1 | Channel2 | Channel3 | Channel4).</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColorMatchMode">
            <summary>Specifies the type of colormatching to use when using Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand or ImageAnalyzer.GetColormatchedMask.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Edge">
            <summary>Indicates that the colormatching will occur up to a border of the specified color.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Surface">
            <summary>Indicates that the colormatching will occur with all contingous pixels from the starting point.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.DitheringMode">
            <summary>Specifies the dithering algorithm to use when converting an image to colormapped.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.None">
            <summary>Specifies a best fit method with no dithering.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.TwoValue">
            <summary>Specifies a simple 2-value style of dithering.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.FloydSteinberg">
            <summary><![CDATA[Specifies Floyd-Steinberg dithering.  This method of dithering uses error diffusion and produces the best dithered image.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode">
            <summary>Specifies the interpolation to use with various image processing commands.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.None">
            <summary>No interpolation.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiLinear">
            <summary><![CDATA[Uses standard bi-linear interpolation. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiCubic">
            <summary>Slowest, but most accurate interpolation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags">
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Grayscale">
            <summary><![CDATA[Discard the chrominance channels in standard (YCbCr encoded) JPEGs. This leaves just the luminance which gives you a grayscale JPEG.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.NoExcessMcuBlocks">
            <summary>Do not remove excess MCU blocks.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Progressive">
            <summary>Set or remove the progressive display option.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformType">
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.None">
            <summary>No Transform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipHorizontal">
            <summary>Flip the image horizontally.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipVertical">
            <summary>Flip the image vertically.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transverse">
            <summary><![CDATA[Transpose across upper-right to lower-left axis.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transpose">
            <summary>Transpose across upper-leftto lower-right axis.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate90">
            <summary>Rotate the image 90 degrees.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate180">
            <summary><![CDATA[Rotate the image 180 degrees.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate270">
            <summary>Rotate the image 270 degrees.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.MergeOption">
            <summary>Image overlay merge options.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.FastBlend">
            <summary>Fast Blend. Uses factor parameter as opacity. (0 to 1)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AccurateBlend">
            <summary><![CDATA[Slower, more accurate blend. Uses factor parameter as opacity.  (0 to 1)]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalAnd">
            <summary>Pixels are combined with logical AND.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalOR">
            <summary>Pixels are combined with logical OR.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalXOR">
            <summary>Pixels are combined with logical XOR.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Max">
            <summary>Output pixels is max of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Min">
            <summary>Output pixel is min of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Sum">
            <summary>Output pixel is sum of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Difference">
            <summary>Output pixel is difference of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.GreaterThanFactor">
            <summary><![CDATA[If top pixel value &gt; factor, output top pixel value, otherwise output factor.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LessThanFactor">
            <summary><![CDATA[If top pixel value &lt; factor, output top pixel value, otherwise output factor. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AbsoluteValueOfDifference">
            <summary>Absolute value of the differnce of top and bottom pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Multiply">
            <summary>Multiply bottom pixel value by top pixel value and divide by 255 (top * bottom) / 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MultiplyWidthFactor">
            <summary>Multiply bottom pixel value by top pixel value and by a factor and divide by 255 (top * bottom * factor) / 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Screen">
            <summary>255-(((255-top)*(255-bottom)) / 255).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.PlusFactor">
            <summary>bottom = bottom + top - factor</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MinusFactor">
            <summary>bottom = bottom - top - factor</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode">
            <summary>Specifies the type of noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Perlin">
            <summary>Generate an image filled with Perlin noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Hugo">
            <summary><![CDATA[Generate an image filled with Hugo Elias's implementation of Perlin noise.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Gaussian">
            <summary>Specifies the type of noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.NegativeExponential">
            <summary>Generate an image using negative exponential noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Rayleigh">
            <summary>Generate an image filled with rayleigh noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Uniform">
            <summary>Generate an image filled with uniform noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.DimensionalSlice">
            <summary>Create a single 2D plane of Perlin noise producing a single slice through a volume of  noise at a given Z offset.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod">
            <summary>Specifies the type of resampling method to apply when using the ResampleCommand, ResampleColormappedToRgbCommand or the Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Default">
            <summary><![CDATA[Uses a predefined resampling method depending on the image PixelFormat and final size.  Uses Nearest Neighbor resampling for 1-bit and 8-bit colormapped images, BiLinear when increasing the size of continuous tone images. and AreaAverage when reducing continuous tone images.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.NearestNeighbor">
            <summary><![CDATA[Use the nearest pixel value.  This is the fastest algorithm. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiLinear">
            <summary><![CDATA[Uses bi-linear resampling.  Yields good results when enlarging images, and fairly fast. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiCubic">
            <summary><![CDATA[Uses bi-cubic interpolation.  Better quality then bi-linear but slower.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.AreaAverage">
            <summary><![CDATA[Average the pixel values when reducing image size.  Will cause an exception to be thrown if increasing image size.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.LanczosFilter">
            <summary><![CDATA[Generally yields the best results for photographic images at the expense of speed.  Very similar to Photoshop's Bi-cubic reductions.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand">
            <summary>Maps an image into a specified palette, creating an 8-bit colormapped image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor">
            <summary>Initializes a new instance of ApplyPaletteCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor(Atalasoft.Imaging.Palette)">
            <summary><![CDATA[Initializes a new instance of ApplyPaletteCommand specifying the Palette. ]]></summary>
            <param name="palette"><![CDATA[The Palette to map the image to.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode)">
            <summary><![CDATA[Initializes a new instance of ApplyPaletteCommand specifying the Palette and dithering mode. ]]></summary>
            <param name="palette"><![CDATA[The Palette to map the image to.]]></param>
            <param name="ditherMode">The dithering mode to use when mapping the image to a palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary><![CDATA[Initializes a new instance of ApplyPaletteCommand specifying the palette, dithering mode, and dither error. ]]></summary>
            <param name="palette"><![CDATA[The palette to map the image to.]]></param>
            <param name="ditherMode">The dithering mode to use when mapping the image to a palette.</param>
            <param name="ditherErrorMax"><![CDATA[The amount of dithering.  (0 - 127) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this ApplyPaletteCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherErrorMax()">
            <summary>Gets or sets the amount of dithering.</summary>
            <returns>The amount of dithering.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherMode()">
            <summary><![CDATA[Gets or sets the dithering mode to use when mapping the image to a palette.]]></summary>
            <returns>The dithering mode to use when mapping the image to a palette.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.Palette()">
            <summary><![CDATA[Gets or sets the Palette to map the image to.]]></summary>
            <returns><![CDATA[The Palette to map the image to. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AutoCropCommand">
            <summary>Automatically crops an image by removing borders around the edge of an image with a solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor">
            <summary>Initializes a new instance of AutoCropCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor()">
            <summary>Initializes a new instance of AutoCropCommand with 0 tolerance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double)">
            <summary><![CDATA[Initializes a new instance of AutoCropCommand specifying a tolerance. ]]></summary>
            <param name="tolerance"><![CDATA[The tolerance used to locate the edges.  (0 - 100)]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Drawing.Color)">
            <summary><![CDATA[Initializes a new instance of AutoCropCommand specifying a tolerance and override color.]]></summary>
            <param name="tolerance"><![CDATA[The tolerance used to locate the edges.  (0 - 100)]]></param>
            <param name="overrideColor"><![CDATA[A specific color to represent the image 'whitespace'.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Drawing.Color,System.Boolean)">
            <summary><![CDATA[Initializes a new instance of AutoCropCommand specifying a tolerance, override color, and if uses median filter.]]></summary>
            <param name="tolerance"><![CDATA[The tolerance used to locate the edges.  (0 - 100)]]></param>
            <param name="overrideColor"><![CDATA[A specific color to represent the image 'whitespace'.]]></param>
            <param name="useMedianFilter">If true, removed noise from the image prior to getting crop dimensions.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Int32)">
            <summary><![CDATA[Initializes a new instance of AutoCropCommand specifying a tolerance and override index.]]></summary>
            <param name="tolerance"><![CDATA[The tolerance used to locate the edges.  (0 - 100)]]></param>
            <param name="overrideIndex"><![CDATA[A palette index value containing the color to represent image 'whitespace'.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._ctor(System.Double,System.Int32,System.Boolean)">
            <summary><![CDATA[Initializes a new instance of AutoCropCommand specifying a tolerance, override index, and if uses median filter. ]]></summary>
            <param name="tolerance"><![CDATA[The tolerance used to locate the edges.  (0 - 100)]]></param>
            <param name="overrideIndex"><![CDATA[A specific color to represent the image 'whitespace'.]]></param>
            <param name="useMedianFilter">If true, removed noise from the image prior to getting crop dimensions.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Returns a Rectangle of the border to remove.<crlf>Returns a Rectangle of the border to remove. ]]></summary>
            <param name="sourceImage">The AtalaImage that will be evaluated.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideColor()">
            <summary><![CDATA[Gets or sets a specific color to represent the image 'whitespace'.]]></summary>
            <returns><![CDATA[A specific color to represent the image 'whitespace'.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideIndex()">
            <summary><![CDATA[Gets or sets a palette index value containing the color to represent image 'whitespace'.]]></summary>
            <returns><![CDATA[A palette index value containing the color to represent image 'whitespace'.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.Tolerance()">
            <summary><![CDATA[Gets or sets the tolerance used to locate the edges.  ]]></summary>
            <returns><![CDATA[The tolerance used to locate the edges.  ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.UseMedianFilter()">
            <summary>Gets or sets a value indicating if the noise is removed prior to getting the crop dimensions.</summary>
            <returns><![CDATA[A value indicating if the noise is removed prior to getting the crop dimensions.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand">
            <summary>Changes the image to a new pixel format.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor">
            <summary>Initializes a new instance of ChangePixelFormatCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor(Atalasoft.Imaging.PixelFormat)">
            <summary>Initializes a new instance of ChangePixelFormatCommand specifying the new pixel format.</summary>
            <param name="newPixelFormat">The PixelFormat of the new image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Initializes a new instance of ChangePixelFormatCommand specifying the new pixel format and color profile.</summary>
            <param name="newPixelFormat">The PixelFormat of the new image. </param>
            <param name="destProfile">This is the destination colorprofile to use when changing colorspaces.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ChangePixelFormatCommand using the current settings to the source image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.DestProfile()">
            <summary>Gets or sets the color profile to use when converting the image to a new colorspace.</summary>
            <returns>The color profile to use when converting the image to a new colorspace.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.NewPixelFormat()">
            <summary>Gets or sets the PixelFormat of the new image.</summary>
            <returns>The PixelFormat of the new image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask">
            <summary>This class is used to get a mask image matching a specified color or contiguous pixels at a specified point.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask._ctor">
            <summary>Initializes a new instance of ColormatchedMask.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of ColormatchedMask specifying the AtalaImage to evaluate.</summary>
            <param name="image">The AtalaImage to return apply the colormatching to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of ColormatchedMask specifying the AtalaImage to evaluate and a progress callback.</summary>
            <param name="image">The AtalaImage to return apply the colormatching to. </param>
            <param name="progress">The progress callback. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetEdgeColorMatchedMask(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary>Mask area is bounded by pixels matching the edgeColor parameter.</summary>
            <param name="center">The point to begin the colormatch.</param>
            <param name="edgeColor">The color of the edge to find.</param>
            <param name="tolerance">The tolerance (0 - 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetSurfaceColorMatchedMask(System.Drawing.Point,System.Double)">
            <summary>All contiguous pixels matching the pixel at the center point are returned as on in resulting mask.</summary>
            <param name="center">The point to begin the colormatch.</param>
            <param name="tolerance">The tolerance (0 - 100) </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Image()">
            <summary>Gets or sets the AtalaImage to return apply the colormatching to.</summary>
            <returns>The AtalaImage to return apply the colormatching to. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Progress()">
            <summary>Gets or sets the progress callback.</summary>
            <returns>The progress callback.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.CropCommand">
            <summary>Creates a new image from a rectangular section in the source image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand._ctor(System.Drawing.Rectangle)">
            <summary>Initializes a new instance of CropCommand specifying the crop rectangle.</summary>
            <param name="cropRect">The rectangular portion of the source image to copy into a new image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the CropCommand using the current settings to the source image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.CropRect()">
            <summary><![CDATA[Gets or sets the rectangular portion of the source image to copy into a new image.]]></summary>
            <returns>The rectangular portion of the source image to copy into a new image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Histogram">
            <summary><![CDATA[This command is used to represent the number of unique color channel values or brightness values be returning a 256 element array containing the number of pixels at the value signified by the array index.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor">
            <summary>Initializes a new instance of the Histogram object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of the Histogram object.</summary>
            <param name="image">The image to evaluate. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the Histogram object.</summary>
            <param name="image">The image to evaluate. </param>
            <param name="progress">The progress callback. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetBrightnessHistogram">
            <summary>Returns an array containing a histogram of brightness values in the image.</summary>
            <returns>An array containing a histogram of brightness values in the image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetChannelHistogram(System.Int32)">
            <summary>Returns an array containing a histogram of color values from a particular channel in the image. </summary>
            <returns>An array containing a histogram of color values from a particular channel in the image.</returns>
            <param name="channelIndex"><![CDATA[The zero based channel index to evaluate.  (0 - 3)]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetDocumentHistogram">
            <summary>Returns a 2 element array containing the number of black and white pixels in a binary image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Image()">
            <summary>Gets or sets the image to evaluate.</summary>
            <returns>The image to evaluate.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Progress()">
            <summary><![CDATA[Gets or sets the progress delegate.  ]]></summary>
            <returns><![CDATA[The progress delegate.  ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <summary>Represents the base class for all image processing routines that modify image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the command to the source AtalaImage.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image.  For commandTypes that do not return an image, set this to null. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.  For command types that do not require a source image, set this to null.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.InPlaceProcessing()">
            <summary>Gets or sets a value indicating if the source image data is processed in-pace as opposed to returning a new image.</summary>
            <returns><![CDATA[A value indicating if the source image data is processed in-pace as opposed to returning a new image.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.Progress()">
            <summary><![CDATA[Gets or sets the ProgressEventHandler delegate which can be used to view or cancel the progress of the current process.]]></summary>
            <returns><![CDATA[The ProgressEventHandler delegate which can be used to view or cancel the progress of the current process.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand">
            <summary>Derives from ImageCommand and adds region of interest capability to ImageCommands.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest()">
            <summary><![CDATA[Gets or sets a RegionOfInterest which will only process the indicated region of the image.]]></summary>
            <returns><![CDATA[A RegionOfInterest which will only process the indicated region of the image.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.LosslessJpeg">
            <summary>This class performs lossless transformations on JPEG images.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform">
            <summary>Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be performed without cropping the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be performed without cropping the image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="transform">The transform to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be performed without cropping the image.</summary>
            <param name="source">The source image file.</param>
            <param name="transform">The transform to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop">
            <summary>Performs a lossless crop on a JPEG image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle)">
            <summary>Performs a lossless crop on a JPEG image. </summary>
            <param name="source">The source image Stream. </param>
            <param name="dest">The destination image Stream. </param>
            <param name="cropRectangle">The crop rectangle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Performs a lossless crop on a JPEG image. </summary>
            <param name="source">The source image Stream. </param>
            <param name="dest">The destination image Stream. </param>
            <param name="cropRectangle">The crop rectangle.</param>
            <param name="flags">The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle)">
            <summary>Performs a lossless crop on a JPEG image. </summary>
            <param name="source">The source image file. </param>
            <param name="dest">The destination image filename. </param>
            <param name="cropRectangle">The crop rectangle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Performs a lossless crop on a JPEG image. </summary>
            <param name="source">The source image file. </param>
            <param name="dest">The destination image filename. </param>
            <param name="cropRectangle">The crop rectangle.</param>
            <param name="flags">The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize">
            <summary>Get the compression block size for a JPG file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.IO.Stream)">
            <summary>Get the compression block size for a JPG file. </summary>
            <param name="source">The source image Stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.String)">
            <summary>Get the compression block size for a JPG file. </summary>
            <param name="source">The source image file. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform">
            <summary>Perform a lossless transform on a JPEG image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Perform a lossless transform on a JPEG image. </summary>
            <param name="source">The source image Stream. </param>
            <param name="dest">The destination image Stream. </param>
            <param name="type">The transform type to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Perform a lossless transform on a JPEG image. </summary>
            <param name="source">The source image Stream. </param>
            <param name="dest">The destination image Stream. </param>
            <param name="type">The transform type to apply.</param>
            <param name="flags">The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Perform a lossless transform on a JPEG image. </summary>
            <param name="source">The source image file. </param>
            <param name="dest">The destination image filename.</param>
            <param name="type">The transform type to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Perform a lossless transform on a JPEG image. </summary>
            <param name="source">The source image file. </param>
            <param name="dest">The destination image filename.</param>
            <param name="type">The transform type to apply.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator">
            <summary>Creates a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor">
            <summary>Initializes a new instance of NoiseGenerator.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor()">
            <summary>Initializes a new instance of NoiseGenerator.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size,System.Double)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size and scale.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size, scale and mode.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
            <param name="mode"><![CDATA[The type of noise to create.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator._ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode,System.Drawing.Color)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size, scale, mode and base color.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
            <param name="mode"><![CDATA[The type of noise to create.]]></param>
            <param name="baseColor">The color of the image prior to adding noise. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
            <summary>Create a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage()">
            <summary>Create a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Double)">
            <summary>Create a new image containing noise specifying the z-offset of dimensional slice noise.</summary>
            <param name="zOffset">The z-axis offset used for DimensionSlice noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Int32,System.Double)">
            <summary>Create a new image containing noise specifying the octaves and persistance.</summary>
            <param name="octaves">The number of waves contributing to the noise.</param>
            <param name="persistence">Controls the smoothness. (0 to 10)</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.BaseColor()">
            <summary>Gets or sets the color of the image prior to adding noise.</summary>
            <returns>The color of the image prior to adding noise. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.ImageSize()">
            <summary><![CDATA[Gets or sets the size of the resulting image containing noise.]]></summary>
            <returns>The size of the resulting image containing noise.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Mode()">
            <summary><![CDATA[Gets or sets the type of noise to create.]]></summary>
            <returns><![CDATA[The type of noise to create.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Scale()">
            <summary>Gets or sets the size of the noise.</summary>
            <returns><![CDATA[The size of the noise.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand">
            <summary>Overlays or draws a specified image onto the source image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor">
            <summary>Initializes a new instance of OverlayCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image and position.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="position">Gets or sets the position of the top image onto the source image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Drawing.Color)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image, position and a transparent color.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="position">Gets or sets the position of the top image onto the source image. </param>
            <param name="transparentColor">The color that will be used as a transparent mask for the top image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Double)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image, position and an opacity of the top image.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="position">Gets or sets the position of the top image onto the source image. </param>
            <param name="opacity"><![CDATA[The opacity of the top image.  (0 - 1) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image, position and a transparent color index.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="position">Gets or sets the position of the top image onto the source image. </param>
            <param name="transparentIndex">The palette index that will be used as a transparent mask for the top image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this OverlayCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[null (Nothing in Visual Basic) ]]></returns>
            <param name="bottomImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Opacity()">
            <summary>Gets or sets the opacity of the top image.</summary>
            <returns>The opacity of the top image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Position()">
            <summary>Gets or sets the position of the top image onto the source image. </summary>
            <returns>The position of the top image onto the source image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TopImage()">
            <summary>Gets or sets the image that will be overlayed onto the source image.</summary>
            <returns>The image that will be overlayed onto the source image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor()">
            <summary>Gets or sets the color that will be used as a transparent mask for the top image. </summary>
            <returns>The color that will be used as a transparent mask for the top image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentIndex()">
            <summary>Gets or sets the palette index that will be used as a transparent mask for the top image. </summary>
            <returns>The palette index that will be used as a transparent mask for the top image. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand">
            <summary><![CDATA[Overlay a specified image onto the source image using an 8-bit grayscale mask image to control the transparency of the overlay.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor">
            <summary>Initializes a new instance of OverlayMaskedCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of OverlayMaskedCommand specifying the top image and alpha mask. </summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="alphaMask"><![CDATA[The 8-bit grayscale image representing the transparency of the overlay. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Initializes a new instance of OverlayMaskedCommand specifying the top image and alpha mask and position of the top image.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="alphaMask"><![CDATA[The 8-bit grayscale image representing the transparency of the overlay. ]]></param>
            <param name="position">The position of the top image onto the source image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this OverlayMaskedCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[null (Nothing in Visual Basic) ]]></returns>
            <param name="bottomImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.AlphaMask()">
            <summary><![CDATA[Gets or sets the 8-bit grayscale image representing the transparency of the overlay.]]></summary>
            <returns><![CDATA[The 8-bit grayscale image representing the transparency of the overlay.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Position()">
            <summary>Gets or sets the position of the top image onto the source image. </summary>
            <returns>The position of the top image onto the source image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.TopImage()">
            <summary>Gets or sets the image that will be overlayed onto the source image. </summary>
            <returns>The image that will be overlayed onto the source image. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand">
            <summary><![CDATA[Merge two images of the same PixelFormat together speciftying various merge types.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor">
            <summary>Initializes a new instance of OverlayMergedCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying the top image, and the merge option. </summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged together. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying the top image, position of the image, and the merge option.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="position">The position of the top image onto the source image. </param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged together. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption,System.Double)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying the top image, position of the image, the merge option, and a factor used for some merge options.</summary>
            <param name="topImage">The image that will be overlayed onto the source image. </param>
            <param name="position">The position of the top image onto the source image. </param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged together. </param>
            <param name="factor"><![CDATA[A factor applied to some of the merge options.  For example when using the Fast merge option, this value would be opacity (0 to 1).]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this OverlayMergedCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[null (Nothing in Visual Basic) ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Factor()">
            <summary><![CDATA[Gets or sets a factor applied to some of the merge options.]]></summary>
            <returns><![CDATA[A factor applied to some of the merge options.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.MergeOption()">
            <summary>Gets or sets a value indicating how the top and bottom pixels wil be merged together. </summary>
            <returns><![CDATA[A value indicating how the top and bottom pixels wil be merged together. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Position()">
            <summary>Gets or sets the position of the top image onto the source image. </summary>
            <returns>The position of the top image onto the source image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.TopImage()">
            <summary>Gets or sets the image that will be overlayed onto the source image. </summary>
            <returns>The image that will be overlayed onto the source image. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.RegionOfInterest">
            <summary><![CDATA[This object can be passed into most ImageCommands to indicate a region of the image to process.  Any shaped region can be used by specifying a System.Drawing.Region object or a simple System.Drawing.Rectangle.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest._ctor">
            <summary>Initializes a new instance of RegionOfInterest. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest._ctor(System.Drawing.Rectangle)">
            <summary>Initializes a new instance of RegionOfInterest specifying a simple rectangle to use as the region.</summary>
            <param name="rect"><![CDATA[The rectangular area of the image to process.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest._ctor(System.Drawing.Region)">
            <summary><![CDATA[Initializes a new instance of RegionOfInterest specifying a .NET Region object to use as the region.]]></summary>
            <param name="region">The Region used to specify the portion of an image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.IsSimpleRegion">
            <summary><![CDATA[Returns true if the Region is a simple rectangle.]]></summary>
            <returns><![CDATA[true if the Region is a simple rectangle.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Region()">
            <summary>Gets or sets the Region used to specify the portion of an image to process.</summary>
            <returns>The Region used to specify the portion of an image to process.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.SmoothingLevel()">
            <summary>Gets or sets the smoothing level of the region.</summary>
            <returns>the smoothing level of the region. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand">
            <summary><![CDATA[Resamples the source 8-bit colormapped image to a 24-bit RGB to the specified dimensions. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying the source rectangle, destination size, and resampling method. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying the maximum width or height using the defailt resampling method. </summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying final size and resampling method. </summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio. </param>
            <param name="method">The resampling algorithm to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying the source rectangle, destination size, and resampling method. </summary>
            <param name="sourceRect">The rectangular region of the source image that will be resized. </param>
            <param name="destSize">The final size of the image. </param>
            <param name="method">The resampling algorithm to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying final size and using the the default resampling method. </summary>
            <param name="destSize">The final size of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying final size and resampling method. </summary>
            <param name="destSize">The final size of the image. </param>
            <param name="method">The resampling algorithm to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the this ResampleColormappedToRgbCommand using the current settings to the source image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image.  null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize()">
            <summary>Gets or sets the final size of the image. </summary>
            <returns>The final size of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize()">
            <summary>Gets or sets the width of height value for resizing while maintaining the aspect ratio.</summary>
            <returns>The width of height value for resizing while maintaining the aspect ratio.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Method()">
            <summary>Gets or sets the the resampling algorithm to apply. </summary>
            <returns>The resampling algorithn to apply.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SourceRect()">
            <summary>Gets or sets the rectangular region of the source image that will be resized. </summary>
            <returns>The rectangular region of the source image that will be resized.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand">
            <summary>Resamples the source image to the specified dimensions.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor">
            <summary>Initializes a new instance of ResampleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Int32)">
            <summary>Initializes a new instance of ResampleCommand specifying the maximum width or height using the defailt resampling method. </summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying final size and resampling method. </summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying the source rectangle, destination size, and resampling method. </summary>
            <param name="sourceRect">The rectangular region of the source image that will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of ResampleCommand specifying final size and using the the default resampling method. </summary>
            <param name="destSize">The final size of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand._ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying final size and resampling method. </summary>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this ResampleCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image or null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.DestSize()">
            <summary>Gets or sets the final size of the image. </summary>
            <returns>The final size of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.MaxSize()">
            <summary>Gets or sets the width of height value for resizing while maintaining the aspect ratio. </summary>
            <returns>The width of height value for resizing while maintaining the aspect ratio. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.Method()">
            <summary>Gets or sets the the resampling algorithm to apply. </summary>
            <returns>The resampling algorithm to apply. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SourceRect()">
            <summary>Gets or sets the rectangular region of the source image that will be resized. </summary>
            <returns>The rectangular region of the source image that will be resized.</returns>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Channels">
            <summary>Contains classes that directly manipulate image channels and colors.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand">
            <summary>This method may be used to adjust a channel by adding or subtracting a literal value or percentage. A negative value will reduce the amount of that channel and a positive value will increase it. A value of 0 will have no effect. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the AdjustChannelCommand class. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double)">
            <summary><![CDATA[Initializes a new instance of the AdjustChannelCommand class. ]]></summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value. </param>
            <param name="channel1"><![CDATA[Amount to adjust the first channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double,System.Double)">
            <summary><![CDATA[Initializes a new instance of the AdjustChannelCommand class. ]]></summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value. </param>
            <param name="channel1"><![CDATA[Amount to adjust the first channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="channel2"><![CDATA[Amount to adjust the second channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary><![CDATA[Initializes a new instance of the AdjustChannelCommand class. ]]></summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value. </param>
            <param name="channel1"><![CDATA[Amount to adjust the first channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="channel2"><![CDATA[Amount to adjust the second channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="channel3"><![CDATA[Amount to adjust the third channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._ctor(System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary><![CDATA[Initializes a new instance of the AdjustChannelCommand class. ]]></summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value. </param>
            <param name="channel1"><![CDATA[Amount to adjust the first channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="channel2"><![CDATA[Amount to adjust the second channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="channel3"><![CDATA[Amount to adjust the third channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="channel4"><![CDATA[Amount to adjust the fourth channel.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AdjustLiteral using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustByPercentage()">
            <summary>Gets or sets the value which determines if the channel values are considered a percentage rather than a literal value.</summary>
            <returns>The value which determines if the channel values are considered a percentage rather than a literal value.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel1()">
            <summary>Gets or sets the amount to adjust the first channel. </summary>
            <returns>Amount to adjust the first channel. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel2()">
            <summary><![CDATA[Gets or sets the amount to adjust the second channel. ]]></summary>
            <returns>Amount to adjust the second channel. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel3()">
            <summary><![CDATA[Gets or sets the amount to adjust the third channel. ]]></summary>
            <returns><![CDATA[Amount to adjust the third channel. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel4()">
            <summary><![CDATA[Gets or sets the amount to adjust the fourth channel. ]]></summary>
            <returns><![CDATA[Amount to adjust the fourth channel. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand">
            <summary><![CDATA[This method may be used to adjust the hue, staturation and luminance by adding or subtracting a literal value or percentage. A negative value will reduce the amount of that channel and a positive value will increase it. A value of 0 will have no effect. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand._ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary><![CDATA[Creates a new instance of AdjustHslCommand specifying hue, saturation, and luminance. ]]></summary>
            <param name="adjustByPercentage">Set to true if you want the hue, saturation and luminance values to be considered percentages.</param>
            <param name="hue"><![CDATA[Amount to adjust the Hue.  Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="saturation"><![CDATA[Amount to adjust the Saturation. Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
            <param name="luminance"><![CDATA[Amount to adjust the Luminance. Valid values are 0 to 100 when using percentage and 0 to 255 when using literal. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AdjustHslLiteral using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.hslToRgb(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Converts hue, Saturation and Luminance values to Red, Green and Blue.</summary>
            <param name="hue">hue</param>
            <param name="saturation">Saturation</param>
            <param name="luminance">Luminance</param>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.rgbToHsl(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Converts Red, Green and Blue values to hue, Saturation and Luminance.</summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <param name="hue">hue</param>
            <param name="saturation">Saturation</param>
            <param name="luminance">Luminance</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustByPercentage()">
            <summary>Gets or sets a value to indicate if the hue, saturation and luminance values will be considered percentages instead of literal values.</summary>
            <returns><![CDATA[A value to indicate if the hue, saturation and luminance values will be considered percentages instead of literal values.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Hue()">
            <summary>Gets or sets the value of hue.</summary>
            <returns>Amount to adjust the Hue.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Luminance()">
            <summary>Gets or sets the value of luminance.</summary>
            <returns>Amount to adjust the Luminance.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Saturation()">
            <summary>Gets or sets the value of saturation.</summary>
            <returns>Amount to adjust the Saturation.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand">
            <summary><![CDATA[Apply a Look-Up-Table to an image.  A Look-Up-Table is an array of 256 byte values which are used to substitute for the image pixel data.  This allows you to modify each pixel component value.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor">
            <summary>Create a new instance of the ApplyLutCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[])">
            <summary><![CDATA[Creates a new instance of ApplyLutCommand specifying channel1.  ]]></summary>
            <param name="channel1"><![CDATA[An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[],System.Byte[])">
            <summary><![CDATA[Creates a new instance of ApplyLutCommand specifying channel1 and channel2. ]]></summary>
            <param name="channel1"><![CDATA[An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic). ]]></param>
            <param name="channel2"><![CDATA[An array of 256 bytes, representing the second color channel. This can be null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary><![CDATA[Creates a new instance of ApplyLutCommand specifying channel1, channel2 and channel3. ]]></summary>
            <param name="channel1"><![CDATA[An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic). ]]></param>
            <param name="channel2"><![CDATA[An array of 256 bytes, representing the second color channel. This can be null (Nothing in Visual Basic). ]]></param>
            <param name="channel3"><![CDATA[An array of 256 bytes, representing the third color channel. This can be null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary><![CDATA[Creates a new instance of ApplyLutCommand specifying channel1, channel2, channel3, and channel4. ]]></summary>
            <param name="channel1"><![CDATA[An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic). ]]></param>
            <param name="channel2"><![CDATA[An array of 256 bytes, representing the second color channel. This can be null (Nothing in Visual Basic). ]]></param>
            <param name="channel3"><![CDATA[An array of 256 bytes, representing the third color channel. This can be null (Nothing in Visual Basic). ]]></param>
            <param name="channel4"><![CDATA[An array of 256 bytes, representing the fourth color channel. This can be null (Nothing in Visual Basic). ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies ApplyLookUpTable using the current settings to the source image. ]]></summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Returns the look-up-table for a single channel.</summary>
            <param name="channel">The channel you want to retrieve the look-up-table from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
            <summary>Sets the look-up-table for a single channel.</summary>
            <param name="channel">The channel you want to set.</param>
            <param name="lut">The look-up-table byte array.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand">
            <summary><![CDATA[This command will remove the alpha information from an image by blending the transparent areas with a solid color.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand._ctor(System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of FlattenAlphaCommand specifying the color. ]]></summary>
            <param name="color">The background color to blend with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies FlattenAlphaCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.Color()">
            <summary>Gets or sets the color to use for the transparent areas of the image.</summary>
            <returns>The color to use for the transparent areas of the image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand">
            <summary><![CDATA[Use this command to invert the image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand._ctor">
            <summary><![CDATA[Creates a new instance of the InvertCommand class. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies an InvertCommand using the current settings to the source image. ]]></summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag specifying which channels to process.</summary>
            <returns><![CDATA[A bit flag specifying which channels to process.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand">
            <summary>This command allows you to replace the channels of an existing image by substituting the channel values with those of an 8-bit grayscale image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand._ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary><![CDATA[Creates a new instance of the ReplaceChannelCommand object.<crlf>Creates a new instance of <A>ReplaceChannel</A>Command specifying channel1Image and channel2Image.<crlf>Creates a new instance of <A>ReplaceChannel</A>Command specifying channel1Image, channel2Image and channel3Image. <crlf>Creates a new instance of <A>ReplaceChannel</A>Command specifying channel1Image, channel2Image, channel3Image, and channel4Image. ]]></summary>
            <param name="channelImage"><![CDATA[A parameter array of graysacle AtalaImage's representing each channel in the image. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ReplaceChannel using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel1Image()">
            <summary><![CDATA[Gets or sets a grayscale image to represent the first channel. Set this to null if you want to skip this channel. ]]></summary>
            <returns><![CDATA[A grayscale image to represent the first channel. Set this to null if you want to skip this channel. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel2Image()">
            <summary>Gets or sets an 8-bit image to represent the second channel. Set this to null if you want to skip this channel. </summary>
            <returns>An 8-bit image to represent the second channel. Set this to null if you want to skip this channel.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel3Image()">
            <summary>Gets or sets an 8-bit image to represent the third channel. Set this to null if you want to skip this channel. </summary>
            <returns>An 8-bit image to represent the third channel. Set this to null if you want to skip this channel.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel4Image()">
            <summary>Gets or sets an 8-bit image to represent the fourth channel. Set this to null if you want to skip this channel. </summary>
            <returns>An 8-bit image to represent the fourth channel. Set this to null if you want to skip this channel.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand">
            <summary><![CDATA[This command will create an alpha channel for an image based on a color value.  If the image already contains alpha information, the color will be blended into it.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor">
            <summary><![CDATA[Creates a new instance of the SetAlphaColorCommand object.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaColor</A> specifying color. ]]></summary>
            <param name="color">Color used to create the alpha channel. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color,System.Double)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaColor</A> specifying color and tolerance.]]></summary>
            <param name="color">Color used to create the alpha channel. </param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 - 1)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaColor</A> specifying color, tolerance, and merge type.]]></summary>
            <param name="color">Color used to create the alpha channel. </param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 - 1)</param>
            <param name="mergeType">The type of merge performed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand._ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Int32,System.Int32)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaColor</A> specifying color, tolerance, merge type, matching alpha, and non-matching alpha.]]></summary>
            <param name="color">Color used to create the alpha channel. </param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 - 1)</param>
            <param name="mergeType">The type of merge performed. </param>
            <param name="matchAlpha"><![CDATA[The alpha value to use when a match of the color is found.  (0 - 255)]]></param>
            <param name="nonMatchAlpha"><![CDATA[The alpha value to use when a match of the color is not found.  (0 - 255)]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SetAlphaColor using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Color()">
            <summary>Gets or sets the color used to create the alpha channel. </summary>
            <returns>Color used to create the alpha channel.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MatchAlpha()">
            <summary>Gets or sets the alpha value to use when a match of the color is found. </summary>
            <returns>The alpha value to use when a match of the color is found.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MergeType()">
            <summary>Gets or sets the type of merge performed. </summary>
            <returns>The type of merge performed.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.NonMatchAlpha()">
            <summary>Gets or sets the alpha value to use when a match of the color is not found.</summary>
            <returns>The alpha value to use when a match of the color is not found.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Tolerance()">
            <summary>Gets or sets the tolerance percentage for finding matching colors. </summary>
            <returns>Tolerance percentage for finding matching colors.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand">
            <summary><![CDATA[Creates an alpha channel for an image using an 8-bit grayscale mask image to control transparency.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor">
            <summary>Creates a new instance of the SetAlphaFromMaskCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaFromMask</A> specifying maskImage, resizeMask and mergeType. ]]></summary>
            <param name="maskImage">An 8-bit image used to generate the alpha channel.</param>
            <param name="resizeMask">Set to true if the mask should be resized to fit the image.</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand._ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Drawing.Point)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaFromMask</A> specifying maskImage, resizeMask, mergeType and position. ]]></summary>
            <param name="maskImage">An 8-bit image used to generate the alpha channel. </param>
            <param name="resizeMask">Set to true if the mask should be resized to fit the image. </param>
            <param name="mergeType">The type of merge performed. </param>
            <param name="position">The x,y position to place the mask image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SetAlphaFromMask using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MaskImage()">
            <summary>Gets or sets an 8-bit image used to generate the alpha channel. </summary>
            <returns>An 8-bit image used to generate the alpha channel.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MergeType()">
            <summary>Gets or sets the type of merge performed. </summary>
            <returns>The type of merge performed.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.Position()">
            <summary>Gets or sets the left, top position of the mask image.</summary>
            <returns>The left, top position of the mask image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ResizeMask()">
            <summary><![CDATA[Gets or sets a valid to indicate if the mask should be resized to fit the image. ]]></summary>
            <returns>Set to true if the mask should be resized to fit the image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand">
            <summary><![CDATA[This command will create an alpha channel based on a numeric value.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand._ctor(System.Byte,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary><![CDATA[Creates a new instance of <A>SetAlphaValue</A> specifying alphaValue, and mergeType. ]]></summary>
            <param name="alphaValue">A value of 0 to 255 indicating the opacity to use on the alpha channel.</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SetAlphaValue using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AlphaValue()">
            <summary><![CDATA[Gets or sets a value of 0 to 255 indicating the opacity to use on the alpha channel. ]]></summary>
            <returns>A value of 0 to 255 indicating the opacity to use on the alpha channel.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.MergeType()">
            <summary>Gets or sets the type of merge performed. </summary>
            <returns>The type of merge performed.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand">
            <summary>This command will shift individual image channels.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor">
            <summary><![CDATA[Creates a new instance of the ShiftChannelsCommand class. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary><![CDATA[Creates a new instance of ShiftChannelsCommand specifying offsetX, offsetY, channelsToProcess and backgroundValue. ]]></summary>
            <param name="offsetX">Number of pixels to horizontally offset the channels. </param>
            <param name="offsetY">Number of pixels to vertically offset the channels. </param>
            <param name="channelsToProcess">The channels you want to shift. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32)">
            <summary><![CDATA[Creates a new instance of ShiftChannelsCommand specifying offsetX, offsetY, channelsToProcess and backgroundValue. ]]></summary>
            <param name="offsetX">Number of pixels to horizontally offset the channels. </param>
            <param name="offsetY">Number of pixels to vertically offset the channels. </param>
            <param name="channelsToProcess">The channels you want to shift.</param>
            <param name="backgroundValue"><![CDATA[A value used for uncovered areas of the image.  (0 - 255) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ShiftChannel using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.BackgroundValue()">
            <summary><![CDATA[Gets or set a channel value to use for uncovered channel areas of the image.  ]]></summary>
            <returns><![CDATA[A value to use for uncovered channel areas of the image.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ChannelsToProcess()">
            <summary>Gets or sets the ChannelFlags specifying which channels to process. </summary>
            <returns><![CDATA[The ChannelFlags specifying which channels to process.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetX()">
            <summary>Gets or sets the number of pixels to horizontally offset the channels. </summary>
            <returns>Number of pixels to horizontally offset the channels. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetY()">
            <summary>Gets or sets the number of pixels to vertically offset the channels. </summary>
            <returns>Number of pixels to vertically offset the channels. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand">
            <summary>Swaps one channel with another channel within the same image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand._ctor(System.Int32[])">
            <summary><![CDATA[Creates a new instance of the SwapChannelsCommand object.<crlf>Creates a new instance of SwapChannel specifying channel1, channel2 and channel3. <crlf>Creates a new instance of SwapChannel specifying channel1, channel2, channel3, and channel4.<crlf>Creates a new instance of SwapChannel specifying a param array of channels. ]]></summary>
            <param name="channel"><![CDATA[A parameter array of the channel orders.  Values must be between 1 and 4.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SwapChannel using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel1()">
            <summary>Gets or sets the first channel in the image. Valid values are 1-4. </summary>
            <returns>The first channel in the image. Valid values are 1-4. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel2()">
            <summary>Gets or sets the second channel in the image. Valid values are 1-4. </summary>
            <returns><![CDATA[The second channel in the image. Valid values are 1-4. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel3()">
            <summary>Gets or sets the third channel in the image. Valid values are 1-4. </summary>
            <returns><![CDATA[The third channel in the image. Valid values are 1-4. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel4()">
            <summary>Gets or sets the fourth channel in the image. Valid values are 1-4. </summary>
            <returns><![CDATA[The fourth channel in the image. Valid values are 1-4. ]]></returns>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Document">
            <summary><![CDATA[Contains classes that are designed to be used with 1-bit document (binary) images.   Theses classes are enabled in the professional edition. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode">
            <summary>The crop mode to use in the AutoDeskewCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.None">
            <summary><![CDATA[Do not crop the deskewed image.  The resulting image will be larger then the source image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.FullCrop">
            <summary><![CDATA[Crop all of the excess rotated area.  The resulting image will be smaller then the source image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.OriginalSize">
            <summary>Crop the deskewed image to the original size.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode">
            <summary>The type of morphological filter to use in the MorphoDocumentCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Dilation">
            <summary><![CDATA[Used to smooth small dark regions tending to enhance black features in the image. ]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Erosion">
            <summary><![CDATA[Used to smooth small light regions tending to reduce black features in the image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Open">
            <summary>The dilation of the erosion of the image used to reduce small black regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Close">
            <summary>The erosion of the dilation of the image used to reduce small white regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.BoundaryExtraction">
            <summary><![CDATA[Perform a boundary detection/extraction on a binary image.  This will generate an outline of the foreground features of the input image ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod">
            <summary>Specifies the resampling method to apply using the ResampleDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.NearestNeighbor">
            <summary>Uses the color value of the closest neighbor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.ScaleToGray">
            <summary><![CDATA[Converts the 1-bit binary image to grayscale as it resizes which retains the visual detail of the image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.AreaAverage">
            <summary><![CDATA[Performs an area average of the binary image with a specified "cut-off" factor that will favor black or white pixels.  Valid for reductions only.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand">
            <summary><![CDATA[Automatically deskews a binary image using Atalasoft's proprietary auto-deskewing algorithm. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor">
            <summary><![CDATA[Initializes a new instance of <A>the</A> AutoDeskewCommand.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor()">
            <summary><![CDATA[Initializes a new instance of <A>the</A> AutoDeskewCommand with default settings]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Int32,System.Int32)">
            <summary><![CDATA[Initializes a new instance of <A>the</A> AutoDeskewCommand specifying the precision and limit angle.]]></summary>
            <param name="precision"><![CDATA[The precision of the deskew angle calculation.  This value is the inverse of the degree precision. ]]></param>
            <param name="limitAngle">The maximum deskew angle in degrees. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary><![CDATA[Initializes a new instance of <A>the</A> AutoDeskewCommand specifying the precision, limit angle, crop mode, background color, and rectangular area to process.]]></summary>
            <param name="precision"><![CDATA[The precision of the deskew angle calculation.  This value is the inverse of the degree precision. ]]></param>
            <param name="limitAngle">The maximum deskew angle in degrees. </param>
            <param name="cropMode">The method of cropping the resulting deskewed image. </param>
            <param name="backgroundColor"><![CDATA[The background color to use when deskewing the image. ]]></param>
            <param name="area">The rectangular area that will be used for determing the deskew angle. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary><![CDATA[Initializes a new instance of <A>the</A> AutoDeskewCommand specifying the precision, limit angle, and rectangular area to process.]]></summary>
            <param name="precision"><![CDATA[The precision of the deskew angle calculation.  This value is the inverse of the degree precision. ]]></param>
            <param name="limitAngle">The maximum deskew angle in degrees. </param>
            <param name="area">The rectangular area that will be used for determing the deskew angle. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._ctor(System.Drawing.Rectangle)">
            <summary><![CDATA[Initializes a new instance of <A>the</A> AutoDeskewCommand with default settings and a rectangular area to process. ]]></summary>
            <param name="area">A rectangular area that will be used for determining the deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AutoDeskewCommand using the current settings to the source image. </summary>
            <returns><![CDATA[A new Atalasoft.Imaging.AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetDeskewAngle(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns the skew angle of the image without changing the image at all.</summary>
            <returns>The skew angle of the image.</returns>
            <param name="sourceImage">The image to calculate the skew angle from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Area()">
            <summary>Gets or sets the rectangular area that will be used for determing the deskew angle.</summary>
            <returns>The rectangular area that will be used for determing the deskew angle.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.BackgroundColor()">
            <summary>Gets or sets the background color to use when deskewing the image.</summary>
            <returns><![CDATA[The background color to use when deskewing the image. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.CropMode()">
            <summary>Gets or sets a value indicating the method of cropping the resulting deskewed image.</summary>
            <returns><![CDATA[A value indicating the method of cropping the resulting deskewed image.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.LimitAngle()">
            <summary>Gets or sets the maximum deskew angle in degrees.</summary>
            <returns>The maximum deskew angle in degrees. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Precision()">
            <summary>Gets or sets the precision of the deskew angle calculation. </summary>
            <returns>The precision of the deskew angle calculation.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand">
            <summary><![CDATA[Perform a hit-or-miss transformation on a binary image. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary><![CDATA[Create a new instance of DocumentHitOrMissCommand.<crlf>Create a new instance of DocumentHitOrMissCommand specifying foregroundMask and backgroundMask.<crlf>Create a new instance of DocumentHitOrMissCommand specifying foregroundMask, backgroundMask and regionOfInterest.]]></summary>
            <param name="foregroundMask">A matrix of integer values to act as the foreground mask.</param>
            <param name="backgroundMask">A matrix of integer values to act as the background mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <returns><![CDATA[Applies DocumentHitOrMissCommand to the source image. ]]></returns>
            <param name="sourceImage">The source image which will be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.BackgroundMask()">
            <summary><![CDATA[Gets or sets a matrix of integer values to act as the background mask.]]></summary>
            <returns>A matrix of integer values to act as the background mask.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ForegroundMask()">
            <summary>Gets or sets a matrix of integer values to act as the foreground mask. </summary>
            <returns>A matrix of integer values to act as the foreground mask. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand">
            <summary>Applies a median filter to a binary image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand._ctor">
            <summary><![CDATA[Creates a new instance of DocumentMedianCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand._ctor()">
            <summary><![CDATA[Creates a new instance of DocumentMedianCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand._ctor(System.Int32)">
            <summary><![CDATA[Creates a new instance of DocumentMedianCommand specifying filterSize. ]]></summary>
            <param name="filterSize">The size of the filter to use for this command. (3, 5, 7, etc)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies DocumentMedianCommand to the source image. ]]></summary>
            <param name="sourceImage">The source image to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.FilterSize()">
            <summary>Gets or sets the size of the filter to use for this command. </summary>
            <returns>The size of the filter to use for this command. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand">
            <summary>Apply morphological thinning to a 1-bit image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand._ctor">
            <summary>Creates a new instance of DocumentThinningCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand._ctor()">
            <summary>Creates a new instance of DocumentThinningCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[],Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <summary>Creates a new instance of DocumentThinningCommand specifying foregroundMask and backgroundMask.</summary>
            <param name="foregroundMask">A matrix array of integer values to act as the foreground mask.</param>
            <param name="backgroundMask">A matrix array of integer values to act as the background mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies DocumentThinningCommand to the source image.</summary>
            <param name="sourceImage">The source image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetBackgroundMask">
            <summary>Returns the background mask.</summary>
            <returns>A IntegerMatrix object containing the mask values.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetForegroundMask">
            <summary>Returns the foreground mask.</summary>
            <returns>A IntegerMatrix object containing the mask values. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetBackgroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns>Sets the background mask to use.</returns>
            <param name="mask">A IntegerMatrix object containing the mask values. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetForegroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns>Sets the foreground mask to use.</returns>
            <param name="mask">A IntegerMatrix object containing the mask values. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.MaxIterations()">
            <summary>Gets or sets the maximum number of iterations to use when processing the image. </summary>
            <returns>The maximum number of iterations to use when processing the image. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand">
            <summary><![CDATA[This class will perform a mathematical morphological operation to a binary image. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor">
            <summary>Create a new instance of MorphoDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode)">
            <summary>Create a new instance of MorphoDocumentCommand specifying mode.</summary>
            <param name="mode">The type of morphological filter to perform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand._ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Create a new instance of MorphoDocumentCommand specifying mode and mask.</summary>
            <param name="mode">The type of morphological filter to perform.</param>
            <param name="mask">A matrix of integers controlling the behavior and depth of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <returns>Applies MorphoDocumentCommand to the source image.</returns>
            <param name="sourceImage">The source image to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mask()">
            <summary><![CDATA[Gets or sets a matrix of integers controlling the behavior and depth of the filter.]]></summary>
            <returns>A matrix of integers controlling the behavior and depth of the filter.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mode()">
            <summary>Gets or set the type of morphological filter to perform.</summary>
            <returns>The type of morphological filter to perform.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand">
            <summary>Overlay a image using an alpha mask.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand specifying topImage and mask.</summary>
            <param name="topImage">The top binary image to overlay. </param>
            <param name="mask"><![CDATA[A binary image indicating the transparent and opaque regions of the overlay. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand specifying topImage, mask and position.</summary>
            <param name="topImage"><![CDATA[The top binary image to overlay. ]]></param>
            <param name="mask"><![CDATA[A binary image indicating the transparent and opaque regions of the overlay. ]]></param>
            <param name="position">The position of the top image on the bottom image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies OverlayMaskedDocumentCommand to the source image.</summary>
            <returns>Null</returns>
            <param name="bottomImage">The source image to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.InPlaceProcessing()">
            <summary>Gets a value indicating if the image is processed in place instead of generating a new image.</summary>
            <returns><![CDATA[A value indicating if the image is processed in place instead of generating a new image.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Mask()">
            <summary>Gets or sets the 1-bit image indicating the transparent and opaque regions of the overlay.</summary>
            <returns>The 1-bit image indicating the transparent and opaque regions of the overlay.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Position()">
            <summary>Gets or sets the position of the top image on the bottom image.</summary>
            <returns>The position of the top image on the bottom image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.TopImage()">
            <summary>Gets or sets the top 1-bit image to overlay.</summary>
            <returns>The top 1-bit image to overlay.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand">
            <summary>Resamples a a binary image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor">
            <summary><![CDATA[Creates a new instance of ResampleDocumentCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod)">
            <summary><![CDATA[Creates a new instance of ResampleDocumentCommand specifying sourceRect, destSize and documentMethod. ]]></summary>
            <param name="sourceRect">The rectangular region of the source image which will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="documentMethod">The 1-bit specialized resampling method to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod,System.Int32)">
            <summary><![CDATA[Creates a new instance of ResampleDocumentCommand specifying sourceRect, destSize, documentMethod and cutOff. ]]></summary>
            <param name="sourceRect">The rectangular region of the source image which will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="documentMethod">The 1-bit specialized resampling method to apply.</param>
            <param name="cutOff">The grayscale value which is the cutoff value for a black pixel when using AreaAverage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary><![CDATA[Creates a new instance of ResampleDocumentCommand specifying sourceRect, destSize and scaleToGrayMethod. ]]></summary>
            <param name="sourceRect">The rectangular region of the source image which will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="scaleToGrayMethod">The ResampleMethod to apply when the ResampleDocumentMethod is ScaleToGray. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ResampleDocumentCommand to the source image.</summary>
            <param name="sourceImage">The source image to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.CutOff()">
            <summary>Gets or sets the grayscale value which is the cutoff value for a black pixel when using AreaAverage.</summary>
            <returns>The grayscale value which is the cutoff value for a black pixel when using AreaAverage.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DestSize()">
            <summary>Gets or sets the final size of the image.</summary>
            <returns>The final size of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DocumentMethod()">
            <summary>Gets or sets the 1-bit specialized resampling method to apply.</summary>
            <returns>The 1-bit specialized resampling method to apply.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ScaleToGrayMethod()">
            <summary>Gets or sets the ResampleMethod to apply when the DocumentMethod is ScaleToGray.</summary>
            <returns>The ResampleMethod to apply when the DocumentMethod is ScaleToGray.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SourceRect()">
            <summary>Gets or sets the rectangular region of the source image which will be resized.</summary>
            <returns>The rectangular region of the source image which will be resized.</returns>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Effects">
            <summary>Contains classes that produce an effect on the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType">
            <summary>Indicates the curve type used in the BrightnessContrastCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.ThreePoint">
            <summary>The three point curve emphasizes mid-tones more than the five or seven point curves. This is closest to the brightness / contrast that Adobe Photoshop uses.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.FivePoint">
            <summary>The default curve type for traditional Brightness/Contrast adjustment.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.SevenPoint">
            <summary><![CDATA[The seven point curve forces pixels in the extreme dark and light ranges to black or white faster than the five point curve. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode">
            <summary>Specifies the crackle mode to use in the CrackleCommand.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode">
            <summary><![CDATA[Indicates the type of effect to apply in the GauzyCommand.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Desaturated">
            <summary>Applies a desaturated effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.HighContrastForeground">
            <summary>Creates a high contrast effect on the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.FullColor">
            <summary>Applies a full color gauzy effect.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Max">
            <summary>Applies a maximum filter effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Min">
            <summary>Applies a minimum filter effect to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode">
            <summary><![CDATA[Indicates the type of blurring to use on the ScribbleCommand.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Blurred">
            <summary>Applies a blurring effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Filtered">
            <summary>Applies a filtered effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Posterized">
            <summary>Applies a posterized effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Despeckled">
            <summary>Applies a despeckle effect to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType">
            <summary><![CDATA[Indicates the type of blurring to use in the StippleCommand.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.ArithmeticMean">
            <summary>Applies an arithmetic mean filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Minimum">
            <summary>Applies a minimum filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Maximum">
            <summary>Applies a maximum filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.GeometricMean">
            <summary>Applies a geometric mean filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.YPMean">
            <summary>Applies a YP mean filter to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode">
            <summary><![CDATA[Indicates how to process the image in the StippleCommand.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.NoiseFirst">
            <summary>Applies the noise before the filter.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.FilterFirst">
            <summary>Applies the filter before adding the noise.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand">
            <summary><![CDATA[Adjusts the tint of an image by specifying a value.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand._ctor(System.Int32)">
            <summary><![CDATA[Creates a new instance of <A>AdjustTintCommand</A> specifying tint. ]]></summary>
            <param name="tint"><![CDATA[A value from -180 to +180.  Positive values enhance green, negative values enhance red. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies AdjustTintCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Tint()">
            <summary><![CDATA[Gets or sets a value from -180 to +180.  Positive values enhance green, negative values enhance red. ]]></summary>
            <returns><![CDATA[A value from -180 to +180.  Positive values enhance green, negative values enhance red. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand">
            <summary><![CDATA[Apply a bevel effect to the edges of an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand._ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary><![CDATA[Creates a new instance of BevelEdgeCommand.]]></summary>
            <param name="bevelSize">Size of the bevel along the edge, in pixels.</param>
            <param name="leftBrightness">Brightness level of the left facet. (0-255)</param>
            <param name="topBrightness">Brightness level of the top facet. (0-255)</param>
            <param name="rightBrightness">Brightness level of the right facet. (0-255)</param>
            <param name="bottomBrightness">Brightness level of the bottom facet. (0-255)</param>
            <param name="smoothFactor">Smooth the bevel edge. (0-500)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies BevelEdgeCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BevelSize()">
            <summary>Gets or sets the size of the bevel along the edge, in pixels. </summary>
            <returns>Size of the bevel along the edge, in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BottomBrightness()">
            <summary>Gets or sets the brightness level of the bottom facet. (0-255) </summary>
            <returns>Brightness level of the bottom facet. (0-255)</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.LeftBrightness()">
            <summary>Gets or sets the brightness level of the left facet. (0-255) </summary>
            <returns>Brightness level of the left facet. (0-255)</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.RightBrightness()">
            <summary>Gets or sets the brightness level of the right facet. (0-255) </summary>
            <returns>Brightness level of the right facet. (0-255)</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SmoothFactor()">
            <summary>Gets or sets the smooth the bevel edge. (0-500) </summary>
            <returns>Smooth the bevel edge. (0-500)</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.TopBrightness()">
            <summary>Gets or sets the brightness level of the top facet. (0-255) </summary>
            <returns>Brightness level of the top facet. (0-255)</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand">
            <summary>Modifies the brightness and/or contrast of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor">
            <summary>Initializes a new instance of BrightnessContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of BrightnessContrastCommand specifying the brightness and contrast.</summary>
            <param name="newBrightness"><![CDATA[ The percent to increase or decrease brightness. (-100 to 100) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand._ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType)">
            <summary>Initializes a new instance of BrightnessContrastCommand specifying the brightness, contrast, and curve shape.</summary>
            <param name="newBrightness"><![CDATA[ The percent to increase or decrease brightness. (-100 to 100) ]]></param>
            <param name="newContrast"><![CDATA[The percent to increase or decrease contrast. (-100 to 100) ]]></param>
            <param name="curveShape">The curve shape.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this BrightnessContrastCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[null (Nothing in Visual Basic) ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.CurveShape()">
            <summary><![CDATA[Gets or sets a value indicating the curve shape.]]></summary>
            <returns><![CDATA[A value indicating the curve shape.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewBrightness()">
            <summary><![CDATA[Gets or sets the percent to increase or decrease brightness. ]]></summary>
            <returns><![CDATA[ The percent to increase or decrease brightness. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewContrast()">
            <summary><![CDATA[Gets or sets the percent to increase or decrease contrast. ]]></summary>
            <returns><![CDATA[The percent to increase or decrease contrast. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand">
            <summary>Perform histogram equalization on an image while preventing colors from shifting. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand specifying the threshold values. </summary>
            <param name="lowThreshold">Pixels are uneffected below this value. (0 - 255) </param>
            <param name="highThreshold">Pixels are uneffected above this value. (0 - 255) </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.HighThreshold()">
            <summary>Gets or sets a high threshold value above which pixels are uneffected. </summary>
            <returns><![CDATA[A high threshold value above which pixels are uneffected. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.LowThreshold()">
            <summary><![CDATA[Gets or sets a low threshold value below which pixels are uneffected. ]]></summary>
            <returns><![CDATA[A low threshold value below which pixels are uneffected. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand">
            <summary><![CDATA[Performs a histogram stretch on an image while preventing colors from shifting. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor">
            <summary><![CDATA[Creates a new instance of BrightnessHistogramStretchCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor(System.Double,System.Double)">
            <summary><![CDATA[Creates a new instance of BrightnessHistogramStretchCommand specifying the limit values. ]]></summary>
            <param name="lowLimit"><![CDATA[Percent of pixels to set to 0. (0 to 100) ]]></param>
            <param name="highLimit"><![CDATA[Percent of pixels to set to 255. (0 to 100) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._ctor(System.Double,System.Double,System.Boolean)">
            <summary><![CDATA[Creates a new instance of BrightnessHistogramStretchCommand specifying the limit values and if the HSL colorspace should be used. ]]></summary>
            <param name="lowLimit"><![CDATA[Percent of pixels to set to 0. (0 to 100) ]]></param>
            <param name="highLimit"><![CDATA[Percent of pixels to set to 255. (0 to 100) ]]></param>
            <param name="hslColorSpace"><![CDATA[Indicates if the Histogram Stretch is performed in the HSL colorspace. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HighLimit()">
            <summary>Gets or sets the percent of pixels to set to 255. </summary>
            <returns>Percent of pixels to set to 255. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HslColorSpace()">
            <summary>Gets or sets a value indicating if the Histogram Stretch is performed in the HSL colorspace.</summary>
            <returns><![CDATA[A value indicating if the Histogram Stretch is performed in the HSL colorspace. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.LowLimit()">
            <summary>Gets or sets the percent of pixels to set to 0. </summary>
            <returns>Percent of pixels to set to 0. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand">
            <summary><![CDATA[Generates an image which looks like a cracked ceramic glaze.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode,System.Int32)">
            <summary><![CDATA[Initalize a new instance of the CrackleCommand class. ]]></summary>
            <param name="mode">The crackle mode.</param>
            <param name="definition">A value which controls sharpness of cracks. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the CrackleCommand Effects using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. <crlf> ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Definition()">
            <summary><![CDATA[Gets or sets a value which controls sharpness of cracks. ]]></summary>
            <returns>A value which controls sharpness of cracks. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Mode()">
            <summary>Gets or sets the crackle mode.</summary>
            <returns><![CDATA[The crackle mode.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand">
            <summary><![CDATA[This command will de-interlace an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor">
            <summary><![CDATA[Initializes a new instance of <SPAN class=dxMisspelled id=dxMisspelled word="DeInterlaceCommand">DeInterlaceCommand</SPAN>.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor()">
            <summary><![CDATA[Initializes a new instance of <SPAN class=dxMisspelled id=dxMisspelled word="DeInterlaceCommand">DeInterlaceCommand</SPAN> with default settings. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod)">
            <summary><![CDATA[Initializes a new instance of DeInterlaceCommand specifying the method. ]]></summary>
            <param name="method">The de-interlace method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod)">
            <summary><![CDATA[Initializes a new instance of DeInterlaceCommand specifying the de-interlace method and merging mode.]]></summary>
            <param name="method">The de-interlace method. </param>
            <param name="merge">The merging method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention)">
            <summary><![CDATA[Initializes a new instance of DeInterlaceCommand specifying the de-interlace method and which lines to retain.]]></summary>
            <param name="method">The de-interlace method. </param>
            <param name="retention"><![CDATA[Specifies which lines to retain.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the DeInterlaceCommand using the current settings to the source image. </summary>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.MergeMethod()">
            <summary>Gets or sets the merge method to use when merging the odd and even interpolated images.</summary>
            <returns>The merge method to use when merging the odd and even interpolated images.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Method()">
            <summary>Gets or sets the method used to de-interlace the image.</summary>
            <returns>The method used to de-interlace the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Retention()">
            <summary>Gets or sets the odd or even line to retain.</summary>
            <returns>The odd or even line to retain.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand">
            <summary>Apply a drop shadow behind the image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor">
            <summary><![CDATA[Initialize a new instance of the DropShadowCommand class. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Int32)">
            <summary><![CDATA[Initializes a new instance of DropShadowCommand specifying offset. ]]></summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point)">
            <summary><![CDATA[Initialize a new instance of DropShadowCommand specifying offset. ]]></summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of DropShadowCommand specifying offset and shadowColor. ]]></summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary><![CDATA[Initialize a new instance of DropShadowCommand specifying offset, shadowColor and blurLevel. ]]></summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
            <param name="blurLevel">The amount of blur to add to the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand._ctor(System.Drawing.Point,System.Drawing.Color,System.Double,System.Boolean)">
            <summary><![CDATA[Initialize a new instance of DropShadowCommand specifying offset, shadowColor, blurLevel and increaseCanvas. ]]></summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
            <param name="blurLevel">The amount of blur to add to the shadow.</param>
            <param name="increaseCanvas"><![CDATA[A value to indicate if you want the canvas to be increased to include the shadow.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the DropShadowCommand using the current settings to the source image. ]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BlurLevel()">
            <summary>Gets or sets the amount of blur to add to the shadow.</summary>
            <returns>The amount of blur to add to the shadow.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.IncreaseCanvas()">
            <summary>Gets or sets a value to indicate if you want the canvas to be increased to include the shadow.</summary>
            <returns><![CDATA[A value to indicate if you want the canvas to be increased to include the shadow.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Offset()">
            <summary>Gets or set the number of pixels to offset the the shadow.</summary>
            <returns>The number of pixels to offset the the shadow.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ShadowColor()">
            <summary>Gets or sets the color to use for the shadow.</summary>
            <returns>The color to use for the shadow.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand">
            <summary>Creates an effect which looks like fingerprint smuges on the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor">
            <summary><![CDATA[Creates a new instance of FingerprintCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor(System.Double)">
            <summary><![CDATA[Creates a new instance of FingerprintCommand specifying depth.]]></summary>
            <param name="depth"><![CDATA[A positive number indicating the depth of the effect. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand._ctor(System.Double,System.Int32,System.Boolean)">
            <summary><![CDATA[Creates a new instance of FingerprintCommand specifying depth, filterSize and dilation. ]]></summary>
            <param name="depth"><![CDATA[A positive number indicating the depth of the effect. ]]></param>
            <param name="filterSize"><![CDATA[Gets or sets the filter size of the effect.  Should be an odd number greater than or equal to 3.]]></param>
            <param name="dilation">Indicates if dilation should be used. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the FingerprintCommand using the current settings to the source image. ]]></summary>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Depth()">
            <summary>Gets or sets a positive number indicating the depth of the effect.</summary>
            <returns><![CDATA[A positive number indicating the depth of the effect.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Dilation()">
            <summary>Gets or sets a value indicating if dilation mode should be used.</summary>
            <returns><![CDATA[A value indicating if dilation mode should be used.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.FilterSize()">
            <summary>Gets or sets the filter size of the effect.</summary>
            <returns>The filter size of the effect.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand">
            <summary><![CDATA[Performs a flood fill on an image.  You can use it to fill an area of an image surrounded by FillColor by setting Mode to Edge, or you can fill the pixel color at Position with FillColor. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand._ctor(System.Drawing.Point,System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.ColorMatchMode)">
            <summary>Creates a new instance of FloodFillCommand specifying position, fillColor, tolerance and mode.</summary>
            <param name="position">The X, Y pixel position where the fill should start.</param>
            <param name="fillColor">The color used for the fill. </param>
            <param name="tolerance">The percentage of color variation. (0 to 100) </param>
            <param name="mode">The ColorMatchMode used for the fill. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the FloodFillCommand using the current settings to the source image. ]]></summary>
            <returns><![CDATA[Null]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.FillColor()">
            <summary>Gets or sets the color used for the fill.</summary>
            <returns>The color used for the fill.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode()">
            <summary>Gets or sets the ColorMatchMode used for the fill. </summary>
            <returns>The ColorMatchMode used for the fill. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position()">
            <summary>Gets or sets the X, Y pixel position where the fill should start.</summary>
            <returns>The X, Y pixel position where the fill should start.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Tolerance()">
            <summary>Gets or sets the percentage of color variation.</summary>
            <returns>The percentage of color variation.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand">
            <summary>Increases or descreases the gamma value of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand._ctor(System.Double)">
            <summary>Creates a new instance of the GammaCommand object.</summary>
            <param name="gammaLevel"><![CDATA[The gamma correction level.  A value &lt; 1 decreases brightness and a value &gt; 1 increases brightness.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the GammaCommand using the current settings to the source image. ]]></summary>
            <returns><![CDATA[Null]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GammaLevel()">
            <summary>Gets or sets the gamma correction level.</summary>
            <returns>The gamma correction level.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand">
            <summary>Generate a soft focus, gauzed image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand._ctor(System.Double,System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode)">
            <summary><![CDATA[Creates a new instance of the GauzyCommand object.<crlf>Creates a new instance of <A>GauzyCommand</A> specifying blurAmount, sharpAmount, clarity, and mode. <crlf>Creates a new instance of <A>GauzyCommand</A> specifying blurAmount, sharpAmount, clarity, mode and regionOfInterest. ]]></summary>
            <param name="blurAmount"><![CDATA[The amount of blur to apply. (0 to 100)]]></param>
            <param name="sharpAmount"><![CDATA[The amount of original pixels in the image.  (0 to 100)]]></param>
            <param name="clarity"><![CDATA[The amount to clarify the result.  (0 to 100)]]></param>
            <param name="mode"><![CDATA[The GauzyMode to use.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the GauzyCommand Effects using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.BlurAmount()">
            <summary><![CDATA[Gets or sets the amount of blur to apply.]]></summary>
            <returns><![CDATA[The amount of blur to apply. (0 to 1)]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Clarity()">
            <summary>Gets or sets the amount to clarify the result.</summary>
            <returns><![CDATA[The amount to clarify the result.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Mode()">
            <summary><![CDATA[Gets or sets the GauzyMode to use.]]></summary>
            <returns><![CDATA[The GauzyMode to use.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SharpAmount()">
            <summary><![CDATA[Gets or sets the amount of original pixels in the image.]]></summary>
            <returns><![CDATA[The amount of original pixels in the image.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand">
            <summary><![CDATA[Generates a black and white image dithered to "halftone" dots. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand._ctor(System.Int32,System.Boolean)">
            <summary>Creates a new instance of the HalftoneCommand object.</summary>
            <param name="maxDotSize">The maximum size of the dots.</param>
            <param name="smoothDots"><![CDATA[A value indicating if the dots will be smooth or sharp. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies HalftoneCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.MaxDotSize()">
            <summary>Gets or sets the maximum size of the dots.</summary>
            <returns>The maximum size of the dots.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SmoothDots()">
            <summary>Gets or sets a value indicating if the dots will be smooth or sharp.</summary>
            <returns><![CDATA[A value indicating if the dots will be smooth or sharp. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand">
            <summary>Perform histogram equalization on an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand._ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of HistogramEqualizeCommand specifying the threshold values. </summary>
            <param name="lowThreshold">Pixels are uneffected below this value. (0 - 255) </param>
            <param name="highThreshold">Pixels are uneffected above this value. (0 - 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies HistogramEqualizeCommand using the current settings to the source image. </summary>
            <returns><![CDATA[null (Nothing in Visual Basic)]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.HighThreshold()">
            <summary>Gets or sets a high threshold value above which pixels are uneffected. </summary>
            <returns><![CDATA[A high threshold value where pixels are uneffected.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.LowThreshold()">
            <summary><![CDATA[Gets or sets a low threshold value below which pixels are uneffected. ]]></summary>
            <returns><![CDATA[A low threshold value below which pixels are uneffected. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand">
            <summary><![CDATA[Performs a histogram stretch on an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand._ctor(System.Double,System.Double)">
            <summary>Creates a new instance of HistogramStretchCommand specifying the limit values. </summary>
            <param name="lowLimit"><![CDATA[Percent of pixels to set to 0.  (0 to 100) ]]></param>
            <param name="highLimit"><![CDATA[Percent of pixels to set to 255.  (0 to 100) ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.HighLimit()">
            <summary>Gets or sets the percent of pixels to set to 255.</summary>
            <returns>Percent of pixels to set to 255.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.LowLimit()">
            <summary>Gets or sets the percent of pixels to set to 0. </summary>
            <returns>Percent of pixels to set to 0. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand">
            <summary><![CDATA[Generate a mosaic (large pixel) image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand._ctor(System.Int32)">
            <summary>Creates a new instance of MosaicCommand specifying squareSize. </summary>
            <param name="squareSize"><![CDATA[The size of the mosaic tiles.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies MosaicCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SquareSize()">
            <summary><![CDATA[Gets or sets the size of the mosaic tiles.]]></summary>
            <returns><![CDATA[The size of the mosaic tiles.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand">
            <summary><![CDATA[Generate an image made up of primary and secondary colors of the source image. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand._ctor">
            <summary><![CDATA[Creates a new instance of PosterizeCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PosterizeCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand">
            <summary>Use this command to convert an image into an 8-bit indexed image with a specified number of colors.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor">
            <summary>Creates a new instance of the ReduceColorsCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor(System.Int32)">
            <summary><![CDATA[Creates a new instance of <A>ReduceColorsCommand</A> specifying colors.]]></summary>
            <param name="colors">The number of colors you want the resulting image to contain. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary><![CDATA[Creates a new instance of <A>ReduceColorsCommand</A> specifying colors, ditherMode, and ditherMaxError. ]]></summary>
            <param name="colors">The number of colors you want the resulting image to contain. </param>
            <param name="ditherMode"><![CDATA[The type of DitheringMode to perform. ]]></param>
            <param name="ditherMaxError"><![CDATA[The maximum error value that can be carried between pixels.  (0 to 127) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ReduceColorsCommand Effects using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.Colors()">
            <summary>Gets or sets the number of colors you want the resulting image to contain. </summary>
            <returns>The number of colors you want the resulting image to contain. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMaxError()">
            <summary>Gets or sets the maximum error value that can be carried between pixels. </summary>
            <returns>The maximum error value that can be carried between pixels. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMode()">
            <summary><![CDATA[Gets or sets the type of DitheringMode to perform. ]]></summary>
            <returns><![CDATA[The type of DitheringMode to perform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand">
            <summary>Replaces a color in an image with another using the specified color tolerance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand._ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of ReplaceColorCommand specifying oldColor, newColor, and tolerance. </summary>
            <param name="oldColor">The color you want to replace.</param>
            <param name="newColor">The color used to replace the old color.</param>
            <param name="tolerance">The maximum color distance to match. A value of 0 will provide strict matching. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ReplaceColorCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.NewColor()">
            <summary>Gets or sets the color used to replace the old color. </summary>
            <returns>The color used to replace the old color.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.OldColor()">
            <summary>Gets or sets the color you want to replace. </summary>
            <returns>The color you want to replace.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Tolerance()">
            <summary>Gets or sets the maximum color distance to match. A value of 0 will provide strict matching. </summary>
            <returns>The maximum color distance to match. A value of 0 will provide strict matching. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand">
            <summary>Modify the saturation levels of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand._ctor(System.Double)">
            <summary><![CDATA[Creates a new instance of the SaturationCommand object.<crlf>Creates a new instance of SaturationCommand specifying saturationLevel.<crlf>Creates a new instance of SaturationCommand specifying saturationLevel and regionOfInterest.]]></summary>
            <param name="saturationLevel">The saturation level to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the SaturationCommand using the current settings to the source image. ]]></summary>
            <returns><![CDATA[Null]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SaturationLevel()">
            <summary>Gets or sets the saturation level to apply.</summary>
            <returns>The saturation level to apply. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand">
            <summary><![CDATA[Use this command to adjust the curves to generate a classic "solarize" effect.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand._ctor">
            <summary><![CDATA[Creates a new instance of <A>SolarizeCommand</A>. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SolarizeCommand using the current settings to the source image.</summary>
            <returns><![CDATA[Null ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand">
            <summary><![CDATA[This command generates a bumped image effect.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand._ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType,Atalasoft.Imaging.ImageProcessing.Effects.StippleMode)">
            <summary><![CDATA[Creates a new instance of StippleCommand specifying size, filter, and mode.]]></summary>
            <param name="size">The size of the spots.</param>
            <param name="filter"><![CDATA[The StippleFilterType used to control blurring.]]></param>
            <param name="mode"><![CDATA[The StippleMode to use for this command.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the StippleCommand Effects using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Filter()">
            <summary><![CDATA[Gets or sets the StippleFilterType used to control blurring.]]></summary>
            <returns><![CDATA[The StippleFilterType used to control blurring.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Mode()">
            <summary><![CDATA[Gets or sets the StippleMode to use for this command.]]></summary>
            <returns><![CDATA[The StippleMode to use for this command.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Size()">
            <summary>Gets or sets the size of the spots.</summary>
            <returns>The size of the spots.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand">
            <summary><![CDATA[Converts a grayscale image into a RGB or RGBA image and applies a color tint in the same process.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand._ctor(System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of TintGrayscaleCommand specifying colorToTint.]]></summary>
            <param name="colorToTint">The color to tint the output.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the TintGrayscaleCommand Effects using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ColorToTint()">
            <summary>Gets or sets the color to tint the output.</summary>
            <returns>The color to tint the output.</returns>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Fft">
            <summary>Contains classes for specialized filters that are processed using Fast Fourier Transformations (FFT).</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary><![CDATA[Applies the filter on an FftGrid. ]]></summary>
            <param name="grid"><![CDATA[The FftGrid to process.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the filter on an AtalaImage.]]></summary>
            <param name="image"><![CDATA[The grayscale AtalaImage to process. ]]></param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid">
            <summary><![CDATA[The FftGrid is used as an intermediate step in FFT processing.  It transforms a grayscale image into the FFT domain, and is required prior to all FFT filters.  ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid._ctor(Atalasoft.Imaging.AtalaImage)">
            <param name="image"><![CDATA[The grayscale AtalaImage to initialize the FftGrid with. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Dispose">
            <summary>Cleans up unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetNextPowerOfTwo(System.Int32)">
            <summary><![CDATA[A helper function that retrieves the next power of two (128, 256, 512, 1024, etc).  x^2 ]]></summary>
            <returns><![CDATA[ The next power of two.]]></returns>
            <param name="value"><![CDATA[The value to use when testing the next power of two.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetProcessedImage">
            <summary>Returns the processed image from the frequency domain.</summary>
            <returns>The processed image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Height()">
            <summary><![CDATA[Gets the height of this <SPAN class=dxMisspelled id=dxMisspelled word="FftGrid">FftGrid</SPAN>. ]]></summary>
            <returns><![CDATA[The height of this <SPAN class=dxMisspelled id=dxMisspelled word="FftGrid">FftGrid</SPAN>. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Width()">
            <summary><![CDATA[Gets the width of this FftGrid.]]></summary>
            <returns><![CDATA[The width of this <SPAN class=dxMisspelled id=dxMisspelled word="FftGrid">FftGrid</SPAN>. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand">
            <summary><![CDATA[The base class used for all FFT filters.  ]]></summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Filters">
            <summary>Contains classes that apply a filter to an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality">
            <summary>Indicates the quality level in the AdaptiveUnsharpMaskCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Low">
            <summary>Less accurate results, but very fast.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Middle">
            <summary>Good results, slower to process.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.High">
            <summary><![CDATA[Highest quality with the best results.  Very slow.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType">
            <summary>The type of noise to add to an image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Gaussian">
            <summary>A type of noise whose histogram is bell-shaped: most of the noise will occur in the middle of the pixel value range, and less noise will occur at the extremes.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Negative">
            <summary>Negative Exponential Noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Rayleigh">
            <summary>Rayleigh noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Uniform">
            <summary>Uniform Noise.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection">
            <summary>Specifies the direction of the edge detection </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Top">
            <summary>Emphasizes top edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Right">
            <summary>Emphasizes right edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Bottom">
            <summary>Emphasizes bottom edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Left">
            <summary>Emphasizes left edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Laplacian">
            <summary>Laplacian Edge Detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Prewitt">
            <summary>Prewitt Edge Detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Gradient">
            <summary>Gradient Edge Detection</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType">
            <summary>The type of mean filter to apply.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Arithmetic">
            <summary>Finds average values under the filter.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Geometric">
            <summary>Removes Gaussian type noise from an image better than the arithmetic mean filter. Unlike the YP mean filter, this is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter to output zero.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Harmonic">
            <summary>Removes Gaussian type noise from an image better than the arithmetic mean filter. It is good at removing positive outliers, but it is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter to output zero.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.YP">
            <summary>A non-linear mean filter which is better at removing Gaussian type noise and preserving edge features than the basic arithmetic mean filter. It is also very good at removing outliers (positive or negative, depending on the order of the filter) from images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode">
            <summary>The type of morphological filter to use in the MorphoGrayCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Dilation">
            <summary><![CDATA[Used to smooth small dark regions tending to enhance black features in the image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Erosion">
            <summary><![CDATA[Used to smooth small light regions tending to reduce black features in the image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Open">
            <summary>The dilation of the erosion of the image used to reduce small black regions within the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Close">
            <summary>The erosion of the dilation of the image used to reduce small white regions within the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Tophat">
            <summary>Used to enhance low-contrast, high frequency details within an image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Gradient">
            <summary>Highlights sharp gray-level transitions (edges) in an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand">
            <summary><![CDATA[Uses a powerful technique for sharpening images in the presence of low noise levels via an adaptive filtering algorithm. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand._ctor(System.Int32,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality)">
            <summary>Initializes a new instance of AdaptiveUnsharpMask.</summary>
            <param name="threshold"><![CDATA[A value controlling the depth of the effect with the lower the value, the greater the effect. (0 to 255)]]></param>
            <param name="amount">The amount of the sharpened signal to add to the output image. </param>
            <param name="filterQuality">Quality of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies an Adaptive Unsharp Mask filter using the current settings to the specified image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Amount()">
            <summary><![CDATA[Gets or sets the amount of the sharpened signal to add to the output image.<BR>]]></summary>
            <returns>The amount of the sharpened signal to add to the output image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.FilterQuality()">
            <summary>Gets or sets the quality of the filter.</summary>
            <returns>The quality of the filter.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Threshold()">
            <summary><![CDATA[Gets or sets a value controlling the depth of the effect.]]></summary>
            <returns><![CDATA[A value controlling the depth of the effect.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand">
            <summary>Add different types of noise to an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor">
            <summary>Initialize a new instance of AddNoiseCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean)">
            <summary><![CDATA[Initializes a new instance of AddNoiseCommand specifying the filter type, variance, and monochromatic setting. ]]></summary>
            <param name="noiseType">The type of noise to apply.</param>
            <param name="variance">Controls the intensity. </param>
            <param name="monochromatic">If True, the same noise is applied equally to all pixel channels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean,System.Double)">
            <summary><![CDATA[Initializes a new instance of AddNoiseCommand specifying the filter type, variance, monochromatic setting, and mean.]]></summary>
            <param name="noiseType">The type of noise to apply.</param>
            <param name="variance">Controls the intensity. </param>
            <param name="monochromatic"><![CDATA[When true applies the same noise equally to each channel.]]></param>
            <param name="mean">Adds additional noise to the output for Gaussian and Uniform noise types. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies this AddNoiseCommand using the current settings to the specified image. </summary>
            <returns><![CDATA[null (Nothing in Visual Basic)]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Mean()">
            <summary>Gets or sets a value which adds additional noise to the output for Gaussian and Uniform noise types.</summary>
            <returns><![CDATA[A value which adds additional noise to the output for Gaussian and Uniform noise types. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Monochromatic()">
            <summary><![CDATA[Gets or sets a value that when true applies the same noise equally to each channel.]]></summary>
            <returns><![CDATA[A value that when true applies the same noise equally to each channel.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoiseType()">
            <summary>Gets or sets the type of noise to apply.</summary>
            <returns>The type of noise to apply.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Variance()">
            <summary>Gets or sets a value controlling the intensity.</summary>
            <returns><![CDATA[A value controlling the intensity.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand">
            <summary><![CDATA[Applies a Blur filter onto an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor">
            <summary>Initializes a new instance of BlurCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor(System.Double)">
            <summary>Initializes a new instance of BlurCommand specifying the intensity.</summary>
            <param name="intensity"><![CDATA[The intensity of the filter. (0 to 100)]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand._ctor(System.Double,System.Int32)">
            <summary>Initializes a new instance of BlurCommand specifying the intensity and matrix size.</summary>
            <param name="intensity"><![CDATA[The intensity of the filter. (0 to 100)]]></param>
            <param name="matrixSize"><![CDATA[The size of the matrix.  Should be an odd value greater than or equal to 3. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Blur filter using the current settings to the specified image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image or null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.Intensity()">
            <summary>Gets or sets a value controlling the intensity of the filter.</summary>
            <returns><![CDATA[A value controlling the intensity of the filter. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.MatrixSize()">
            <summary>Gets or sets the size of the matrix.</summary>
            <returns>The size of the matrix.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand">
            <summary><![CDATA[Performs a Gaussian blur filter on the image.  This has a more dispersed effect then the traditional blur filter, but slower.  ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand._ctor(System.Double)">
            <summary>Initializes a new instance of BlurGaussianCommand. </summary>
            <param name="sigma">The standard deviation of the gaussian kernal, controlling the amount of blur.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Guassian Blur filter using the current settings to the specified image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image or null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.Sigma()">
            <summary>Gets or sets the standard deviation of the gaussian kernal, controlling the amount of blur.</summary>
            <returns>The standard deviation of the gaussian kernal, controlling the amount of blur.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand">
            <summary>Find edges in an image using the Canny algorithm.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand._ctor(System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of CannyEdgeDetectorCommand. </summary>
            <param name="sigma">Standard deviation of the gaussian kernal.</param>
            <param name="lowHysteresis"><![CDATA[The low hysteresis value.  (0 to 100) ]]></param>
            <param name="highHysteresis"><![CDATA[The high hysteresis value.  (0 to 100) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies a Canny Edge Detection filter using the current settings to the specified image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image or null (Nothing in Visual Basic) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.HighHysteresis()">
            <summary>Gets or sets a value used to specify the high hysteresis value. </summary>
            <returns>A value used to specify the high hysteresis value. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.LowHysteresis()">
            <summary>Gets or sets a value used to specify the low hysteresis value. </summary>
            <returns><![CDATA[A value used to specify the low hysteresis value. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Sigma()">
            <summary>Gets or sets the standard deviation of the gaussian kernal.</summary>
            <returns>The standard deviation of the gaussian kernal.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand">
            <summary>Applies a custom Convolution Filter to an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Double)">
            <summary>Initializes a new instance of ConvolutionFilterCommand. </summary>
            <param name="matrix">The matrix to apply to the image.</param>
            <param name="intensity">The intensity of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ConvolutionFilterCommand filter using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image.  null (Nothing in VB) if cancelled.<crlf>A new System.Drawing.Bitmap containing the processed image.  null (Nothing in VB) if cancelled.]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Intensity()">
            <summary><![CDATA[Gets or sets a value controlling the intensity of the filter. ]]></summary>
            <returns><![CDATA[A value controlling the intensity of the filter. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Matrix()">
            <summary><![CDATA[Gets or sets the matrix to apply to the image.]]></summary>
            <returns>The matrix to apply to the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Traditional()">
            <summary>Gets or sets a value indicating if the traditional version is used.</summary>
            <returns><![CDATA[A value indicating if the traditional version is used. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand">
            <summary>Applies a custom Convolution Matrix to an image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Boolean,System.Double)">
            <summary><![CDATA[Initializes a new instance of the ConvolutionMatrixCommand. ]]></summary>
            <param name="matrix">The matrix to apply to the image. </param>
            <param name="feedback">Indicates if a feedback calculation is performed. </param>
            <param name="intensity">The intensity of the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the ConvolutionMatrixCommand filter using the current settings to the source image. ]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image.  null (Nothing in VB) if cancelled.<crlf>A new System.Drawing.Bitmap containing the processed image.  null (Nothing in VB) if cancelled.]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ChannelsToProcess()">
            <summary>Gets or sets a bit flag indicating the channels to process. </summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Feedback()">
            <summary>Gets or sets a value indicating if a feedback calculation is performed. </summary>
            <returns><![CDATA[A value indicating if a feedback calculation is performed.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Intensity()">
            <summary>Gets or sets a value controlling the intensity of the filter. </summary>
            <returns><![CDATA[A value controlling the intensity of the filter. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Matrix()">
            <summary><![CDATA[Gets or sets the matrix to apply to the image.]]></summary>
            <returns><![CDATA[The matrix to apply to the image.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand">
            <summary>This filter cleans the image by removing stray pixel spikes (speckles).</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand._ctor">
            <summary><![CDATA[Initializes a new instance of DespeckleCommand.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets a bit flag indicating the channels to process. ]]></summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix">
            <summary>This object composes of a matrix of doubles that is used in various filters including ConvolutionFilterCommand and ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix._ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of DoubleMatrix.</summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="columns">Number of columns in the matrix.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetArray">
            <summary>Return a one-dimentional array that composes of the matrix elements. </summary>
            <returns><![CDATA[A one-dimentional array that composes of the matrix elements. ]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetItem(System.Int32,System.Int32)">
            <summary>Gets a value in the specified location of the matrix. </summary>
            <returns><![CDATA[A value in the specified location of the matrix. ]]></returns>
            <param name="row">The row containing the element to get. (zero based)</param>
            <param name="column">The column containing the element to get. (zero based)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetRow(System.Int32)">
            <summary>Returns a one-dimensional array containing en entire row of the matrix. </summary>
            <returns><![CDATA[A one-dimensional array containing en entire row of the matrix.]]></returns>
            <param name="rowIndex">The zero based row to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetItem(System.Int32,System.Int32,System.Double)">
            <summary>Set the value of an element in the array.</summary>
            <param name="row">The row containing the element to set. (zero based) </param>
            <param name="column">The column containing the element to set. (zero based) </param>
            <param name="itemValue">The value to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetRow(System.Int32,System.Double[])">
            <summary>Set the entire row of the matrix to a parameter list of values.</summary>
            <param name="rowIndex">The zero based row index to set.</param>
            <param name="rowList">A parameter array of doubles that are set to the matrix row.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Columns()">
            <summary>Gets or sets the number of columns in the matrix.</summary>
            <returns>The number of columns in the matrix. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Rows()">
            <summary>Gets or sets the number of rows in the matrix. </summary>
            <returns>The number of rows in the matrix. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand">
            <summary>This filter enhances edges in an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor">
            <summary><![CDATA[Initializes a new instance of EdgeDetectionCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType)">
            <summary><![CDATA[Initializes a new instance of EdgeDetectionCommand specifying the type.]]></summary>
            <param name="type">Type of edge detection filter to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double)">
            <summary><![CDATA[Initializes a new instance of EdgeDetectionCommand specifying the type and intensity.]]></summary>
            <param name="type">Type of edge detection filter to apply.</param>
            <param name="intensity">Intensity of the edge detection. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection)">
            <summary><![CDATA[Initializes a new instance of EdgeDetectionCommand specifying the type, intensity, and direction.]]></summary>
            <param name="type">Type of edge detection filter to apply.</param>
            <param name="intensity">Intensity of the edge detection. </param>
            <param name="direction">The edge detection for Gradient and Prewitt filters.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Direction()">
            <summary>Gets or sets the edge direction for Gradient and Prewitt filters.</summary>
            <returns><![CDATA[Specifies the edge detection for Gradient and Prewitt filters.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Intensity()">
            <summary>Gets or sets the intensity of the edge detection. </summary>
            <returns><![CDATA[The intensity of the edge detection. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Type()">
            <summary><![CDATA[Gets or sets the type of edge detection filter to apply.]]></summary>
            <returns><![CDATA[The type of edge detection filter to apply.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand">
            <summary>Applies an embossing filter to the source image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the EmbossCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor(System.Int32,System.Int32,System.Int32)">
            <summary><![CDATA[Initializes a new instance of the EmbossCommand specifying the angle, elevation, and depth.]]></summary>
            <param name="angle"><![CDATA[Angle of the light source in degrees.]]></param>
            <param name="elevation"><![CDATA[Height of the light source in degrees.]]></param>
            <param name="depth"><![CDATA[Controls the depth of the emboss.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor(System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Initializes a new instance of the EmbossCommand specifying the angle, elevation, depth, and texture. ]]></summary>
            <param name="angle"><![CDATA[Angle of the light source in degrees.]]></param>
            <param name="elevation"><![CDATA[Height of the light source in degrees.]]></param>
            <param name="depth"><![CDATA[Controls the depth of the emboss.]]></param>
            <param name="textureMap">An AtalaImage that is used as a texture map. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary><![CDATA[Initializes a new instance of the EmbossCommand specifying the angle, elevation, depth, and texture.]]></summary>
            <param name="angle"><![CDATA[Angle of the light source in degrees.]]></param>
            <param name="elevation"><![CDATA[Height of the light source in degrees.]]></param>
            <param name="depth"><![CDATA[Controls the depth of the emboss.]]></param>
            <param name="selfTexture"><![CDATA[Indicates if the source image should be used as the texture.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies an emboss filter using the current settings to the specified image. ]]></summary>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed. ]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Angle()">
            <summary><![CDATA[Gets or sets the angle of the light source in degrees.]]></summary>
            <returns><![CDATA[The angle of the light source in degrees.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Depth()">
            <summary><![CDATA[Gets or sets a value controlling the depth of the emboss.]]></summary>
            <returns><![CDATA[A value controlling the depth of the emboss.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Elevation()">
            <summary><![CDATA[Gets or sets the Height of the light source in degrees.]]></summary>
            <returns><![CDATA[The height of the light source in degrees.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelfTexture()">
            <summary><![CDATA[Gets or sets a value indicating if the source image should be used as the texture.]]></summary>
            <returns><![CDATA[A value indicating if the source image should be used as the texture.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureMap()">
            <summary>Gets or sets an AtalaImage that is used as a texture map. </summary>
            <returns>An AtalaImage that is used as a texture map. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand">
            <summary>Removes Low Frequency signals from an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the HighPassCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor(System.Double)">
            <summary><![CDATA[Initializes a new instance of the HighPassCommand specifying the sigma value.]]></summary>
            <param name="sigma">A value indicating the amount of effect to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand._ctor(System.Double,System.Double)">
            <summary><![CDATA[Initializes a new instance of the HighPassCommand specifying the sigma and mix value.]]></summary>
            <param name="sigma">A value indicating the amount of effect to apply. </param>
            <param name="mix">The percentage of the filter to mix into the original image. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the HighPassCommand filter using the current settings to the source image. </summary>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Mix()">
            <summary>Gets or sets the percentage of the filter to mix into the original image. </summary>
            <returns>The percentage of the filter to mix into the original image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Sigma()">
            <summary><![CDATA[Gets or sets a value indicating the amount of effect to apply. ]]></summary>
            <returns>A value indicating the amount of effect to apply.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix">
            <summary>This object composes of a matrix of integers that is used in various morphological and related filters.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix._ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of IntegerMatrix. </summary>
            <param name="rows">Number of rows in the matrix. </param>
            <param name="columns">Number of columns in the matrix. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetArray">
            <summary>Return a one-dimentional array that composes of the matrix elements. </summary>
            <returns><![CDATA[A one-dimentional array that composes of the matrix elements. ]]></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetItem(System.Int32,System.Int32)">
            <summary>Gets a value in the specified location of the matrix. </summary>
            <returns><![CDATA[A value in the specified location of the matrix. ]]></returns>
            <param name="row">The row containing the element to get. (zero based) </param>
            <param name="column">The column containing the element to get. (zero based) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetRow(System.Int32)">
            <summary>Returns a one-dimensional array containing en entire row of the matrix. </summary>
            <returns><![CDATA[A one-dimensional array containing en entire row of the matrix. ]]></returns>
            <param name="rowIndex">The zero based row to retreive. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetItem(System.Int32,System.Int32,System.Int32)">
            <summary>Set the value of an element in the array. </summary>
            <param name="row">The row containing the element to set. (zero based) </param>
            <param name="column">The column containing the element to set. (zero based) </param>
            <param name="itemValue">The value to set. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetRow(System.Int32,System.Int32[])">
            <summary>Set the entire row of the matrix to a parameter list of values. </summary>
            <param name="rowIndex">The zero based row index to set. </param>
            <param name="rowList">A parameter array of integers that are set to the matrix row. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Columns()">
            <summary>Gets or sets the number of columns in the matrix. </summary>
            <returns>The number of columns in the matrix. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Rows()">
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand">
            <summary>Increases the color intensity as if a flash of light from a camera hit it. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand._ctor(System.Double)">
            <summary><![CDATA[Initializes a new instance of the IntensifyCommand. ]]></summary>
            <param name="intensity"><![CDATA[The new intensity value. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the IntensifyCommand filter using the current settings to the source image. </summary>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets a bit flag indicating the channels to process. ]]></summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.Intensity()">
            <summary><![CDATA[Gets or sets a value increasing the color intensity.]]></summary>
            <returns><![CDATA[A value increasing the color intensity.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand">
            <summary><![CDATA[Sets each color value to the maximum value under the filter.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand._ctor(System.Int32)">
            <summary><![CDATA[Initializes a new instance of the MaximumCommand. ]]></summary>
            <param name="filterSize">Size of the filter. Should be an odd value greater than or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the MaximumCommand filter using the current settings to the source image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets a bit flag indicating the channels to process. ]]></summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.FilterSize()">
            <summary>Gets or sets the size of the filter.</summary>
            <returns>The size of the filter. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand">
            <summary><![CDATA[Applies an Arithmetic, Harmonic, Geometric, or Yp mean filter to an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the MeanCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType)">
            <summary><![CDATA[Initializes a new instance of the MeanCommand specifying the type.]]></summary>
            <param name="meanType">The type of mean filter to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32)">
            <summary><![CDATA[Initializes a new instance of the MeanCommand specifying the type, filter size.]]></summary>
            <param name="meanType">The type of mean filter to apply. </param>
            <param name="filterSize"><![CDATA[The size of the filter.  Should be an odd value greater than or equal to 3.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32,System.Int32)">
            <summary><![CDATA[Initializes a new instance of the MeanCommand specifying the type, size, and power.]]></summary>
            <param name="meanType">The type of mean filter to apply. </param>
            <param name="filterSize"><![CDATA[The size of the filter.  Should be an odd value greater than or equal to 3. ]]></param>
            <param name="power"><![CDATA[A non-zero integer that controls power for the Yp mean filter. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the MeanCommand filter using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled.]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets a bit flag indicating the channels to process. ]]></summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.FilterSize()">
            <summary>Gets or sets the size of the filter. </summary>
            <returns>The size of the filter. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.MeanType()">
            <summary>Gets or sets the type of mean filter to apply.</summary>
            <returns>The type of mean filter to apply. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.Power()">
            <summary><![CDATA[Gets or sets the a non-zero integer that controls power for the Yp mean filter.]]></summary>
            <returns><![CDATA[A non-zero integer that controls power for the Yp mean filter. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand">
            <summary><![CDATA[Reduces noise in an image, similarly to the mean filter, however doing a better job preserving useful detail in the image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the MedianCommand. <crlf>Initializes a new instance of the MedianCommand specifying a region of interest.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the MedianCommand filter using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. <crlf> ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets a bit flag indicating the channels to process. ]]></summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand">
            <summary><![CDATA[Find the average of minimum and maximum values under the filter.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the MidpointCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand._ctor()">
            <summary><![CDATA[Initializes a new instance of the MidpointCommand.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand._ctor(System.Int32)">
            <summary><![CDATA[Initializes a new instance of the MidpointCommand specifying the filter size.]]></summary>
            <param name="filterSize"><![CDATA[The size of the filter.  Should be an odd value greater than or equal to 3. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the Midpoint filter using the current settings to the source image.  ]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. <crlf> ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets the ChannelFlags specifying which channels to process.]]></summary>
            <returns><![CDATA[The ChannelFlags specifying which channels to process.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.FilterSize()">
            <summary><![CDATA[Gets or sets the size of the filter.  ]]></summary>
            <returns>The size of the filter. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand">
            <summary><![CDATA[Find the minimum values under the filter.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the MinimumCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand._ctor()">
            <summary><![CDATA[Initializes a new instance of the MinimumCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand._ctor(System.Int32)">
            <summary><![CDATA[Initializes a new instance of the MinimumCommand specifying the filter size.]]></summary>
            <param name="filterSize"><![CDATA[The size of the filter.  Should be an odd value greater than or equal to 3. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the Minimum filter using the current settings to the source image.  ]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets a bit flag indicating the channels to process. ]]></summary>
            <returns><![CDATA[A bit flag indicating the channels to process. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.FilterSize()">
            <summary>Gets or sets the size of the filter.</summary>
            <returns>The size of the filter. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand">
            <summary>Applies a morphological Erosion, Dilation, Open, Close, or TopHat to a grayscale image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor">
            <summary><![CDATA[Initializes a new instance of the MorphoGrayCommand. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode)">
            <summary><![CDATA[Initializes a new instance of the MorphoGrayCommand specifying the filter mode.]]></summary>
            <param name="mode">The type of morphological to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand._ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary><![CDATA[Initializes a new instance of the MorphoGrayCommand specifying the filter mode and a structuring element.]]></summary>
            <param name="mode">The type of morphological to apply.</param>
            <param name="mask">The structuring element to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the Morphological filter using the current settings to the source image.  ]]></summary>
            <returns><![CDATA[null (Nothing in Visual Basic) ]]></returns>
            <param name="sourceImage">The source AtalaImage which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mask()">
            <summary>Gets or sets a structuring element to use with the morphological filter.</summary>
            <returns><![CDATA[A structuring element to use with the morphological filter.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mode()">
            <summary>Gets or sets the type of morphological filter to apply.</summary>
            <returns>The type of morphological filter to apply. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand">
            <summary><![CDATA[Applies a traditional sharpening filter to the image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor">
            <summary><![CDATA[Creates a new instance of SharpenCommand.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor(System.Double)">
            <summary><![CDATA[Creates a new instance of SharpenCommand specifying intensity.]]></summary>
            <param name="intensity">Filter intensity. (0-100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand._ctor(System.Double,System.Int32)">
            <summary><![CDATA[Creates a new instance of SharpenCommand specifying intensity, and matrixSize. ]]></summary>
            <param name="intensity">Filter intensity. (0-100) </param>
            <param name="matrixSize">The larger the matrixSize, the stronger the effect</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the SharpenCommand filter using the current settings to the source image.<crlf>Applies the SharpenCommand filter using the current settings to the source bitmap.]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image.  null (Nothing in VB) if cancelled.<crlf>A new System.Drawing.Bitmap containing the processed image.  null (Nothing in VB) if cancelled.]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets the ChannelFlags specifying which channels to process.]]></summary>
            <returns><![CDATA[The ChannelFlags specifying which channels to process.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Intensity()">
            <summary>Gets or sets the value of intensity</summary>
            <returns>The value of intensity </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.MatrixSize()">
            <summary>Gets or sets the size of the filter. </summary>
            <returns>The size of the filter.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand">
            <summary><![CDATA[Set pixel components above a high threshold value to 255 and below a low threshold value to 0.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor(System.Int32,System.Int32)">
            <summary><![CDATA[Creates a new instance of ThresholdCommand specifying minValue, and maxValue.]]></summary>
            <param name="minValue">Pixels below this level are set to 0.  Valid values (0 - 255).</param>
            <param name="maxValue"><![CDATA[Pixels above this level are set to 255.  (0 - 255) ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <param name="minValue">Pixels below this level are set to 0. Valid values (0 - 255). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <param name="maxValue"><![CDATA[Pixels above this level are set to 255.  (0 - 255)]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand._ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <param name="channelsToProcess"><![CDATA[The ChannelFlags specifying which channels to process.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies ThresholdCommand using the current settings to the source image.<crlf>Applies ThresholdCommand using the current settings to the source bitmap.]]></summary>
            <returns><![CDATA[Null<crlf>Null]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets the ChannelFlags specifying which channels to process.]]></summary>
            <returns><![CDATA[The ChannelFlags specifying which channels to process.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MaxValue()">
            <summary>Gets or sets a value indicating that pixels above this value are set to 255. </summary>
            <returns><![CDATA[A value indicating that pixels above this value are set to 255.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MinValue()">
            <summary>Gets or sets a value indicating that pixels below this value are set to 0.</summary>
            <returns>A value indicating that pixels below this value are set to 0.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand">
            <summary><![CDATA[The unsharp mask is a sharpening filter which derives its name from the fact that it enhances edges and other high frequency components in an image via a procedure which subtracts an unsharp, or gaussian blurred, version of an image from the original image.  The unsharp mask filter is commonly used in the photographic and printing industries for crispening edges. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand._ctor(System.Int32,System.Double,System.Double)">
            <summary><![CDATA[Creates a new instance of UnsharpMaskCommand specifying threshold, amount, and sigma.]]></summary>
            <param name="threshold">Controls the depth of the effect; the lower the value, the greater the effect. Any value between 0 and 255 is valid.</param>
            <param name="amount">Controls the intensity of the effect.  Values should be between 0.0 (no effect) and 1.0 (full effect). Higher values will give unpredictable results.</param>
            <param name="sigma">The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur.  Good values to start with are between 0.6 and 2.4.  The higher the value the greater the blur depth and longer the processing time.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the UnsharpMaskCommand filter using the current settings to the source image.<crlf>Applies the UnsharpMaskCommand filter using the current settings to the source bitmap.]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image.  null (Nothing in VB) if cancelled.<crlf>A new System.Drawing.Bitmap containing the processed image.  null (Nothing in VB) if cancelled.]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Amount()">
            <summary>Gets or sets the value of amount</summary>
            <returns>Controls the intensity of the effect.  Values should be between 0.0 (no effect) and 1.0 (full effect). Higher values will give unpredictable results.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ChannelsToProcess()">
            <summary><![CDATA[Gets or sets the ChannelFlags specifying which channels to process.]]></summary>
            <returns><![CDATA[The ChannelFlags specifying which channels to process.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Sigma()">
            <summary>Gets or sets the value of sigma</summary>
            <returns>The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur.  Good values to start with are between 0.6 and 2.4.  The higher the value the greater the blur depth and longer the processing time.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Threshold()">
            <summary>Gets or sets the value of threshold</summary>
            <returns>Controls the depth of the effect; the lower the value, the greater the effect. Any value between 0 and 255 is valid.</returns>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Transforms">
            <summary>Contains classes that transform pixel data from one location to another.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode">
            <summary><![CDATA[Enumeration used by EllipticalTransform and PolygonTransform.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Horizontal">
            <summary>Only the horizontal sides will be compressed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Vertical">
            <summary>Only the vertical sides will be compressed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Both">
            <summary>Both horizontal and vertical sides will be compressed.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode">
            <summary><![CDATA[Enumeration used by OffsetTransform.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.DontWrapEdges">
            <summary><![CDATA[Don't wrap the image at the edges.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapBothEdges">
            <summary>Wrap both X and Y edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyX">
            <summary>Wrap only the X edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyY">
            <summary>Wrap only the Y edges.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode">
            <summary><![CDATA[Enumeration used by RippleTransform.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Full">
            <summary>Waves remain at full intensity.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Linear">
            <summary>Waves diminish linearly with their distance from center.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Square">
            <summary>Waves diminish with the square of their distance.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Sine">
            <summary>Waves diminish with the sine of their distance (inverse!).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Cosine">
            <summary>Waves diminish with the cosine of their distance.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection">
            <summary><![CDATA[Enumeration used by SkewCommand.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Horizontal">
            <summary>Makes the image skew on the top or bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Vertical">
            <summary>Makes the image skew on the left or right.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode">
            <summary><![CDATA[Enumeration used by WaveTransform.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightSine">
            <summary>The wave moves from left to right as a sine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomSine">
            <summary>The wave moves from top to bottom as a sine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightCosine">
            <summary>The wave moves from left to right as a cosine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomCosine">
            <summary>The wave moves from top to bottom as a cosine wave.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform">
            <summary><![CDATA[This transform applies a bump map texture to an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor">
            <summary>Initializes a new instance of BumpMapTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor(System.Double,Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Creates a new instance of BumpMapTransform specifying smoothness, and bumpMapImage.]]></summary>
            <param name="smoothness">Controls smoothness of the effect (try between .5 and 1.5 to start).</param>
            <param name="bumpMapImage">An 8-bit grayscale image to use as the bump map. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform._ctor(System.Double,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of the BumpMapTransform effect.</summary>
            <param name="smoothness">Controls smoothness of the effect (try between .5 and 1.5 to start). </param>
            <param name="bumpMapImage">An 8-bit grayscale image to use as the bump map.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to which this transform will be applied.</param>
            <param name="height">The height of the image to which this transform will be applied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies BumpMapTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.BumpMapImage()">
            <summary><![CDATA[Gets or sets the bump map image used in this transform. ]]></summary>
            <returns>8-bit image to use as the bump map.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.Smoothness()">
            <summary>Gets or sets the smoothness value which controls the smoothness of the effect (try between .5 and 1.5 to start). </summary>
            <returns>The smoothness of the bump map transform.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode used for this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform">
            <summary>Rounds the image into an ellipse or sphere. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor">
            <summary>Creates a new instance of the EllipticalTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary><![CDATA[Creates a new instance of EllipticalTransform specifying radius, offset and mode.]]></summary>
            <param name="radius">The width and height of the ellipse. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="mode"><![CDATA[The type of CompressTransformMode used in this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of EllipticalTransform specifying radius, offset, mode and transformMode.]]></summary>
            <param name="radius">The width and height of the ellipse. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="mode"><![CDATA[The type of CompressTransformMode used in this transform. ]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform._ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of EllipticalTransform specifying radius, offset, mode, transformMode and backColor.</summary>
            <param name="radius">The width and height of the ellipse. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="mode"><![CDATA[The type of CompressTransformMode used in this transform. ]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform.  ]]></param>
            <param name="backColor">The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to be used with this transform.</param>
            <param name="height">The height of the image to be used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies EllipticalTransform using the current settings to the source image.</summary>
            <returns><![CDATA[AtalaImage<crlf>Bitmap]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.BackColor()">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
            <returns>The background color to use for newly uncovered areas of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Mode()">
            <summary><![CDATA[Gets or sets the type of CompressTransformMode used in this transform. ]]></summary>
            <returns><![CDATA[The type of CompressTransformMode used in this transform. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Offset()">
            <summary>Gets or set the offset position from the center of the image.</summary>
            <returns>The offset position from the center of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Radius()">
            <summary>Gets or set the width and height of the ellipse.</summary>
            <returns>The width and height of the ellipse.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode for this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode used for this transform.  ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand">
            <summary>Flips an image horizontally or vertically.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand._ctor(Atalasoft.Imaging.FlipDirection)">
            <summary>Creates a new instance of the FlipCommand object.</summary>
            <param name="direction">Specifies which direction, horizontal or vertical, to flip the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the FlipCommand using the current settings to the source image. </summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Direction()">
            <summary>Gets or sets the type of flip to perform.</summary>
            <returns>The type of flip to perform.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform">
            <summary><![CDATA[Used to create a zoomed camera lens effect.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor">
            <summary>Creates a new instance of the LensTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor(System.Double,System.Drawing.Point)">
            <summary><![CDATA[Creates a new instance of LensTransform specifying radius and offset.]]></summary>
            <param name="radius">Maximum distance from the center for this effect. </param>
            <param name="offset">The offset position from the center of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform._ctor(System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of LensTransform specifying radius, offset and transformMode.</summary>
            <param name="radius">Maximum distance from the center for this effect. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to be process.</param>
            <param name="height">The height of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies LensTransformCommand using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Offset()">
            <summary>Gets or set the offset position from the center of the image. </summary>
            <returns>The offset position from the center of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Radius()">
            <summary>Gets or sets the maximum distance from the center for this effect. </summary>
            <returns>Maximum distance from the center for this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.TransformMode()">
            <summary><![CDATA[The InterpolationMode used with this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode used for this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform">
            <summary><![CDATA[This transform produces a center-shift transform which runs from one side of the image to the other, in a straight line.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor">
            <summary>Creates an instance of the LineSliceTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor(System.Int32,System.Int32,System.Boolean)">
            <summary><![CDATA[Creates a new instance of LineSliceTransform object. ]]></summary>
            <param name="endPoint1">Left or top edge of the transform.</param>
            <param name="endPoint2">Right or bottom edge of the transform.</param>
            <param name="horizontalTransform">Specifies if the transform will be horizontal or vertical.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform._ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of LineSliceTransform object. ]]></summary>
            <param name="endPoint1">Left or top edge of the transform. </param>
            <param name="endPoint2">Right or bottom edge of the transform. </param>
            <param name="horizontalTransform">Specifies if the transform will be horizontal or vertical. </param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process. </param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies LineSliceTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint1()">
            <summary>Gets or sets the left or top edge of the transform.</summary>
            <returns>Left or top edge of the transform.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint2()">
            <summary>Gets or sets the right or bottom edge of the transform. </summary>
            <returns>Right or bottom edge of the transform.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.HorizontalTransform()">
            <summary>Gets or sets the value specifing if the transform will be horizontal or vertical. </summary>
            <returns>Specifies if the transform will be horizontal or vertical.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode used for this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode used for this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform">
            <summary>This transform creates a marbled, wavy, glassy, rippled effect.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor">
            <summary>Creates a new instance of the MarbleTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor(System.Double,System.Drawing.Size)">
            <summary><![CDATA[Creates a new instance of MarbleTransform specifying smoothness and scale.]]></summary>
            <param name="smoothness"><![CDATA[Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. ]]></param>
            <param name="scale"><![CDATA[The size of the perlin noise.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of MarbleTransform specifying smoothness, scale and transformMode.]]></summary>
            <param name="smoothness"><![CDATA[Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. ]]></param>
            <param name="scale"><![CDATA[The size of the perlin noise.]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform._ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of MarbleTransform specifying smoothness, scale, transformMode and backColor.</summary>
            <param name="smoothness"><![CDATA[Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. ]]></param>
            <param name="scale"><![CDATA[The size of the perlin noise.]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform. ]]></param>
            <param name="backColor">The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies MarbleTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.BackColor()">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
            <returns>The background color to use for newly uncovered areas of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Scale()">
            <summary><![CDATA[Gets or sets the size of the perlin noise.]]></summary>
            <returns><![CDATA[The size of the perlin noise.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Smoothness()">
            <summary>Gets or sets the smoothness of the transform.</summary>
            <returns><![CDATA[Controls smoothness of the effect.  Try between 0.5 and 1.5 to start.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode used for this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode used for this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform">
            <summary>Moves the image on the canvas by a specified number of pixels.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor">
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode)">
            <summary><![CDATA[Creates a new instance of OffsetTransform specifying offset and offsetMode.]]></summary>
            <param name="offset"><![CDATA[The new left, top position for the image. ]]></param>
            <param name="offsetMode"><![CDATA[Style of OffsetTransformMode to perform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of OffsetTransform specifying offset, offsetMode and transformMode.]]></summary>
            <param name="offset"><![CDATA[The new left, top position for the image. ]]></param>
            <param name="offsetMode"><![CDATA[Style of OffsetTransformMode to perform. ]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform._ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of OffsetTransform specifying offset, offsetMode, transformMode and backColor.</summary>
            <param name="offset"><![CDATA[The new left, top position for the image. ]]></param>
            <param name="offsetMode"><![CDATA[Style of OffsetTransformMode to perform. ]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode used for this transform. ]]></param>
            <param name="backColor">The background color to use on newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies OffsetTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.BackColor()">
            <summary>Gets or sets the background color to use on newly uncovered areas of the image.</summary>
            <returns>The background color to use on newly uncovered areas of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.Offset()">
            <summary><![CDATA[Gets or set the new left, top position for the image. ]]></summary>
            <returns><![CDATA[The new left, top position for the image. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.OffsetMode()">
            <summary><![CDATA[Gets or sets the style of OffsetTransformMode to perform. ]]></summary>
            <returns><![CDATA[Style of OffsetTransformMode to perform. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode used for this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform">
            <summary><![CDATA[This effect is similar to the marble transform, but the image tends to break up less.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform._ctor">
            <summary>Creates a new instance of the PerlinTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PerlinTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Scale()">
            <summary><![CDATA[Gets or sets the size of the perlin noise.]]></summary>
            <returns><![CDATA[The size of the perlin noise.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Smoothness()">
            <summary><![CDATA[Gets or sets the smoothness of this effect. ]]></summary>
            <returns>The smoothness of this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform.]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform">
            <summary><![CDATA[This transform attracts pixels towards the center of the image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor">
            <summary>Creates a new instance of the PinchTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor(System.Double,System.Double,System.Drawing.Point)">
            <summary><![CDATA[Creates a new instance of PinchTransform specifying maxRadius, amount and offset.]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="amount">The number of pixels to pinch. </param>
            <param name="offset">The offset position from the center of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of PinchTransform specifying maxRadius, amount, offset and transformMode.]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="amount">The number of pixels to pinch. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="transformMode"><![CDATA[The InterpolationMode of this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform._ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of PinchTransform specifying maxRadius, amount, offset, transformMode and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="amount">The number of pixels to pinch. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="transformMode"><![CDATA[The InterpolationMode of this transform. ]]></param>
            <param name="backColor">The background color used for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PinchTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Amount()">
            <summary>Gets or sets the number of pixels to pinch.</summary>
            <returns>The number of pixels to pinch.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.BackColor()">
            <summary>Gets or sets the background color used for newly uncovered areas of the image.</summary>
            <returns>The background color used for newly uncovered areas of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.MaxRadius()">
            <summary>Gets or sets the maximum distance from the center for this effect. </summary>
            <returns>Maximum distance from the center for this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Offset()">
            <summary>Gets or set the offset position from the center of the image. </summary>
            <returns>The offset position from the center of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform.]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform">
            <summary><![CDATA[This transform resizes image rows (or columns) to fit inside the specified polygon. This polygon must be convex. If it is concave, the largest convex polygon that can be formed from the points will be used.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor">
            <summary>Creates a new PolygonTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary><![CDATA[Creates a new instance of PolygonTransform specifying points, and mode.]]></summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of PolygonTransform specifying points, mode and transformMode. ]]></summary>
            <param name="points">Array of points for the polygon. </param>
            <param name="mode">The compress method to use on this transform. </param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform._ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of PolygonTransform specifying points, mode, transformMode and backColor. ]]></summary>
            <param name="points">Array of points for the polygon. </param>
            <param name="mode">The compress method to use on this transform. </param>
            <param name="transformMode">Specifies the interpolation used with this transform. </param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies PolygonTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.BackColor()">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
            <returns>The background color to use for newly uncovered areas of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.Mode()">
            <summary><![CDATA[Gets or sets the CompressTransformMode to use on this transform. ]]></summary>
            <returns>The compress method to use on this transform.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform.]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand">
            <summary>Perform a point to point warp of an image, creating a smear effect.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand._ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary><![CDATA[Creates a new instance of PushCommand specifying fromPixel, and toPixel. ]]></summary>
            <param name="fromPixel">The position on the image to push from.</param>
            <param name="toPixel">The position on the image to move the pixels to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary><![CDATA[Applies the PushCommand using the current settings to the sourceImage.<crlf>Applies PushCommandCommand using the current settings to the source image.<crlf>Applies PushCommandCommand using the current settings to the source bitmap.]]></summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. <crlf>Null<crlf>Null]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.FromPixel()">
            <summary>Gets or sets the position on the image to push from. </summary>
            <returns>The position on the image to push from.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ToPixel()">
            <summary>Gets or sets the position on the image to move the pixels to. </summary>
            <returns>The position on the image to move the pixels to.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand">
            <summary><![CDATA[Similar to the PolygonTransform, this transform additionally lets you specify a source polygon to allow further control over the warping of the image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor">
            <summary>Creates a new instance of the QuarilateralWarpCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of QuadrilateralWarpCommand specifying destination points that will yeild a perspective transform.]]></summary>
            <param name="destBottomLeft">The bottom left point of the destination image in pixels.</param>
            <param name="destTopLeft">The top left point of the destination image in pixels.</param>
            <param name="destTopRight">The top right point of the destination image in pixels.</param>
            <param name="destBottomRight">The bottom right point of the destination image in pixels.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="backgroundColor">The background color used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand._ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of QuadrilateralWarpCommand specifying sourceBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, destBottomLeft, destTopLeft, destTopRight, destBottomRight, and interpolation.]]></summary>
            <param name="sourceBottomLeft">The bottom left point of the source image in pixels.</param>
            <param name="sourceTopLeft">The top left point of the source image in pixels.</param>
            <param name="sourceTopRight">The top right point of the source image in pixels.</param>
            <param name="sourceBottomRight">The bottom right point of the source image in pixels.</param>
            <param name="destBottomLeft">The bottom left point of the destination image in pixels.</param>
            <param name="destTopLeft">The top left point of the destination image in pixels.</param>
            <param name="destTopRight">The top right point of the destination image in pixels.</param>
            <param name="destBottomRight">The bottom right point of the destination image in pixels.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="backgroundColor">The background color used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the QuadrilateralWarpCommand Filters using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.BackgroundColor()">
            <summary>Gets or sets the value of backgroundColor</summary>
            <returns><![CDATA[The color of the background when the destination image doesn't occupy a perfect rectangle]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomLeft()">
            <summary>Gets or sets the bottom left point of the destination image in pixels. </summary>
            <returns>The bottom left point of the destination image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomRight()">
            <summary>Gets or sets the bottom right point of the destination image in pixels. </summary>
            <returns>The bottom right point of the destination image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopLeft()">
            <summary>Gets or sets the top left point of the destination image in pixels. </summary>
            <returns>The top left point of the destination image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopRight()">
            <summary>Gets or sets the top right point of the destination image in pixels. </summary>
            <returns>The top right point of the destination image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Interpolation()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform.]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomLeft()">
            <summary>Gets or sets the bottom left point of the source image in pixels. </summary>
            <returns>The bottom left point of the source image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomRight()">
            <summary>Gets or sets the bottom right point of the source image in pixels. </summary>
            <returns>The bottom right point of the source image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopLeft()">
            <summary>Gets or sets the top left point of the source image in pixels.</summary>
            <returns>The top left point of the source image in pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopRight()">
            <summary>Gets or sets the top right point of the source image in pixels. </summary>
            <returns>The top right point of the source image in pixels.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform">
            <summary><![CDATA[This transform randomly modifies the pixels of an image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor">
            <summary>Creates a new instance of the RandomTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor(System.Double)">
            <summary><![CDATA[Creates a new instance of RandomTransform specifying amount.]]></summary>
            <param name="amount">Amount to offset the pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of RandomTransform specifying amount and transformMode. ]]></summary>
            <param name="amount">Amount to offset the pixels. </param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies RandomTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.Amount()">
            <summary>Gets or sets the amount of offset to apply to the pixels.</summary>
            <returns>Amount to offset the pixels.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand">
            <summary><![CDATA[Overlays the current image onto a specified position on a new image of the specified background color.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor">
            <summary>Creates a new instance of the ResizeCanvasCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor(System.Drawing.Size,System.Drawing.Point,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of ResizeCanvasCommand specifying canvasSize, position, canvasColor, and canvasPaletteIndex.]]></summary>
            <param name="canvasSize">The size of the new canvas.</param>
            <param name="position">The position of the image on the new canvas.</param>
            <param name="canvasColor">The background color of the canvas</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand._ctor(System.Drawing.Size,System.Drawing.Point,System.Int32)">
            <summary><![CDATA[Creates a new instance of ResizeCanvasCommand specifying canvasSize, position, canvasColor, and canvasPaletteIndex.]]></summary>
            <param name="canvasSize">The size of the new canvas.</param>
            <param name="position">The position of the image on the new canvas.</param>
            <param name="canvasPaletteIndex">The palette index of the canvas</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the ResizeCanvasCommand Transforms using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasColor()">
            <summary>Gets or sets the background color of the canvas.</summary>
            <returns>The background color of the canvas.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasPaletteIndex()">
            <summary>Gets or sets the palette index of the canvas.</summary>
            <returns>The palette index of the canvas.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasSize()">
            <summary>Gets or sets the size of the new canvas. </summary>
            <returns>The size of the new canvas.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.Position()">
            <summary>Gets or sets the position of the image on the new canvas. </summary>
            <returns>The position of the image on the new canvas.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform">
            <summary><![CDATA[Creates a water ripple effect on the image.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor">
            <summary>Creates a new instance of the RippleTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode)">
            <summary><![CDATA[Creates a new instance of RippleTransform specifying maxRadius, intensity, periods, offset and mode.]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="intensity">Amount of intensity. (1 = no effect) </param>
            <param name="periods">Number of periods in the distance wave. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="mode"><![CDATA[The RippleTransformMode to use. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of RippleTransform specifying maxRadius, intensity, periods, offset, mode and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="intensity">Amount of intensity. (1 = no effect) </param>
            <param name="periods">Number of periods in the distance wave. </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="mode"><![CDATA[The RippleTransformMode to use. ]]></param>
            <param name="transformMode"><![CDATA[The InterpolationMode of this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies RippleTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Intensity()">
            <summary>Gets or sets the amount of intensity.</summary>
            <returns>Amount of intensity.  (1 = no effect)</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.MaxRadius()">
            <summary>Gets or sets the maximum distance from the center for this effect. </summary>
            <returns>Maximum distance from the center for this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Mode()">
            <summary><![CDATA[Gets or sets the RippleTransformMode to use. ]]></summary>
            <returns><![CDATA[The RippleTransformMode to use. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Offset()">
            <summary>Gets or set the offset position from the center of the image. </summary>
            <returns>The offset position from the center of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Periods()">
            <summary>Gets or sets the number of periods in the distance wave. </summary>
            <returns>Number of periods in the distance wave.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand">
            <summary><![CDATA[This will rotate an image by the specified number of degrees.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor">
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double)">
            <summary><![CDATA[Creates a new instance of RotateCommand specifying the angle.]]></summary>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of RotateCommand specifying angle and backgroundColor.]]></summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="backgroundColor">The color of the background when angle is not a multiple of 90 degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of RotateCommand specifying angle, and interpolation.]]></summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="interpolation">The interpolation used for rotation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand._ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of RotateCommand specifying angle, interpolation, and backgroundColor.]]></summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="interpolation">The interpolation used for rotation.</param>
            <param name="backgroundColor">The color of the background when angle is not a multiple of 90 degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the RotateCommand Transforms using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Angle()">
            <summary>Gets or sets the angle of rotation in degrees. </summary>
            <returns>The angle of rotation in degrees.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BackgroundColor()">
            <summary>Gets or sets the color of the background when angle is not a multiple of 90 degrees. </summary>
            <returns>The color of the background when angle is not a multiple of 90 degrees.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Interpolation()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this command. ]]></summary>
            <returns><![CDATA[The InterpolationMode used for rotation. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand">
            <summary><![CDATA[Using this command you can shift the top, bottom, left or right side of an image independently.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor">
            <summary>Creates a new instance of the SkewCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32)">
            <summary><![CDATA[Creates a new instance of SkewCommand specifying direction and offset. ]]></summary>
            <param name="direction">Determines whether the skew is horizontal or vertical. </param>
            <param name="offset">The number of pixels to skew. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color)">
            <summary><![CDATA[Creates a new instance of SkewCommand specifying direction, offset and backColor. ]]></summary>
            <param name="direction">Determines whether the skew is horizontal or vertical. </param>
            <param name="offset">The number of pixels to skew. </param>
            <param name="backColor">A color to used in newly exposed areas. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color,System.Boolean)">
            <summary><![CDATA[Creates a new instance of SkewCommand specifying direction, offset, backColor, and fastSkew.]]></summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
            <param name="backColor">A color to used in newly exposed areas.</param>
            <param name="fastSkew">Provides a faster but less accurate skew.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the SkewCommand Transforms using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.BackColor()">
            <summary><![CDATA[Gets or sets a color to used in newly exposed areas. ]]></summary>
            <returns>A color to used in newly exposed areas.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Direction()">
            <summary><![CDATA[Gets or sets a value to determine whether the skew is horizontal or vertical.  ]]></summary>
            <returns>Determines whether the skew is horizontal or vertical.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.FastSkew()">
            <summary>Gets or sets a value indicating if speed is more important then quality. </summary>
            <returns>Provides a faster but less accurate skew. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Offset()">
            <summary>Gets or sets the number of pixels to skew. </summary>
            <returns>The number of pixels to skew.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform">
            <summary><![CDATA[This transform will rotate the image about the center with a constant angular distance.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor">
            <summary>Creates a new instance of the SpinTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of SpinTransform specifying maxRadius, maxAngleOffset, offset and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset">Angular distance to spin pixels. (degrees) </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="backColor">The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform._ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of SpinTransform specifying maxRadius, maxAngleOffset, offset, backColor and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset">Angular distance to spin pixels. (degrees) </param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="backColor">The background color to use for newly uncovered areas of the image. </param>
            <param name="transformMode"><![CDATA[The InterpolationMode of this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SpinTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.BackColor()">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
            <returns>The background color to use for newly uncovered areas of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxAngleOffset()">
            <summary>Gets or sets the angular distance to spin pixels. (degrees) </summary>
            <returns>Angular distance to spin pixels. (degrees)</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxRadius()">
            <summary>Gets or sets the maximum distance from the center for this effect. </summary>
            <returns>Maximum distance from the center for this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.Offset()">
            <summary>Gets or set the offset position from the center of the image. </summary>
            <returns>The offset position from the center of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform">
            <summary><![CDATA[A SpinWaveTransform rotates the image about the center with a variable angular distance.  The distance varies in a sine wave pattern.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor">
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point)">
            <summary><![CDATA[Creates a new instance of SpinWaveTransform specifying maxRadius, maxAngleOffset, periods and offset.]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees). </param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of SpinWaveTransform specifying maxRadius, maxAngleOffset, periods, offset and transformMode.]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees). </param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="transformMode"><![CDATA[The InterpolationMode of this transform. ]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform._ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of SpinWaveTransform specifying maxRadius, maxAngleOffset, periods, offset, transformMode and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees). </param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image. </param>
            <param name="transformMode"><![CDATA[The InterpolationMode of this transform. ]]></param>
            <param name="backColor">The background color of newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies SpinWaveTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.BackColor()">
            <summary>Gets or sets the background color of newly uncovered areas of the image.</summary>
            <returns>The background color of newly uncovered areas of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxAngleOffset()">
            <summary>Gets or sets the angular distance to spin pixels (degrees). </summary>
            <returns>Angular distance to spin pixels (degrees).</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxRadius()">
            <summary>Gets or sets the maximum distance from the center for this effect. </summary>
            <returns>Maximum distance from the center for this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Offset()">
            <summary>Gets or set the offset position from the center of the image. </summary>
            <returns>The offset position from the center of the image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Periods()">
            <summary>Gets or sets the number of periods in the distance wave. </summary>
            <returns>Number of periods in the distance wave.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform">
            <summary><![CDATA[A base class that is used for transforms.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain. </summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand">
            <summary><![CDATA[This command allows you to combine multiple transforms into a single command call.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor">
            <summary>Creates a new instance of the TransformChainCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor()">
            <summary>Create a new instance of the TransformChainCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(System.Drawing.Color)">
            <param name="backColor">The background color to used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <param name="backColor">The background color to used for newly uncovered areas of the image.</param>
            <param name="transformMode">The interpolation mode to use for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode,Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <param name="backColor">The background color to used for newly uncovered areas of the image.</param>
            <param name="transformMode">The interpolation mode to use for this transform.</param>
            <param name="transforms">The transforms to add to this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <summary>Creates a new instance of TransformChainCommand specifying the transforms.</summary>
            <param name="transforms">The transforms to add to this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Add(Atalasoft.Imaging.ImageProcessing.Transforms.Transform)">
            <summary>Adds a transform to the collection.</summary>
            <param name="transform">The transform to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies TransformChainCommand using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Clear">
            <summary>Removes all of the transforms from the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo">
            <summary>Copies transfoms from the internal collection to an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(System.Array,System.Int32)">
            <summary>Copies transfoms from the internal collection to an array.</summary>
            <param name="array">An array to copy the transforms into.</param>
            <param name="arrayIndex">The index to start copying transforms into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[],System.Int32)">
            <summary>Copies transfoms from the internal collection to an array.</summary>
            <param name="array">An array to copy the transforms into. </param>
            <param name="arrayIndex"><![CDATA[The index to start copying transforms into.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetEnumerator">
            <summary>This allows the use of foreach statements on the transforms collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.BackColor()">
            <summary>Gets or sets the background color to use on newly uncovered areas of the image.</summary>
            <returns>The background color to use on newly uncovered areas of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Count()">
            <summary>Returns the number of transforms in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.IsSynchronized()">
            <summary>Gets a value indicating whether access to the transforms collection is synchronized.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SyncRoot()">
            <summary>Gets an object that can be used to synchronize access to the transforms collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform">
            <summary><![CDATA[This allows you to write your own transform methods and add them to the transform chain, just like the built-in transforms.  To do this, you must supply a UserTransformCallback.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor">
            <summary>Creates a new instance of the UserTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback)">
            <summary>Creates a new instance of the UserTransform class specifying the use transform callback. </summary>
            <param name="callback">Delegate which will be called for each pixel processed in the output image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of the UserTransform class specifying the use transform callback and interpolation mode.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the output image. </param>
            <param name="transformMode">Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform._ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of the UserTransform class specifying the use transform callback, interpolation mode, and background color.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the output image. </param>
            <param name="transformMode">Specifies the interpolation used with this transform. </param>
            <param name="backColor">The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies UserTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.BackColor()">
            <summary>Gets or sets the background color used when a transform uncovers part of the image.</summary>
            <returns>The background color used when a transform uncovers part of the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.Callback()">
            <summary>Gets or sets the UserTransformCallback delegate which will be called for each pixel processed in the output image. </summary>
            <returns>The UserTransformCallback delegate which will be called for each pixel processed in the output image. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData">
            <summary>This class is used in the UserTransformCallback to indicate the pixel locations of the transform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData._ctor">
            <summary>Initializes a new instance of UserTransformData.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData._ctor()">
            <summary>Initializes a new instance of UserTransformData.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData._ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Initializes a new instance of UserTransformData specifying the to and from points.</summary>
            <param name="currentPixel">The current pixel to transform. </param>
            <param name="fromPixel">The value which the pixel which should move to the current pixel. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.CurrentPixel()">
            <summary>Gets the current pixel to transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.FromPixel()">
            <summary>Gets or sets the value which the pixel which should move to the current pixel.</summary>
            <returns>The value which the pixel which should move to the current pixel.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform">
            <summary><![CDATA[This transform moves across the image with a sine wave pattern.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor">
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode)">
            <summary><![CDATA[Creates a new instance of WaveTransform specifying maxOffsetPercent, periods and mode. ]]></summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="mode">The style of wave transform to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform._ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of WaveTransform specifying maxOffsetPercent, periods, mode and transformMode. ]]></summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave. </param>
            <param name="periods">Number of periods in the wave. </param>
            <param name="mode">The style of wave transform to create. </param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies WaveTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.MaxOffsetPercent()">
            <summary>Gets or sets the maximum offset percent for the wave. </summary>
            <returns>Maximum offset percent for the wave.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Mode()">
            <summary>Gets or sets the style of wave transform to create. </summary>
            <returns>The style of wave transform to create.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Periods()">
            <summary>Gets or sets the number of periods in the wave. </summary>
            <returns>Number of periods in the wave.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform">
            <summary><![CDATA[This transform creates an effect which is a bit like looking at the image though a clear sphere.  If you set BigWow to true, the result looks as if you're inside the sphere.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor">
            <summary>Creates a new instance of the WowTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor(System.Double,System.Boolean)">
            <summary><![CDATA[Creates a new instance of WowTransform specifying maxRadius, and bigWow.]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="bigWow">Makes it appear as if you are inside a clear sphere. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform._ctor(System.Double,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of WowTransform specifying maxRadius, bigWow and transformMode. ]]></summary>
            <param name="maxRadius">Maximum distance from the center for this effect. </param>
            <param name="bigWow">Makes it appear as if you are inside a clear sphere. </param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies WowTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow()">
            <summary><![CDATA[Gets or sets a valid indicating if you the effect to appear inside the sphere.]]></summary>
            <returns>A valid indicating if you the effect to appear inside the sphere.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.MaxRadius()">
            <summary>Gets or sets the maximum distance from the center for this effect. </summary>
            <returns>Maximum distance from the center for this effect.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform">
            <summary><![CDATA[This transform moves across the images in a triangle wave pattern.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor">
            <summary>Creates a new instance of the ZigZagTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor(System.Double,System.Int32,System.Boolean)">
            <summary><![CDATA[Creates a new instance of ZigZagTransform specifying maxOffsetPercent, periods, and topToBottom.]]></summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="topToBottom">The wave moves from top to bottom instead of left to right.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform._ctor(System.Double,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary><![CDATA[Creates a new instance of ZigZagTransform specifying maxOffsetPercent, periods, topToBottom and transformMode. ]]></summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave. </param>
            <param name="periods">Number of periods in the wave. </param>
            <param name="topToBottom">The wave moves from top to bottom instead of left to right. </param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies ZigZagTransform using the current settings to the source image.</summary>
            <returns><![CDATA[A new AtalaImage containing the processed image. null (Nothing in VB) if cancelled. ]]></returns>
            <param name="sourceImage"><![CDATA[The source AtalaImage which will be processed.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.MaxOffsetPercent()">
            <summary>Gets or sets the maximum offset percent for the wave. </summary>
            <returns>Maximum offset percent for the wave.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.Periods()">
            <summary>Gets or sets the number of periods in the wave. </summary>
            <returns>Number of periods in the wave.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TopToBottom()">
            <summary>Gets or sets a value indicating if the wave moves from top to bottom instead of left to right. </summary>
            <returns><![CDATA[A value indicating if the wave moves from top to bottom instead of left to right. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TransformMode()">
            <summary><![CDATA[Gets or sets the InterpolationMode of this transform. ]]></summary>
            <returns><![CDATA[The InterpolationMode of this transform. ]]></returns>
        </member>
        <member name="M:__Delegates.UserTransformCallback(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData)">
            <summary>Callback method for the UserTransform object.</summary>
            <param name="callbackData"><![CDATA[Contains the information used in the transform.]]></param>
        </member>
        <member name="N:Atalasoft.Imaging.Metadata">
            <summary><![CDATA[Contains classes for accessing and manipulating metadata that is stored in an image.  Image metadata is any information stored in the image that isn't the pixel or palette data itself.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagID">
            <summary><![CDATA[Contains an enumeration of standard Exif tag ID's that are known.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagIfds">
            <summary><![CDATA[Contains an enumeration of standard Exif Ifd's.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Main">
            <summary>Primary image data information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Exif">
            <summary>Exif camera information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Thumbnail">
            <summary><![CDATA[A thumbnail stored with the image.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.Gps">
            <summary>GPS Satellite information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfds.MakerNote">
            <summary>Camera make specific information.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerTypes">
            <summary>Defines the types of Jpeg Markers that can be saved as a data chunk inside a Jpeg image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.MetadataTypes">
            <summary>Specifies a type of metadata.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.Exif">
            <summary><![CDATA[An ExifCollection metatadata type.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.Iptc">
            <summary><![CDATA[An IptcCollection metatadata type.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.JpegMarker">
            <summary><![CDATA[A JpegMarkerCollection metatadata type.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.ComText">
            <summary><![CDATA[A ComTextCollection metatadata type.]]></summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.MetadataTypes.TiffTags">
            <summary><![CDATA[A TiffTagCollection metatadata type.]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagID">
            <summary>Standard Tiff Tags that can be read from a TIFF file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextCollection">
            <summary><![CDATA[Contains a collection of COM text tags and methods to access COM Text data from an image. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor">
            <summary>Initialize a new instance of this COM Text tag. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor()">
            <summary>Initialize a new instance of this COM Text tag. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor(System.IO.Stream)">
            <summary>Initialize a new instance of this COM Text tag specifying a file stream to retrieve the data from.</summary>
            <param name="stream">File to retreive data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection._ctor(System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying a file to retrieve the data from.</summary>
            <param name="fileName">File to retreive data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Add(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>Add a new COM Text marker to this collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Clear">
            <summary>Clear all COM Text markers from this collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Remove(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>Remove a specified COM Text tag from this collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextCollection.Item(System.Int32)">
            <summary><![CDATA[Returns the ComTextTag by index in the collection and allows the COM Text tags to be enumerated. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextTag">
            <summary><![CDATA[Contains the data of this COM Text tag including the key and text.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor">
            <summary>Initialize a new instance of this COM Text tag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor()">
            <summary>Initialize a new instance of this COM Text tag. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor(System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying the text.</summary>
            <param name="text">The text contained in this COM Text Tag. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag._ctor(System.String,System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying the key and text.</summary>
            <param name="text">The text contained in this COM Text Tag. </param>
            <param name="key"><![CDATA[A unique indentifier of the COM Tag for use in PNG images.]]></param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Key()">
            <summary><![CDATA[Gets or sets a unique indentifier of the COM Tag for use in PNG images. ]]></summary>
            <returns><![CDATA[A unique indentifier of the COM Tag for use in PNG images. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Text()">
            <summary>Gets or sets the text contained in this COM Text Tag. </summary>
            <returns>The text contained in this COM Text Tag. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifCollection">
            <summary><![CDATA[Contains a collection of EXIF tags and methods to access EXIF data.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor">
            <summary>Creates a new instance of the ExifCollection class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor()">
            <summary><![CDATA[Create a new instance of ExifCollection.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.IO.Stream)">
            <summary>Creates a new instance of the IPTCCollection class.</summary>
            <param name="fileStream">File to retreive exif data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.IO.Stream,System.Int32)">
            <summary>Creates a new instance of the ExifCollection class specifying the file stream and page index (in a multipage TIFF) to read the exif metadata from.</summary>
            <param name="fileStream">File to retreive exif data from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ImageFileIOEventHandler)">
            <summary>Creates a new instance of the ExifCollection class specifying the file stream, the page index (in a multipage TIFF) to read the exif metadata from while passing in the thumbnail callback used to read the Exif Thumbnail. </summary>
            <param name="fileStream">File to retreive exif data from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
            <param name="thumbnailCallback"><![CDATA[A callback delegate which is used to read the EXIF thumbnail from a file.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.String)">
            <summary>Creates a new instance of the ExifCollection class specifying the file to read the exif metadata from. </summary>
            <param name="fileName">File to retreive exif data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.String,System.Int32)">
            <summary>Creates a new instance of the ExifCollection class specifying the file and page index (in a multipage TIFF) to read the exif metadata from. </summary>
            <param name="fileName">File to retreive exif data from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection._ctor(System.String,System.Int32,Atalasoft.Imaging.ImageFileIOEventHandler)">
            <summary>Creates a new instance of the ExifCollection class specifying the file, the page index (in a multipage TIFF) to read the exif metadata from while passing in the thumbnail callback used to read the Exif Thumbnail. </summary>
            <param name="fileName">File to retreive exif data from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
            <param name="thumbnailCallback"><![CDATA[A callback delegate which is used to read the EXIF thumbnail from a file.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.ConvertExifDate(System.String)">
            <summary>Convert an Exif Date to a recognizable system date </summary>
            <returns><![CDATA[The converted System.DateTime. ]]></returns>
            <param name="exifDate">A date string returned from an unformatted Exif tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag">
            <summary>Returns an ExifTag based on a description or Exif ID and IFD. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfds)">
            <summary>Returns an ExifTag based on an Exif ID and IFD. </summary>
            <param name="id">The ID of the EXIF tag to lookup.</param>
            <param name="ifd">The IFD to search through.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.String)">
            <summary>Returns an ExifTag based on a tag description. </summary>
            <param name="description"><![CDATA[A textual description of the ExifTag (for example, "DataTime").]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.PopulateStandardTags(System.IntPtr)">
            <summary><![CDATA[Adds all standard Exif tags to the collection and populates the Text property with the tag value.]]></summary>
            <returns>The number of Exif Tags found in the image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.FormatTags()">
            <summary>Sets or returns the behavior which formats the Exif tags when parsing.</summary>
            <returns><![CDATA[If True, Exif tags are formatted to more readable values.  If False, tags are returned as they are written in the file.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.Item(System.Int32)">
            <summary><![CDATA[Returns the ExifTag by index in the collection and allows the Exif tags to be enumerated. ]]></summary>
            <returns>The Exif Tag by index in the collection.</returns>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTag">
            <summary><![CDATA[Contains the data of this Exif tag including ID, IFD, value, and description. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag._ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfds,System.String,System.String)">
            <summary><![CDATA[Creates a new instance of ExifTag specifying the id, ifd, data, and decription. ]]></summary>
            <param name="id">The Exif ID. </param>
            <param name="ifd">The Exif IFD.</param>
            <param name="data">The value of the EXIF Tag.</param>
            <param name="description">The description of this EXIF tag used to lookup the tag.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Data()">
            <summary><![CDATA[Gets the value of this Exif tag. ]]></summary>
            <returns><![CDATA[The value of this Exif tag. ]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Description()">
            <summary>A textual description of this Exif Tag.</summary>
            <returns><![CDATA[This value is used to lookup a tag.  See LookupTag.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.ID()">
            <summary><![CDATA[Sets or returns the ID of this ExifTag.]]></summary>
            <returns><![CDATA[The ID of this ExifTag.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Ifd()">
            <summary><![CDATA[Gets the IFD of this ExifTag. ]]></summary>
            <returns><![CDATA[The IFD of this ExifTag. ]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ImageMetadataException">
            <summary>This exception is thrown when an error with image metadata is detected</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcCollection">
            <summary><![CDATA[Contains a collection of IPTC tags and methods to access IPTC data.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor">
            <summary>Creates a new instance of the IptcCollection class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor()">
            <summary>Creates a new instance of the IPTCCollection class initialized with no data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.IO.Stream)">
            <summary>Creates a new instance of the IptcCollection class specifying the file stream to read the iptc metadata from. </summary>
            <param name="stream">File to retreive iptc data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.IO.Stream,System.Int32)">
            <summary>Creates a new instance of the IptcCollection class specifying the file stream and page index (in a multipage TIFF) to read the iptc metadata from. </summary>
            <param name="stream">File to retreive iptc data from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.String)">
            <summary>Creates a new instance of the IptcCollection class specifying the file to read the iptc metadata from. </summary>
            <param name="fileName">File to retreive iptc data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection._ctor(System.String,System.Int32)">
            <summary>Creates a new instance of the IptcCollection class specifying the file and page index (in a multipage TIFF) to read the iptc metadata from. </summary>
            <param name="fileName">File to retreive iptc data from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Add(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Adds a new IptcTag to the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.addIptcTag(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Add a new IptcTag to the image.</summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CreateIptcDataBlock(System.Int32,System.Boolean,System.IntPtr,System.Int32)">
            <summary>Generate an IPTC data block.</summary>
            <returns>The data block generated by this function can be used in IS3AddJPGOutputMarker to add an IPTC data block to a JPG image.</returns>
            <param name="dataLen">On return indicates the size of the data block.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.GetIptcData(System.IO.Stream,System.Int32)">
            <summary>Read the Iptc data block from from a stream.</summary>
            <param name="stream">Stream object to read from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.GetTagDescription(System.Int32)">
            <summary>Returns a textual description based on an IptcID.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
            <summary>Returns an ExifTag based on an IptcID and index.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.PopulateAllTags(System.IntPtr)">
            <summary>Fill the IptcCollection with all available IptcTags.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Remove(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Remove a specified IptcTag from the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcCollection.Item(System.Int32)">
            <summary><![CDATA[Returns the IptcTag by index in the collection and allows the Iptc tags to be enumerated. ]]></summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcTag">
            <summary><![CDATA[Contains the data of this IPTC tag including ID, index, section, and value. ]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag._ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary><![CDATA[Creates a new instance of ExifTag specifying the id, section, index, and data. ]]></summary>
            <param name="section"><![CDATA[The section for this IPTC tag.  Normally 2.]]></param>
            <param name="id">The ID of this IPTC tag. </param>
            <param name="index">The index of this IPTC tag. </param>
            <param name="data">The value of this IptcTag. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Data()">
            <summary>Gets or sets the value of this IptcTag. </summary>
            <returns>The value of this IptcTag. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.ID()">
            <summary><![CDATA[Gets or sets the ID of this IPTC tag. ]]></summary>
            <returns>The ID of this IPTC tag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Index()">
            <summary>Sets or returns the index value for this IPTC tag.</summary>
            <returns>The index of this IPTC tag. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Section()">
            <summary><![CDATA[Gets or sets the section for this IPTC tag. Normally this value is 2. ]]></summary>
            <returns>The section for this IPTC tag. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarker">
            <summary>A Jpeg Marker is a data block stored in Jpeg images.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker._ctor(Atalasoft.Imaging.Metadata.JpegMarkerTypes,System.Int32,System.IntPtr)">
            <param name="type">The type of JpegMarker. </param>
            <param name="length">The length of this marker in bytes. </param>
            <param name="data"><![CDATA[A pointer to the data stored in this marker.]]></param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.Dispose">
            <summary>Call this method to free the JpegMarker data from memory without waiting for the Garbage Collector.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.Finalize">
            <summary>The Destructor that will automatically be called by the garbage collector</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Data()">
            <summary><![CDATA[Gets or sets a pointer to the data stored in this marker.]]></summary>
            <returns><![CDATA[A pointer to the data stored in this marker.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Length()">
            <summary>Gets or sets the length of this marker in bytes. </summary>
            <returns>The length of this marker in bytes. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Type()">
            <summary>Gets or sets the type of JpegMarker. </summary>
            <returns>The type of JpegMarker. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection">
            <summary><![CDATA[Contains a collection of JpegMarkers and methods to access JpegMarker data.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor">
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor()">
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor(System.IO.Stream)">
            <param name="stream">File to retreive Jpeg markers from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection._ctor(System.String)">
            <param name="fileName">File to retreive Jpeg markers from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Dispose">
            <summary>Call this method to free the Exif data from memory without waiting for the Garbage Collector.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Finalize">
            <summary>The Destructor that will automatically be called by the garbage collector</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarker(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
            <summary>Returns a JpegMarker in the collection based on the marker type.</summary>
            <param name="type">The type of marker to lookup.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Item(System.Int32)">
            <summary>Allows the Jpeg markers to be enumerated.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.MarkersToSave()">
            <summary><![CDATA[Gets or sets the JpegMarkerTypes bit flags that indicate which markers will be saved when this object is passed into a save method.]]></summary>
            <returns><![CDATA[The JpegMarkerTypes bit flags that indicate which markers will be saved.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.MetadataContainer">
            <summary>This object contains properties, methods, and references to objects that deal with metadata stored in images including Exif, IPTC, TIFF Tags, and COM Markers.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.MetadataContainer._ctor()">
            <summary><![CDATA[Ininitializes a new instance of this Atalasoft.Imaging.Metadata object.]]></summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.MetadataContainer.ExifData()">
            <summary><![CDATA[Gets or sets the ExifCollection assigned to this Atalasoft.Imaging.Metadata object.]]></summary>
            <returns><![CDATA[Gets or sets the ExifCollection assigned to this Atalasoft.Imaging.Metadata object.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.MetadataContainer.ImageReadFilter()">
            <summary><![CDATA[Gets or sets a value indicating what metadata should be read into this Atalasoft.Imaging.Metadata object.]]></summary>
            <returns><![CDATA[A value indicating what metadata should be read into this Atalasoft.Imaging.Metadata object.]]></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.MetadataContainer.ImageWriteFilter()">
            <summary>Gets or sets a value indicating what metadata should be saved into the image using this object.</summary>
            <returns>A value indicating what metadata should be saved into the image using this object.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.MetadataContainer.JpegMarkers()">
            <summary><![CDATA[Gets or sets the JpegMarkerCollection assigned to this Atalasoft.Imaging.Metadata object.]]></summary>
            <returns><![CDATA[The JpegMarkerCollection assigned to this Atalasoft.Imaging.Metadata object.]]></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTag">
            <summary>Holds the data of a single TIFF Tag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag._ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object)">
            <summary>Initializes a new instance of the TiffTag class.</summary>
            <param name="id">The ID of this TIFF tag. </param>
            <param name="data">The data of this TIFF tag. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Data()">
            <summary>Gets the data of this TIFF tag. </summary>
            <returns>The data of this TIFF tag. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.ID()">
            <summary>Gets the ID of this TIFF tag.</summary>
            <returns>The ID of this TIFF tag. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagCollection">
            <summary><![CDATA[Contains a collection of TIFF tags and methods to access TIFF tag data.]]></summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor">
            <summary>Creates a new instance of the TiffTagCollection class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor()">
            <summary>Creates a new instance of the TiffTagCollection class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the TiffTagCollection class specifying the file stream to read the Tiff tags from.</summary>
            <param name="fileStream">File to retreive tiff tags from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.IO.Stream,System.Int32)">
            <summary>Initializes a new instance of the TiffTagCollection class specifying the file stream and page index (in a multipage TIFF) to read the Tiff tags from. </summary>
            <param name="fileStream">File to retreive tiff tags from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.String)">
            <summary>Initializes a new instance of the TiffTagCollection class specifying the file to read the Tiff tags from. </summary>
            <param name="fileName">File to retreive tiff tags from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection._ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the TiffTagCollection class specifying the file and page index (in a multipage TIFF) to read the Tiff tags from. </summary>
            <param name="fileName">File to retreive tiff tags from. </param>
            <param name="frameIndex">The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetData(System.String)">
            <summary>Retreive TiffTag information from a file.</summary>
            <param name="filename">The file to retreive Tiff Tags from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag">
            <summary>Returns a single TIFF Tag from a TIFF image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file stream.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="source">The stream containing the encoded TIFF image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream,System.Int32)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file stream and zero based page index.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="source">The stream containing the encoded TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file. </summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The file containing the encoded TIFF image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String,System.Int32)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file and zero based page index.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The file containing the encoded TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag(Atalasoft.Imaging.Metadata.TiffTagID)">
            <summary>Returns a TiffTag based on a TiffID.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTagCollection.Item(System.Int32)">
            <summary><![CDATA[Returns the TiffTag by index in the collection and allows the Tiff tags to be enumerated. ]]></summary>
        </member>
    </members>
</doc>

